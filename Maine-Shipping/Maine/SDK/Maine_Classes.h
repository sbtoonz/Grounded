#pragma once

/**
 * Name: Maine
 * Version: Shipping
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class Maine.Ability
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UAbility : public UObject
	{
	public:
		unsigned char                                              UnknownData_QWPC[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttack*                                             Attack;                                                  // 0x0040(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FA5Z[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetCooldownTimeRemaining();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AchievementsComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UAchievementsComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_V0IV[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAchievementStatus>                          Achievements;                                            // 0x00C0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30TH[0x20];                                  // 0x00D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowDebug;                                              // 0x00F0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C362[0x7];                                   // 0x00F1(0x0007) MISSED OFFSET (PADDING)

	public:
		void ServerRequestAchievementReevaluation();
		void OnTotalPartyPlayerStatChanged(class UPlayerStatConfig* PlayerStat, int32_t Value);
		void OnRep_Achievements();
		void OnPlayerUpgradesChanged(class UPlayerUpgradeComponent* InPlayerUpgradeComponent);
		void OnPlayerStatChanged(class UPlayerStatConfig* PlayerStat, int32_t Value);
		void OnKeyItemObtained(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerState* AcquirerPlayerState, TArray<struct FDataTableRowHandle> RecipesLearned);
		void OnGlobalVariableChanged(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		void ClientUpdateAchievementProgressOnline(const class FString& AchievementUnlockTag, int32_t Progress);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameUserWidget
	 * Size -> 0x0008 (FullSize[0x0278] - InheritedSize[0x0270])
	 */
	class UGameUserWidget : public UNarratableUserWidget
	{
	public:
		unsigned char                                              UnknownData_WWX2[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUsingGamepadChangedImpl(bool bIsUsingGamepad);
		void OnUsingGamepadChanged(bool bOnUsingGamepadChanged);
		void OnPossessedPlayerChange(class ASurvivalPlayerCharacter* NewPlayerCharacter);
		void OnOwnerInventoryChanged();
		void OnGlobalColorChangeImpl();
		void OnGlobalColorChange();
		void OnGameInputTypeChangedImpl(EGameInputType NewGameInputType);
		void OnGameInputTypeChanged(EGameInputType NewGameInputType);
		bool HandleKeyEventChord(const struct FInputChord& InChord);
		class ASurvivalPlayerCharacter* GetSurvivalPlayerCharacter();
		class ASurvivalPlayerController* GetOwningSurvivalPlayerController();
		class AGameUI* GetGameUI();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ActionWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UActionWidget : public UGameUserWidget
	{
	public:
		class UTextBlock*                                          KeyText;                                                 // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              ButtonImage;                                             // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ActionName;                                              // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAxisPositive;                                           // 0x0290(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowMouseKeyboardControls;                              // 0x0291(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowGamepadControls;                                    // 0x0292(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EN8C[0x5];                                   // 0x0293(0x0005) MISSED OFFSET (PADDING)

	public:
		bool ShouldShowControl();
		void SetShowMouseKeyboardControls(bool bValue);
		void SetShowGamepadControls(bool bValue);
		void SetAction(const class FName& InActionName, bool bInAxisPositive);
		void Refresh();
		void NativeOnUsingGamepadChanged(bool bIsUsingGamepad);
		void HandleCultureChanged();
		void HandleAxisMappingChanged(const struct FInputAxisKeyMapping& Value);
		void HandleActionMappingChanged(const struct FInputActionKeyMapping& Value);
		struct FKey GetFirstActionKey();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ActorPoolComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UActorPoolComponent : public UActorComponent
	{
	public:
		class UClass*                                              BaseObject;                                              // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      PooledInstances;                                         // 0x00B8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void ReleaseInstance(class AActor* Instance);
		class AActor* GetInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AIDataProvider_ClimbingTag
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAIDataProvider_ClimbingTag : public UAIDataProvider
	{
	public:
		struct FGameplayTag                                        Value;                                                   // 0x0028(0x0008) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AIDataProvider_FleeRange
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAIDataProvider_FleeRange : public UAIDataProvider
	{
	public:
		float                                                      Value;                                                   // 0x0028(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K4SX[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AIDataProvider_WanderRange
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAIDataProvider_WanderRange : public UAIDataProvider
	{
	public:
		float                                                      Value;                                                   // 0x0028(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0HZQ[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AIDetectionComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UAIDetectionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_6KL6[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IntensityThreshold;                                      // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InvestigateTime;                                         // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PNU4[0x38];                                  // 0x00C0(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnPerceptionUpdate(class AActor* Actor, const struct FAIStimulus& Stimulus);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AIEQSParameter
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAIEQSParameter : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Attack_MinAttackDistance
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttack_MinAttackDistance : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Attack_MaxAttackDistance
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttack_MaxAttackDistance : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Attack_PreferredMaxAttackDistance
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttack_PreferredMaxAttackDistance : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AI_MinimumHeight
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAI_MinimumHeight : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AI_WanderRange
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAI_WanderRange : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AI_MovementSpeed
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAI_MovementSpeed : public UAIEQSParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AI_WaveSpawnRange
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAI_WaveSpawnRange : public UAIEQSParameter
	{
	public:
		unsigned char                                              UnknownData_G2TF[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AI_WaveSpawnSeparation
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAI_WaveSpawnSeparation : public UAIEQSParameter
	{
	public:
		unsigned char                                              UnknownData_YDNC[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AISense_Shout
	 * Size -> 0x0068 (FullSize[0x00E8] - InheritedSize[0x0080])
	 */
	class UAISense_Shout : public UAISense
	{
	public:
		TArray<struct FAIShoutEvent>                               ShoutEvents;                                             // 0x0080(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		float                                                      SpeedOfSoundSq;                                          // 0x0090(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_710Q[0x54];                                  // 0x0094(0x0054) MISSED OFFSET (PADDING)

	public:
		void ReportShoutEvent(class UObject* WorldContextObject, class AActor* Shouter, class AActor* Target, const class FName& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AISense_Sound
	 * Size -> 0x0060 (FullSize[0x00E0] - InheritedSize[0x0080])
	 */
	class UAISense_Sound : public UAISense
	{
	public:
		TArray<struct FAISoundEvent>                               SoundEvents;                                             // 0x0080(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7DJ7[0x50];                                  // 0x0090(0x0050) MISSED OFFSET (PADDING)

	public:
		void ReportSoundEvent(class UObject* WorldContextObject, class AActor* Instigator, const struct FVector& Location, float Intensity, float Range, const class FName& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AISenseConfig_Shout
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class UAISenseConfig_Shout : public UAISenseConfig
	{
	public:
		class UClass*                                              Implementation;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoutHearingRadius;                                      // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6PBT[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AISenseConfig_Sound
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class UAISenseConfig_Sound : public UAISenseConfig
	{
	public:
		class UClass*                                              Implementation;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HearingRadius;                                           // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8SQC[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AITargettingComponent
	 * Size -> 0x00C0 (FullSize[0x0170] - InheritedSize[0x00B0])
	 */
	class UAITargettingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_5TPE[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SuspiciousThreshold;                                     // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DangerThreshold;                                         // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetExpirationTime;                                    // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThreatDecayTime;                                         // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageThreatModifier;                                    // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HearingThreatModifier;                                   // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetDistanceModifier;                                  // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBuildingTargettingType                                    BuildingTargetType;                                      // 0x00D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETargetPriorityType                                        TargetPriorityType;                                      // 0x00D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTargetsCanExpire;                                       // 0x00D6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseRandomTarget;                                         // 0x00D7(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomTargetModeSelectInterval;                          // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProbabilitySelectedRandomModeTarget;                     // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               CachedRandomTargetKey;                                   // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VR56[0x88];                                  // 0x00E8(0x0088) MISSED OFFSET (PADDING)

	public:
		void ValidateTargets();
		void OnPerceptionUpdate(class AActor* Actor, const struct FAIStimulus& Stimulus);
		class AActor* GetTargetActor();
		void CacheRandomOverrideTarget();
		void CacheCurrentTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AITokenManager
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UAITokenManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_5DQU[0x58];                                  // 0x0028(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HourBasedOneShotsData
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UHourBasedOneShotsData : public UDataAsset
	{
	public:
		TArray<struct FHourBasedOneShotBundle>                     HourlyEntries;                                           // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AmbienceManager
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UAmbienceManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateZoneAmbienceDelegate;                            // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UQuadAudioBedComponent*                              QuadAudioBedComponent;                                   // 0x0038(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAmbienceZoneBucket*>                         ZoneBuckets;                                             // 0x0040(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 LocalZoneAudioDataRowHandle;                             // 0x0050(0x0010) Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OG8Z[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUpdateZone(const struct FDataTableRowHandle& PrevZoneDataTableRowHandle, const struct FDataTableRowHandle& NewZoneDataTableRowHandle, bool bIsSubmerged);
		void OnHourChanged(int32_t NewHour, int32_t NewDay);
		void HandleEnterNewZone(const struct FDataTableRowHandle& ZoneAudioRowHandle);
		struct FDataTableRowHandle GetLocalZoneAudioDataRowHandle();
		void DestroyAllZoneBuckets();
		void CreateNewZoneBuckets(class UDataTable* OneShotDataTable);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AmbienceZoneBucket
	 * Size -> 0x01E8 (FullSize[0x0210] - InheritedSize[0x0028])
	 */
	class UAmbienceZoneBucket : public UObject
	{
	public:
		class FName                                                ZoneOneShotEntryName;                                    // 0x0028(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FZoneOneShotEntry                                   ZoneOneShotEntry;                                        // 0x0030(0x01D8) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		struct FTimerHandle                                        CurrentTimerHandle;                                      // 0x0208(0x0008) Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TryPlayOSAndStartTimer();
		bool TryPlayingOneShot(int32_t StartHourOfDay, int32_t EndHourOfDay, float Probability);
		void StartTimer();
		bool IsHourWithingRange(int32_t HourToCheck);
		void Init(const class FName& InZoneOneShotEntryName, const struct FZoneOneShotEntry& InZoneOneShotEntry);
		void Cleanup();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimationInteractComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UAnimationInteractComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnInteractAnimation;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UAnimEffect*                                         Anim;                                                    // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              Prop;                                                    // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LL4W[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseAnimEffect
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UBaseAnimEffect : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimEffect
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimEffect : public UBaseAnimEffect
	{
	public:
		class UAnimMontage*                                        Anim;                                                    // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_ConsumeFrame
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ConsumeFrame : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_DropItem
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_DropItem : public UAnimNotify
	{
	public:
		EEquipmentSlot                                             DropSlot;                                                // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZYWQ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_Footstep
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_Footstep : public UAnimNotify
	{
	public:
		EFootstepType                                              OverrideFootstepType;                                    // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R0SI[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_HitFrame
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_HitFrame : public UAnimNotify
	{
	public:
		bool                                                       UseSecondaryDamageData;                                  // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B8KV[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SecondaryDamageDataIndex;                                // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_InteractFrame
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_InteractFrame : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_InteractShakeDown
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_InteractShakeDown : public UAnimNotify
	{
	public:
		class UCurveFloat*                                         WiggleAmplitude;                                         // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_LadderHandPlant
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_LadderHandPlant : public UAnimNotify
	{
	public:
		unsigned char                                              bIsRightHand : 1;                                        // 0x0038(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6A5Z[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_LightFire
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_LightFire : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_PlayBiteEffect
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PlayBiteEffect : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_PlayCharacterSound
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PlayCharacterSound : public UAnimNotify
	{
	public:
		ECharacterAudioType                                        SoundType;                                               // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AS7D[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        SoundTag;                                                // 0x003C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VolumeMultiplier;                                        // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchMultiplier;                                         // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bFollow : 1;                                             // 0x004C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YCPY[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttachName;                                              // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                UnderwaterParam;                                         // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_SetMovementMode
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_SetMovementMode : public UAnimNotify
	{
	public:
		EMovementMode                                              Mode;                                                    // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZOLY[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotify_ThrowItem
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ThrowItem : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_AttackRootMotion
	 * Size -> 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_AttackRootMotion : public UAnimNotifyState
	{
	public:
		float                                                      MaxScale;                                                // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DT6M[0xC4];                                  // 0x0034(0x00C4) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_DisableGravity
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_DisableGravity : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_ForceCameraMode
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_ForceCameraMode : public UAnimNotifyState
	{
	public:
		ECameraDisplayMode                                         ForcedMode;                                              // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E14E[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendTime;                                               // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_HideSlot
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_HideSlot : public UAnimNotifyState
	{
	public:
		EEquipmentSlot                                             ItemSlot;                                                // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M85W[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StanceOverride;                                          // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_HitActive
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_HitActive : public UAnimNotifyState
	{
	public:
		class FName                                                AttackTag;                                               // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bOnehitFromAllCollision;                                 // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LV1X[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_IgnoreFlinch
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_IgnoreFlinch : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_IgnoreStagger
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_IgnoreStagger : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_LerpToGround
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_LerpToGround : public UAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_X7YC[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_LerpToInteract
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_LerpToInteract : public UAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_M9X1[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_LockSplineRotation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_LockSplineRotation : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_MultiHitFrame
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_MultiHitFrame : public UAnimNotifyState
	{
	public:
		EHitFrameType                                              HitFrameType;                                            // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T1FV[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttack*                                             ActualAttack;                                            // 0x0038(0x0008) BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UseSecondaryDamageData;                                  // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HV6B[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SecondaryDamageDataIndex;                                // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_SetFlying
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SetFlying : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AnimNotifyState_ShowProp
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_ShowProp : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseAppearanceData
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UBaseAppearanceData : public UDataAsset
	{
	public:
		class USkeletalMesh* GetDefaultMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AppearanceData
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UAppearanceData : public UBaseAppearanceData
	{
	public:
		unsigned char                                              DefaultMesh[0x28];                                       // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FemaleMesh[0x28];                                        // 0x0058(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HairAppearanceData
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UHairAppearanceData : public UBaseAppearanceData
	{
	public:
		struct FSkeletalMeshAttachment                             DefaultMesh;                                             // 0x0030(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FSkeletalMeshAttachment>  HairMeshes;                                              // 0x0040(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedItem
	 * Size -> 0x01F0 (FullSize[0x0420] - InheritedSize[0x0230])
	 */
	class ASpawnedItem : public AActor
	{
	public:
		unsigned char                                              UnknownData_UK3S[0x118];                                 // 0x0230(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 PlacedItemData;                                          // 0x0348(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnedItemInteract;                                   // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnedItemDestroyed;                                  // 0x0368(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      OverrideGameHourLifetime;                                // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseOverrideGameHourLifetime : 1;                        // 0x037C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bLifetimeDespawnWhenProxiedOnly : 1;                     // 0x037C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WOGW[0x3];                                   // 0x037D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        GoapRegionTag;                                           // 0x0380(0x0008) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItem*                                               Item;                                                    // 0x0390(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASurvivalCharacter*                                  EquippedOwner;                                           // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              AttackOwner;                                             // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UBaseLODActor>                        DroppedByActor;                                          // 0x03A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VO9S[0xD];                                   // 0x03B0(0x000D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIsThrown : 1;                                           // 0x03BD(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasImpacted : 1;                                        // 0x03BD(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bCanAiInteract : 1;                                      // 0x03BD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CanLODItem : 1;                                          // 0x03BD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bInteractOnTouch : 1;                                    // 0x03BD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESpawnedItemEmbedType                                      EmbedOnHit;                                              // 0x03BE(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O8H8[0x1];                                   // 0x03BF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatRange                                         EmbedRotationOnHit;                                      // 0x03C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumEmbedNormal;                                      // 0x03D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bRotateOnEmbed : 1;                                      // 0x03D4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bThrowStraight : 1;                                      // 0x03D4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsTickingAttack : 1;                                    // 0x03D4(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bThrowAttackCleared : 1;                                 // 0x03D4(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsAttached : 1;                                         // 0x03D4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TS2V[0xB];                                   // 0x03D5(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PreviousVelocity;                                        // 0x03E0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZiplineMaxSpeedMultiplier;                               // 0x03EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           PhysicsImpactAudio;                                      // 0x03F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImpactEffectDelay;                                       // 0x03F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H2NE[0x4];                                   // 0x03FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinImpactThreshold;                                      // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxImpactThreshold;                                      // 0x0404(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinImpactVolume;                                         // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxImpactVolume;                                         // 0x040C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4Z1D[0x8];                                   // 0x0410(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AZiplineLine*                                        AttachedZipline;                                         // 0x0418(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool ValidateItemData(TArray<class FText>* ValidationErrors);
		void TickZipline(float DeltaTime);
		void TickThrown(float DeltaTime);
		void TickBuoyancy(float DeltaTime);
		void TickAttached(float DeltaTime);
		void Throw(class APawn* Thrower, const struct FVector& Impulse, const struct FVector& AngularImpulse);
		void StartThrownAttack(class AActor* Thrower);
		void SetEquippedOwner(class ASurvivalCharacter* NewOwner);
		void ServerUseItem(class AActor* InstigatedBy);
		void ServerUseAndDestroyItem(class AActor* InstigatedBy);
		void ServerPickupItem(class AActor* InstigatedBy);
		void ServerHaulItem(class AActor* InstigatedBy);
		void ServerEquipAndDestroyItem(class AActor* InstigatedBy);
		int32_t RemoveItem(class UItem* InItem, int32_t Count);
		void OnThrown();
		void OnSelectedAmmoChanged(const class FName& SelectedAmmoType);
		void OnRep_IsAttached();
		void OnRep_AttachedZipline();
		void OnPhysicsWake(class UPrimitiveComponent* SleepingComponent, const class FName& BoneName);
		void OnPhysicsSleep(class UPrimitiveComponent* SleepingComponent, const class FName& BoneName);
		void OnLaunchAttack(class UAttack* Attack);
		void OnItemUnequipped(class ASurvivalCharacter* Character, EEquipmentSlot Slot);
		void OnItemEquipped(class ASurvivalCharacter* Character, EEquipmentSlot Slot);
		void OnHitWithAttack(const struct FDamageInfo& DamageInfo);
		void NotifySwapped(bool bFromDamage);
		void NotifySpawned();
		void K2_Initialize();
		bool IsThrownAttackTimerActive();
		bool IsHaulingItem();
		bool IsEmbeddableMaterial(class UPhysicalMaterial* Material);
		void HandleTouch(class AActor* Actor);
		void HandlePhysicsVolumeChanged(class APhysicsVolume* Volume);
		bool GetThrowStraight();
		class USoundCue* GetPickupAudio();
		TArray<class UItem*> GetItems();
		class UItem* GetItem();
		class ASurvivalCharacter* GetEquippedOwner();
		class USoundCue* GetEquipAudio();
		class ASurvivalCharacter* GetDroppedBySpawnedActor();
		class UBaseLODActor* GetDroppedBy();
		float GetDistanceFromThrownLocation();
		class USoundCue* GetConsumeAudio();
		class AActor* GetAttackOwner();
		void DoDetach();
		void DelayedDestroy();
		void ClearThrownAttackTimer();
		bool CanUse(class AActor* InstigatedBy);
		bool CanEquipTo(class AActor* Actor);
		bool CanEquip();
		bool CanAddItems(TArray<class UItem*> InItems);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* InItem);
		TArray<class UGoapAction*> AllocateGOAPActions(class USurvivalGameInstance* GameInstance, class UObject* InOwner);
		void AddItem(class UItem* InItem, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ArmorItem
	 * Size -> 0x0020 (FullSize[0x0440] - InheritedSize[0x0420])
	 */
	class AArmorItem : public ASpawnedItem
	{
	public:
		class UBaseAppearanceData*                                 HeadAppearance;                                          // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBaseAppearanceData*                                 ChestAppearance;                                         // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBaseAppearanceData*                                 ArmsAppearance;                                          // 0x0430(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBaseAppearanceData*                                 LegsAppearance;                                          // 0x0438(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttachmentPoint
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class AAttachmentPoint : public AActor
	{
	public:
		bool                                                       bIsInUse;                                                // 0x0230(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NYV5[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UArrowComponent*                                     Arrow;                                                   // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetInUse(bool Value);
		bool GetInUse();
		class UArrowComponent* GetArrow();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Attack
	 * Size -> 0x0168 (FullSize[0x0190] - InheritedSize[0x0028])
	 */
	class UAttack : public UObject
	{
	public:
		unsigned char                                              UnknownData_W3JQ[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAttackDataPreloadAssets                            InCombatPreloader;                                       // 0x0068(0x0060) Transient, NativeAccessSpecifierPrivate
		struct FAttackDataPreloadAssets                            AttackActivePreloader;                                   // 0x00C8(0x0060) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UVXB[0x68];                                  // 0x0128(0x0068) MISSED OFFSET (PADDING)

	public:
		void SpawnProjectile(const struct FTransform& SpawnTransform);
		bool ShouldLockRotation();
		bool ShouldEndOnHit();
		void ResolveAttackForHitResult(const struct FHitResult& HitResult);
		EAttackResolutionType ResolveAttack(bool UseSecondaryDamageData, int32_t SecondaryDamageDataIndex);
		bool RequiresFacing();
		bool IsSummonAttack();
		bool IsSelfDestruct();
		bool IsSelfAttack();
		bool IsRangedAttack();
		bool IsLoopingAttack();
		bool IsHostile();
		bool IsHazardAttack();
		bool IsCharged();
		bool IsAOE();
		bool HasToSummonBossMobPhase();
		class UAnimMontage* GetWeaponAnimMontage();
		int32_t GetTier();
		int32_t GetStaminaCost();
		float GetSoundRange();
		float GetSoundIntensity();
		float GetPreferredMaxDistance();
		float GetPreferredHeight();
		float GetPreferredDistancePostLunge();
		class AActor* GetOwner();
		class UAnimMontage* GetOverrideDeflectAnim();
		float GetMinDistance();
		float GetMaxDuration();
		float GetMaxDistance();
		class UItem* GetItemOwner();
		class AActor* GetInstigator();
		EAttackHitType GetHitResolutionType();
		struct FDataTableRowHandle GetDeathNotification();
		unsigned char GetDamageTypeFlags();
		class UClass* GetDamageType();
		float GetChargeTimer();
		float GetChargeRatio();
		int32_t GetChargedStaminaCost();
		float GetAttackRange();
		class UAnimMontage* GetAnimMontage();
		bool FireAttackOnFullCharge();
		bool CanCharge();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttackCombo
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAttackCombo : public UObject
	{
	public:
		TArray<class UAttack*>                                     Attacks;                                                 // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SBT7[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttackAnimEffect
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAttackAnimEffect : public UAnimEffect
	{
	public:
		EHitMotionType                                             AttackMotionType;                                        // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasHitStops;                                            // 0x0039(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasReload;                                              // 0x003A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FANL[0x1];                                   // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        AttackSpeedTag;                                          // 0x003C(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3IDJ[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FGameplayTag GetAttackSpeedTag();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttackCapsuleComponent
	 * Size -> 0x0054 (FullSize[0x04F0] - InheritedSize[0x049C])
	 */
	class UAttackCapsuleComponent : public UCapsuleComponent
	{
	public:
		float                                                      ForceValue;                                              // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PullAcceptableDistance;                                  // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AttackAttachSocket;                                      // 0x04A4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G72Y[0x24];                                  // 0x04AC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAttackCapsuleComponent*>                     AttacksCapsuleComponents;                                // 0x04D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W5VP[0x10];                                  // 0x04E0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttackHandlerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UAttackHandlerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnHandleAttackEffects;                                   // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void MulticastHandleEnvironmentHit(const struct FDataTableRowHandle& AttackDataRowHandle, const struct FHitResult& HitResult);
		void MulticastHandleAttackEffects(const struct FDataTableRowHandle& AttackDataRowHandle, const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttractionComponent
	 * Size -> 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
	 */
	class UAttractionComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_0OJ0[0x8];                                   // 0x0228(0x0008) Fix Super Size
		TArray<class UGoapAction*>                                 AdvertisedActions;                                       // 0x0230(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UEI4[0x4];                                   // 0x0240(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AreaRadius;                                              // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotCount;                                               // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RestrictedToColony;                                      // 0x024C(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6VYC[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              RestrictedToClass[0x28];                                 // 0x0258(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              bProjectToGround : 1;                                    // 0x0280(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bForceNoTrack : 1;                                       // 0x0280(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EGeneratedLocationType                                     GeneratedLocationType;                                   // 0x0281(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X9IO[0xE];                                   // 0x0282(0x000E) MISSED OFFSET (PADDING)

	public:
		struct FColonyIdentifier GetRestrictedToColonyId();
		class UClass* GetLODComponentClass();
		TArray<class UGoapAction*> GetAdvertisedActions();
		bool CanColonyUse(const struct FColonyIdentifier& ColonyIdentifier);
		bool CanCharacterUse(class UCharacterLODActor* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyComponent
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UProxyComponent : public UObject
	{
	public:
		struct FProxyComponentTickFunction                         PrimaryComponentTick;                                    // 0x0028(0x0030) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XFJ0[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxySceneComponent
	 * Size -> 0x0038 (FullSize[0x00A0] - InheritedSize[0x0068])
	 */
	class UProxySceneComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_93N4[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          RelativeTransform;                                       // 0x0070(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyAttractionComponent
	 * Size -> 0x0050 (FullSize[0x00F0] - InheritedSize[0x00A0])
	 */
	class UProxyAttractionComponent : public UProxySceneComponent
	{
	public:
		TArray<class UGoapAction*>                                 AdvertisedActions;                                       // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UAttractionLODComponent*                             OwnerAttractionLODComponent;                             // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8WRU[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              RestrictedToClass[0x28];                                 // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		bool CanColonyUse(const struct FColonyIdentifier& ColonyIdentifier);
		bool CanCharacterUse(class UCharacterLODActor* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseLODComponent
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UBaseLODComponent : public UObject
	{
	public:
		class UBaseLODActor*                                       OwnerActor;                                              // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorComponent*                                     FullComponent;                                           // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProxyComponent*                                     ProxyComponent;                                          // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SceneLODComponent
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USceneLODComponent : public UBaseLODComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttractionLODComponent
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UAttractionLODComponent : public USceneLODComponent
	{
	public:
		class UProxyAttractionComponent*                           ProxyAttractionComponent;                                // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAttractionComponent*                                FullAttractionComponent;                                 // 0x0048(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		int32_t GetSlotCount();
		bool GetProjectToGround();
		EGeneratedLocationType GetGeneratedLocationType();
		TArray<class UGoapAction*> GetAdvertisedActions();
		bool CanColonyUse(const struct FColonyIdentifier& ColonyIdentifier);
		bool CanCharacterUse(class UCharacterLODActor* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AttractionManagerComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UAttractionManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_OTG7[0x50];                                  // 0x00B0(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AuraEmitterComponent
	 * Size -> 0x0008 (FullSize[0x04A0] - InheritedSize[0x0498])
	 */
	class UAuraEmitterComponent : public USphereComponent
	{
	public:
		struct FGameplayTag                                        AuraTag;                                                 // 0x0498(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.AuraReceiverComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UAuraReceiverComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_UY3A[0x20];                                  // 0x00B0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        AuraTag;                                                 // 0x00D0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint16_t                                                   ReplicatedEmitterCount;                                  // 0x00D8(0x0002) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoClear;                                              // 0x00DA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TI4B[0x5];                                   // 0x00DB(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BanterStarterComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UBanterStarterComponent : public UActorComponent
	{
	public:
		struct FConversationReference                              BanterConversation;                                      // 0x00B0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BanterStartNode;                                         // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSubscribeAutomatically;                                 // 0x00CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OBLP[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (PADDING)

	public:
		void StartBanter(class ASurvivalPlayerController* Instigator);
		void OnLookTriggered(class ULookTriggerComponent* Sender, const struct FLookTriggeredParams& Params);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseCreditsTextWidget
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class UBaseCreditsTextWidget : public UUserWidget
	{
	public:
		class UTextBlock*                                          LineText;                                                // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseGoapRegionComponent
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class UBaseGoapRegionComponent : public USceneComponent
	{
	public:
		struct FGameplayTag                                        RegionTag;                                               // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyActor
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UProxyActor : public UObject
	{
	public:
		unsigned char                                              UnknownData_YI5D[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBaseLODActor*                                       LODActor;                                                // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2K3V[0xB8];                                  // 0x0040(0x00B8) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseLODActor
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class UBaseLODActor : public UObject
	{
	public:
		unsigned char                                              UnknownData_FPD0[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastFullActorSpawnTime;                                  // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KAJ9[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AProxyStandInActor*                                  StandInActor;                                            // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              FullActor;                                               // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProxyActor*                                         ProxyActor;                                              // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UBaseLODComponent*>                           LODComponents;                                           // 0x0088(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class AActor*                                              ActorCDO;                                                // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OYSE[0x70];                                  // 0x00A0(0x0070) MISSED OFFSET (PADDING)

	public:
		void SetLifeSpan(float InLifespan);
		void OnFullActorPostInitializeComponents(class AActor* Sender);
		class AActor* K2_GetFullActor();
		void HandleLifetimeExpired();
		void HandleFullActorDestroyed(class AActor* Actor);
		float GetLifeSpan();
		class UBaseLODComponent* GetComponentByClass(class UClass* InClass);
		struct FTransform GetActorTransform();
		struct FQuat GetActorRotation();
		struct FVector GetActorLocation();
		class UClass* GetActorClass();
		bool ContainsActorTag(const class FName& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseManagerComponent
	 * Size -> 0x3B7F8 (FullSize[0x3B8A8] - InheritedSize[0x00B0])
	 */
	class UBaseManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnWaveReinstance;                                        // 0x00B0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7TKC[0x28];                                  // 0x00C0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDistForBase;                                          // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K5TZ[0x3B7BC];                               // 0x00EC(0x3B7BC) MISSED OFFSET (PADDING)

	public:
		bool IsWithinRangeOfBase(const struct FVector& Location, float Distance);
		bool IsAnyTargetWithinRangeOfBase(TArray<class AActor*> Targets, float Distance);
		bool HasBase();
		int32_t GetTotalHeat();
		struct FVector GetRandomBaseLocation();
		int32_t GetLargestBaseIndexWithinRangeOfTarget(TArray<class AActor*> Targets, float Distance);
		int32_t GetClosestBaseIndexToTargets(TArray<class AActor*> Targets);
		int32_t GetClosestBaseIndex(const struct FVector& Location);
		float GetBaseRadius(int32_t BaseIndex);
		struct FVector GetBaseLocation(int32_t BaseIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseMapEntryWidget
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class UBaseMapEntryWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_BYY3[0x28];                                  // 0x0278(0x0028) MISSED OFFSET (PADDING)

	public:
		void RefreshVisuals();
		bool HasWorldPosition();
		struct FVector2D GetWorldPosition2D();
		EMapEntryType GetMapEntryType();
		class FString GetEntryName();
		struct FSlateBrush GetDescriptionWindowIcon();
		bool CanToggleVisibility();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseObjective
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBaseObjective : public UObject
	{
	public:
		bool IsCompleted();
		bool IsActive();
		class FString GetDisplayName();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseQuest
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBaseQuest : public UObject
	{
	public:
		bool IsCompleted();
		TArray<class UBaseObjective*> GetObjectives();
		class FString GetDisplayName();
		class FString GetDisplayDescription();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseSettingsWidget
	 * Size -> 0x0078 (FullSize[0x02F0] - InheritedSize[0x0278])
	 */
	class UBaseSettingsWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_PZDL[0x48];                                  // 0x0278(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULocalizedTextBlock*                                 TitleTextBlock;                                          // 0x02C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          DisplayString;                                           // 0x02C8(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          DescString;                                              // 0x02D8(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowKeybindingControls;                                 // 0x02E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bApplyImmediately;                                       // 0x02E9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCacheAndConfirm;                                        // 0x02EA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlatformToggleSetting                                     PlatformSetting;                                         // 0x02EB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IAZY[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetLocalizedInfo(const struct FLocString& InDisplayString, const struct FLocString& InDescString);
		void SetCacheAndConfirm(bool bState);
		void SetApplyImmediately(bool bState);
		void NotifyHovered();
		void NotifyFocused();
		bool IsCacheAndConfirmSetting();
		bool GetShowKeybindingControls();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseSlotWidget
	 * Size -> 0x0060 (FullSize[0x02D8] - InheritedSize[0x0278])
	 */
	class UBaseSlotWidget : public UGameUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnContextAction;                                         // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		struct FHotBarQuickSlotItemTypeKey                         HotBarQuickSlotItemTypeKey;                              // 0x0288(0x0020) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 DataRowHandle;                                           // 0x02A8(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bSelected;                                               // 0x02B8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_31CT[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UButton*                                             ItemButton;                                              // 0x02C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMenuAnchor*                                         TooltipAnchor;                                           // 0x02C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ONV6[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnItemRefChanged(class UItem* Item);
		void OnIsItemNew(bool bIsNewItem);
		bool GetIsSelected();
		void EvaluateSlotOnChange();
		void EvaluateItemIsNewVisuals();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BestiaryComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UBestiaryComponent : public UActorComponent
	{
	public:
		TArray<struct FBestiaryStat>                               BestiaryStats;                                           // 0x00B0(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9R96[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerStatChanged(class UPlayerStatConfig* PlayerStat, int32_t Value);
		bool IsTierUnlocked(const struct FDataTableRowHandle& BestiaryRowHandle, int32_t UnlockTier);
		int32_t GetStatValueForUnlockTier(const struct FDataTableRowHandle& BestiaryRowHandle, int32_t UnlockTier);
		int32_t GetStatValue(class UPlayerStatConfig* Stat);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WindowWidget
	 * Size -> 0x0030 (FullSize[0x02A8] - InheritedSize[0x0278])
	 */
	class UWindowWidget : public UGameUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnWindowClosed;                                          // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bLimitsFramerate;                                        // 0x0288(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHidesHUD;                                               // 0x0289(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bShowsCursor;                                            // 0x028A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EWindowPauseBehavior                                       PauseBehavior;                                           // 0x028B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsPopUpWindow;                                          // 0x028C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsFullscreenWindow;                                     // 0x028D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bGarbageCollectOnClose;                                  // 0x028E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCacheOnClose;                                           // 0x028F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bForceThirdPerson;                                       // 0x0290(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bShowPlayerIsBusy;                                       // 0x0291(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRefreshOnOwnerInventoryChange;                          // 0x0292(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bResetOnOwnerInventoryChange;                            // 0x0293(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EWindowInputMode                                           InputMode;                                               // 0x0294(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SBX3[0x13];                                  // 0x0295(0x0013) MISSED OFFSET (PADDING)

	public:
		void SetFramerateLimitOnWidgetStackChanged();
		void SetDefaultUserFocus();
		void ResetWidget();
		void RefreshWidget();
		void HandleWindowClosed();
		class UWidget* GetDefaultUserFocus();
		void CloseWindow();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BindKeyPopUp
	 * Size -> 0x0070 (FullSize[0x0318] - InheritedSize[0x02A8])
	 */
	class UBindKeyPopUp : public UWindowWidget
	{
	public:
		struct FLocString                                          KeyboardInstructionsText;                                // 0x02A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLocString                                          GamepadInstructionsText;                                 // 0x02B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CancelActionName;                                        // 0x02C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAnyControlMapping                                  CurrentMapping;                                          // 0x02D0(0x0030) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bIsGamepad;                                              // 0x0300(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JRZF[0x7];                                   // 0x0301(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnControlBound;                                          // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SelectControl(const struct FInputChord& Chord);
		void InitControlMapping(const struct FAnyControlMapping& Control, bool bInIsGamepad);
		bool GetIsMapped();
		class FText GetInstructionsText();
		struct FAnyControlMappingKey GetCurrentMappingKey();
		struct FInputChord GetCurrentInputChord();
		void ControlBound__DelegateSignature(const struct FAnyControlMapping& NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Bird
	 * Size -> 0x0090 (FullSize[0x02C0] - InheritedSize[0x0230])
	 */
	class ABird : public AActor
	{
	public:
		unsigned char                                              UnknownData_BS3M[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatRange                                         LandedTime;                                              // 0x0240(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatRange                                         TimeBetweenSpawns;                                       // 0x0250(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatRange                                         ActiveHours;                                             // 0x0260(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              SpawnProgressValues;                                     // 0x0270(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      FlySpeed;                                                // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LandingDistance;                                         // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TakeOffDistance;                                         // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBirdState                                                 CurrentState;                                            // 0x028C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F02W[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ABirdLandSpot*                                       CurrentLandSpot;                                         // 0x0290(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGuid                                               CurrentLandSpotGuid;                                     // 0x0298(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x02A8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x02B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x02B8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalProgress;                                           // 0x02BC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_CurrentState();
		void HandleSpawn();
		void HandleDespawn();
		EBirdState GetState();
		class ABirdLandSpot* GetCurrentLandSpot();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BirdAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UBirdAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_RZOL[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_KQT7[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BirdLandSpot
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class ABirdLandSpot : public AActor
	{
	public:
		TArray<struct FBirdSplineItemSpawn>                        ArrivingItemSpawns;                                      // 0x0230(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FBirdSplineItemSpawn>                        DepartingItemSpawns;                                     // 0x0240(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0250(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBirdSpotType                                              SpotType;                                                // 0x0258(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VIA5[0x7];                                   // 0x0259(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineComponent*                                    EnterSpline;                                             // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    ExitSpline;                                              // 0x0268(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		EBirdSpotType GetSpotType();
		class USplineComponent* GetExitSpline();
		class USplineComponent* GetEnterSpline();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BlackboardKeyType_FoliageKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UBlackboardKeyType_FoliageKey : public UBlackboardKeyType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BlockComponent
	 * Size -> 0x00F8 (FullSize[0x01A8] - InheritedSize[0x00B0])
	 */
	class UBlockComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_GRT3[0x30];                                  // 0x00B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIsBlocking : 1;                                         // 0x00E0(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              bWantsToBlock : 1;                                       // 0x00E0(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RE1R[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        DefaultBlockAnim;                                        // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FB5Y[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlockAngle;                                              // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DefaultBlockDamageMultiplier;                            // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PerfectBlockDamageMultiplier;                            // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PerfectBlockWindow;                                      // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PerfectBlockStunRefundPercentage;                        // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M7AZ[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 PerfectBlockAttackData;                                  // 0x0110(0x0010) Edit, NoDestructor, NativeAccessSpecifierPrivate
		class UAttack*                                             PerfectBlockAttack;                                      // 0x0120(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_83FE[0x8];                                   // 0x0128(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          DefaultBlockSound;                                       // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundBase*                                          DefaultPerfectBlockSound;                                // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundBase*                                          LowDurabilityBlockSound;                                 // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LowDurabilityThreshold;                                  // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7DTJ[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVisualEffect*                                       BlockEffect;                                             // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UVisualEffect*                                       PerfectBlockEffect;                                      // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UVisualEffect*                                       OffhandBlockEffect;                                      // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UVisualEffect*                                       OffhandPerfectBlockEffect;                               // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5KB4[0x38];                                  // 0x0170(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnStatusEffectsChanged();
		void OnRep_IsBlocking();
		void MulticastPlayBlockEffects(EBlockType BlockType);
		bool IsBlocking();
		float GetMaxBlockMeter();
		float GetBlockMeter();
		class UItem* GetBlockItem();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BossComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UBossComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_9MXR[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPhaseChanged;                                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllMobsEncountersKilled;                               // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FBossPhase>                                  Phases;                                                  // 0x00D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q8SG[0x40];                                  // 0x00E8(0x0040) MISSED OFFSET (PADDING)

	public:
		void SpawnMobsEncountersPhase();
		void SetBossManager(class ABossManager* NewBossManager);
		void OnHealthChanged(class UHealthComponent* SourceHealthComponent, float NewHealth, float OldHealth);
		void AllMobsEncounterKilled();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BossManager
	 * Size -> 0x0108 (FullSize[0x0338] - InheritedSize[0x0230])
	 */
	class ABossManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_EAFH[0x20];                                  // 0x0230(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBossActivated;                                         // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBossDeactivated;                                       // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBossComplete;                                          // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H3MX[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AEncounter*                                          Encounter;                                               // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AVolume*                                             Volume;                                                  // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 KeyItem;                                                 // 0x0298(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class ATargetPoint*                                        ItemSpawnPoint;                                          // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     BossMusicTrack;                                          // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          InteractText;                                            // 0x02B8(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FBossActorSpawn>                             BossEventActors;                                         // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		TArray<struct FPhaseEncounter>                             BossPhaseEncounters;                                     // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		bool                                                       bSpawnBossPhaseEncountersDirectly;                       // 0x02E8(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bKillMobsEncounterOnBossClear;                           // 0x02E9(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKU4[0x36];                                  // 0x02EA(0x0036) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBossActive;                                             // 0x0320(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RE2C[0x3];                                   // 0x0321(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxKillCount;                                            // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ENZB[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBossComponent*                                      BossComponent;                                           // 0x0330(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnPhaseEncounter(int32_t PhaseIndex);
		void SpawnActor(class UClass* Class, const struct FTransform& Transform);
		void OnVolumeEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnVolumeBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnRep_BossActive();
		void OnPhotoModePreEntered(class APlayerController* Controller);
		void OnPhotoModeExited();
		void OnPhaseChangeBP(int32_t NewPhase);
		void OnPhaseChange(int32_t NewPhase);
		void OnEncounterSpawnKilled(class AActor* ActorDamageSource);
		void OnEncounterComplete(class AActor* DamageSource);
		void OnDeactivated();
		void OnActivated();
		bool IsPlayerInside(class ASurvivalPlayerCharacter* PlayerCharacter);
		bool IsActive();
		int32_t GetEncounterMobs();
		void DeactivateBossEncounter();
		void ActivateBossEncounter();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameButtonWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UGameButtonWidget : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BottomButtonWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UBottomButtonWidget : public UGameButtonWidget
	{
	public:
		void SetIsValid(bool bEnabled);
		void OnSetIsValid(bool bEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BreadcrumbManagerComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UBreadcrumbManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JGKN[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UGoapAction*>                                 BreadcrumbsFlat;                                         // 0x00B8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1VRB[0x28];                                  // 0x00C8(0x0028) MISSED OFFSET (PADDING)

	public:
		float GetCurrentTimestamp();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BreathePointComponent
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class UBreathePointComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_08F7[0x8];                                   // 0x0228(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_AttackRequiresFacing
	 * Size -> 0x0028 (FullSize[0x0090] - InheritedSize[0x0068])
	 */
	class UBTDecorator_AttackRequiresFacing : public UBTDecorator
	{
	public:
		struct FBlackboardKeySelector                              AttackKey;                                               // 0x0068(0x0028) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_CanFly
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_CanFly : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_InAttackRange
	 * Size -> 0x0030 (FullSize[0x00C0] - InheritedSize[0x0090])
	 */
	class UBTDecorator_InAttackRange : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      AcceptableRadius;                                        // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RGE2[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              AttackKey;                                               // 0x0098(0x0028) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsActivePet
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsActivePet : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsBaited
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsBaited : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsClimbable
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_IsClimbable : public UBTDecorator_BlackboardBase
	{
	public:
		struct FGameplayTag                                        Role;                                                    // 0x0090(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsClimbingFoliage
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsClimbingFoliage : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsMovementMode
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsMovementMode : public UBTDecorator
	{
	public:
		EMovementMode                                              MovementMode;                                            // 0x0068(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CustomMovementMode;                                      // 0x0069(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PD6D[0x6];                                   // 0x006A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsPetHappiness
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsPetHappiness : public UBTDecorator
	{
	public:
		int32_t                                                    MinStep;                                                 // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxStep;                                                 // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsSoundDetectState
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsSoundDetectState : public UBTDecorator
	{
	public:
		ESoundDetectionState                                       SoundDetectionState;                                     // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0HR5[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsStaticObstacle
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class UBTDecorator_IsStaticObstacle : public UBTDecorator_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsStationary
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsStationary : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsSwimmingCharacter
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsSwimmingCharacter : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsTameState
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsTameState : public UBTDecorator
	{
	public:
		ETamedState                                                State;                                                   // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F7QB[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_IsVitalValue
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsVitalValue : public UBTDecorator
	{
	public:
		struct FGameplayTag                                        Semantic;                                                // 0x0068(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetValue;                                             // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V7NK[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_Random
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_Random : public UBTDecorator
	{
	public:
		float                                                      Probability;                                             // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9EEX[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_ShouldCombatStrafe
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_ShouldCombatStrafe : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_ShouldPlayFidget
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_ShouldPlayFidget : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_UsesPathFollower
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_UsesPathFollower : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_UsesSwimSteeringBehavior
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_UsesSwimSteeringBehavior : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTDecorator_WaitOnWander
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_WaitOnWander : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTService_GameplayFocus
	 * Size -> 0x0000 (FullSize[0x00A0] - InheritedSize[0x00A0])
	 */
	class UBTService_GameplayFocus : public UBTService_DefaultFocus
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTService_PerceptionMultiplier
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTService_PerceptionMultiplier : public UBTService
	{
	public:
		float                                                      PerceptionRangeMultiplier;                               // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7NMO[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTService_UpdateCombatState
	 * Size -> 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
	 */
	class UBTService_UpdateCombatState : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              CombatStateKey;                                          // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetActorKey;                                          // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              DesiredAttackKey;                                        // 0x00C0(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_ActivePetWait
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UBTTask_ActivePetWait : public UBTTask_Wait
	{
	public:
		float                                                      MasterDistanceTolerance;                                 // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2X1C[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_AdvanceWave
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_AdvanceWave : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_Attack
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_Attack : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              AttackKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_Burrow
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_Burrow : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_ClearNewPetState
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_ClearNewPetState : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_ClimbSpline
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_ClimbSpline : public UBTTaskNode
	{
	public:
		EMovementSpeed                                             MovementSpeed;                                           // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8SUS[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Direction;                                               // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_MaineMoveTo
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UBTTask_MaineMoveTo : public UBTTask_MoveTo
	{
	public:
		EMovementSpeed                                             MovementSpeed;                                           // 0x00B0(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9XS0[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxMoveDuration;                                         // 0x00B4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RandomDeviation;                                         // 0x00B8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintAfterDistance;                                     // 0x00BC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowBreadcrumbs;                                       // 0x00C0(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAbortOnInterestChanged;                                 // 0x00C1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4ZLC[0x6];                                   // 0x00C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              AdditionalRadiusBlackboardKey;                           // 0x00C8(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_CombatMoveTo
	 * Size -> 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
	 */
	class UBTTask_CombatMoveTo : public UBTTask_MaineMoveTo
	{
	public:
		float                                                      ReevaluateTime;                                          // 0x00F0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FacingAngleTolerance;                                    // 0x00F4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_Disabled
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_Disabled : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_Emerge
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_Emerge : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_FindTransitionLocation
	 * Size -> 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
	 */
	class UBTTask_FindTransitionLocation : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              SourceLocationKey;                                       // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		struct FBlackboardKeySelector                              TargetLocationKey;                                       // 0x0098(0x0028) Edit, NativeAccessSpecifierPrivate
		float                                                      HeightAboveGround;                                       // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OI4L[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_GetFoliageKeyLocation
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class UBTTask_GetFoliageKeyLocation : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              FoliageBlackboardKey;                                    // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              LocationBlackboardKey;                                   // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_MaineRunEQSQuery
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UBTTask_MaineRunEQSQuery : public UBTTask_BlackboardBase
	{
	public:
		class UEQSRequest*                                         EQSRequest;                                              // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5UE9[0x10];                                  // 0x00A0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_MarkInterestUnreachable
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_MarkInterestUnreachable : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_NoOp
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_NoOp : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_PlayEmote
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_PlayEmote : public UBTTaskNode
	{
	public:
		struct FGameplayTag                                        OverrideEmoteType;                                       // 0x0070(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_PlayFidget
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UBTTask_PlayFidget : public UBTTask_PlayEmote
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_Rest
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UBTTask_Rest : public UBTTask_Wait
	{
	public:
		float                                                      LerpLocationTime;                                        // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LerpRotationTime;                                        // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_RotateToAlignBBEntry
	 * Size -> 0x0000 (FullSize[0x00A0] - InheritedSize[0x00A0])
	 */
	class UBTTask_RotateToAlignBBEntry : public UBTTask_RotateToFaceBBEntry
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_RunPreActionCombatAnim
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_RunPreActionCombatAnim : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              AnimKey;                                                 // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SelectCombatAction
	 * Size -> 0x00C8 (FullSize[0x0138] - InheritedSize[0x0070])
	 */
	class UBTTask_SelectCombatAction : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetActorKey;                                          // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              DesiredAttackKey;                                        // 0x0098(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              MoveToType;                                              // 0x00C0(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              FaceTargetType;                                          // 0x00E8(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              AnimKey;                                                 // 0x0110(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetAttachmentPoint
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_SetAttachmentPoint : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetDestinationKey;                                    // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetBlackboardFloat
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTTask_SetBlackboardFloat : public UBTTask_BlackboardBase
	{
	public:
		float                                                      Value;                                                   // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9P9R[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetInvestigateLocation
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_SetInvestigateLocation : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetDestinationKey;                                    // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetRandomDestination
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class UBTTask_SetRandomDestination : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetDestinationKey;                                    // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic
		ERandomDestinationType                                     DestinationType;                                         // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IJPL[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetSoundDetectState
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_SetSoundDetectState : public UBTTaskNode
	{
	public:
		ESoundDetectionState                                       NewSoundDetectionState;                                  // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4MYT[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetTargetActor
	 * Size -> 0x0050 (FullSize[0x00E8] - InheritedSize[0x0098])
	 */
	class UBTTask_SetTargetActor : public UBTTask_BlackboardBase
	{
	public:
		struct FBlackboardKeySelector                              MoveToType;                                              // 0x0098(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              FaceTargetType;                                          // 0x00C0(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetTargetInteractable
	 * Size -> 0x0118 (FullSize[0x0188] - InheritedSize[0x0070])
	 */
	class UBTTask_SetTargetInteractable : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetActor;                                             // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetComponent;                                         // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetLocation;                                          // 0x00C0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetRotation;                                          // 0x00E8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              MoveToType;                                              // 0x0110(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              FaceTargetType;                                          // 0x0138(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              MustLand;                                                // 0x0160(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetTargetToPetMaster
	 * Size -> 0x0050 (FullSize[0x00E8] - InheritedSize[0x0098])
	 */
	class UBTTask_SetTargetToPetMaster : public UBTTask_BlackboardBase
	{
	public:
		struct FBlackboardKeySelector                              MoveToType;                                              // 0x0098(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              FaceTargetType;                                          // 0x00C0(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SetWaveDestination
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_SetWaveDestination : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetDestinationKey;                                    // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_StartClimbing
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTTask_StartClimbing : public UBTTask_BlackboardBase
	{
	public:
		struct FGameplayTag                                        Role;                                                    // 0x0098(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SteeringTargeted
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class UBTTask_SteeringTargeted : public UBTTaskNode
	{
	public:
		unsigned char                                              UnknownData_3DE3[0x18];                                  // 0x0070(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_SteeringWander
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_SteeringWander : public UBTTaskNode
	{
	public:
		unsigned char                                              UnknownData_HBEV[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_StopClimbing
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_StopClimbing : public UBTTaskNode
	{
	public:
		EDetachSplineReason                                        DetachReason;                                            // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PJ13[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_StopPhysMovement
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class UBTTask_StopPhysMovement : public UBTTaskNode
	{
	public:
		unsigned char                                              UnknownData_JGD6[0x18];                                  // 0x0070(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_ToggleFlying
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_ToggleFlying : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_ToggleResting
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_ToggleResting : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_UseInteractable
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_UseInteractable : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetInteractableKey;                                   // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_UseWaypoint
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UBTTask_UseWaypoint : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BTTask_WanderToTarget
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class UBTTask_WanderToTarget : public UBTTaskNode
	{
	public:
		unsigned char                                              UnknownData_JLD0[0x18];                                  // 0x0070(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Building
	 * Size -> 0x03F0 (FullSize[0x0620] - InheritedSize[0x0230])
	 */
	class ABuilding : public AActor
	{
	public:
		unsigned char                                              UnknownData_HQO1[0x68];                                  // 0x0230(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 BuildingData;                                            // 0x0298(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KBEH[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBuildingShape*                                      Shape;                                                   // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ActualWorldRotation;                                     // 0x02B8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z28Y[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBuildingRelocated;                                     // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FMaterialToIngredientMapping>                MaterialToIngredientMappings;                            // 0x02D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		EBuildingTerrainConformMode                                TerrainConform;                                          // 0x02E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAutoPlacementLocations : 1;                             // 0x02E1(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_18EM[0x6];                                   // 0x02E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     ManualPlacementLocations;                                // 0x02E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     PlacementSocketLocations;                                // 0x02F8(0x0010) Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FVector                                             PlacementSocketCenterOffset;                             // 0x0308(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RequiredPointsOfContact;                                 // 0x0314(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSlope;                                                // 0x0318(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P4QM[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAllowableBuildingPenetration>               GeneralPenetrationAllowance;                             // 0x0320(0x0010) Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
		TArray<struct FAllowableBuildingPenetration>               EnvironmentPenetrationAllowance;                         // 0x0330(0x0010) Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
		TArray<EPhysicalSurface>                                   OverrideValidSurfaces;                                   // 0x0340(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              bIsRelocatable : 1;                                      // 0x0350(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanCancel : 1;                                          // 0x0350(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanDemolish : 1;                                        // 0x0350(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WI91[0xF];                                   // 0x0351(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceMinorActorType;                                    // 0x0360(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPowerSource;                                          // 0x0361(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPowerReceiver;                                        // 0x0362(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPowerSwitch;                                          // 0x0363(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PowerValue;                                              // 0x0364(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSwitchActive;                                         // 0x0368(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0GX1[0x3];                                   // 0x0369(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NetworkPower;                                            // 0x036C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBuildingState                                             BuildingState;                                           // 0x0370(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z20M[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBuildingReplicatedData                             ReplicatedData;                                          // 0x0378(0x0048) Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K0QZ[0x44];                                  // 0x03C0(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBuildingGridLocation                               RegisteredGridLocation;                                  // 0x0404(0x0028) Transient, NoDestructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3DQU[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBuildingPowerId                                    RegisteredBuildingPowerId;                               // 0x0430(0x0008) Net, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnBuildingStateChangedDelegate;                          // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPendingBuildingMovedDelegate;                          // 0x0448(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnLitWithFireStateChangedDelegate;                       // 0x0458(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         RecipeItems;                                             // 0x0468(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FMZT[0x18];                                  // 0x0478(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMeshComponent*>                              MeshList;                                                // 0x0490(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5VVT[0x50];                                  // 0x04A0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x04F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVisualEffect*                                       DeconstructionVFX;                                       // 0x04F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHUDMarkerType                                             BuiltHUDMakerType;                                       // 0x0500(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PCLY[0x3];                                   // 0x0501(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    HUDMarkerVariant;                                        // 0x0504(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HUDMarkerColorVariant;                                   // 0x0508(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ShowDistanceOnHudMarker : 1;                             // 0x050C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractionType                                           UseInteractionType;                                      // 0x050D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBuildingFireType                                          FireType;                                                // 0x050E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z5PP[0x9];                                   // 0x050F(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              IsLitWithFire : 1;                                       // 0x0518(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bProvidesSupport : 1;                                    // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsFoundation : 1;                                       // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LTCV : 2;                                    // 0x0518(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bBaseBuilding : 1;                                       // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bThreatBuilding : 1;                                     // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bCanBeInstanced : 1;                                     // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8ZUF : 1;                                    // 0x0519(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bWiggleOnDamage : 1;                                     // 0x0519(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bDropToInventory : 1;                                    // 0x0519(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bDropIngredientsWhenDestroyed : 1;                       // 0x0519(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bSightStimulus : 1;                                      // 0x0519(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAlwaysSightStimulus : 1;                                // 0x0519(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JHA3[0xE];                                   // 0x051A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SourceCreatureName;                                      // 0x0528(0x0010) Net, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UFFI[0x4];                                   // 0x0538(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DropIngredientsPercentage;                               // 0x053C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               BuildingTags;                                            // 0x0540(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        StructureWeightClass;                                    // 0x0560(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        StructureSturdinessClass;                                // 0x0568(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeightMultiplier;                                        // 0x0570(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0WMX[0x4];                                   // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              NavAreaClass;                                            // 0x0578(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBuildingGridSurfaceType                                   AnchoredSurface;                                         // 0x0580(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RVB9[0x7];                                   // 0x0581(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponent*                                    HealthComponent;                                         // 0x0588(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTeamComponent*                                      TeamComponent;                                           // 0x0590(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralAnimationComponent*                       ProceduralAnimationComponent;                            // 0x0598(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNavModifierComponent*                               NavModifierComponent;                                    // 0x05A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x05A8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x05B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOCLComponent*                                       BuildingPowerOCLComponent;                               // 0x05B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIPerceptionStimuliSourceComponent*                 PerceptionSourceComponent;                               // 0x05C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                FacingHelperComponent;                                   // 0x05C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialSwapComponent*                              MaterialSwapComponent;                                   // 0x05D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCustomPropertyComponent*                            CustomPropertyComponent;                                 // 0x05D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IFGW[0x8];                                   // 0x05E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    DissolveMaterials;                                       // 0x05E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FBuildingGridBuildingId                             AttachedGridBuilding;                                    // 0x05F8(0x0010) Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0MRZ[0x18];                                  // 0x0608(0x0018) MISSED OFFSET (PADDING)

	public:
		bool UsesCrenellation();
		void Use(EInteractionChannel Channel, class AActor* InstigatedBy);
		void UpdateCollisionStateChange();
		void UpdateAllMaterials();
		void UnsetPlacedThisFrame();
		struct FBuildingGridKey TransformSlot(class UBuildingGridComponent* Grid, const struct FBuildingGridKey& Slot);
		void TickDebugDraw(float DeltaTime);
		void TickCancelled(float DeltaTime);
		void StartPlacementMode();
		void SetUnderConstruction();
		void SetStencilOnBuildingStateChanged(class AActor* InInstigator, EBuildingState NewState);
		void SetHUDMarkerVariant(int32_t Variant);
		void SetHUDMarkerColorVariant(int32_t Variant);
		void ServerStartPlacementMode();
		void ServerLightFireInteract(class AActor* InstigatedBy);
		void ServerInteractHold(class AActor* InstigatedBy);
		void ServerInteractCancel(class AActor* InstigatedBy);
		void ServerInteract(class AActor* InstigatedBy);
		void ServerDropInteract(class AActor* InstigatedBy);
		void ServerDemolish(class AActor* InstigatedBy);
		void ServerBeginRelocate(class AActor* InstigatedBy);
		void SelfComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void SelfComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void RegisterBuildingChangedCallbacks();
		void RegisterBuildingChangedCallback(const struct FBuildingGridKey& Key);
		void PostRestoredFromInstance();
		void PostRegisteredToGrid();
		void OnWaveStarted();
		void OnWaveComplete();
		void OnRep_ReplicatedData();
		void OnRep_NetworkPower();
		void OnRep_Items();
		void OnRep_IsLitWithFireChanged();
		void OnRep_BuildingStateChanged(EBuildingState OldState);
		void OnPowerSwitchOpenCloseStateChanged(bool bIsOpen, class AActor* InInstigator);
		void OnPlayerPossessed();
		void OnPlayerEquipmentChanged();
		void OnNetworkPowerChangedEvent(float Power);
		void OnNetworkPowerChanged(int32_t NetworkId, float Power);
		void OnFragilityLevelChanged(int32_t CurrentFragilityLevel);
		void OnBuildingIsFragileChanged(class UHealthComponent* Sender, bool bIsFragile);
		void OnBuildingHealthChanged(class UHealthComponent* SourceHealthComponent, float NewHealth, float OldHealth);
		void OnBuildingDestroyed(const struct FDamageInfo& DamageInfo);
		void OnBuildingDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void NotifyPendingBuildingMoved(const struct FBuildingGridLocation& NewLocation);
		void NotifyBuildingChanged(const struct FBuildingGridLocation& Location);
		void MulticastHandleDestroyed();
		void MulticastHandleDemolish();
		void MulticastHandleDeconstruction();
		void MulticastHandleDamaged();
		void MulticastHandleBuildingPlacement();
		void MulticastHandleBuildingCompletedSFX(class AActor* InstigatedBy);
		void MulticastBuildingMoved(class USceneComponent* AttachParent, const struct FTransform& RelativeTransform);
		void K2_DrawDebugCells();
		bool IsUnderConstruction();
		bool IsReplacementBuilding();
		bool IsPlaced();
		bool IsOverloaded();
		bool IsBuilt();
		bool IsBeingReplaced();
		bool IsBeingPlacedLocal();
		bool IsBeingPlaced();
		struct FBuildingGridKey InverseTransformSlot(class UBuildingGridComponent* Grid, const struct FBuildingGridKey& Slot);
		bool HasTag(const struct FGameplayTag& InTag);
		bool HasParentGrid();
		bool HasAnyTag(const struct FGameplayTagContainer& InTags);
		void HandleFinishCollapseDestroy();
		float GetWeight();
		class FText GetUseText(EInteractionChannel Channel, class AActor* InstigatedBy);
		EInteractionType GetUseInteractionType(EInteractionChannel Channel, class AActor* InstigatedBy);
		bool GetUseFacingHelper();
		EInteractAnimType GetUseAnimType(EInteractionChannel Channel, class AActor* InstigatedBy);
		float GetTotalBurnTimeHours();
		class UTeamComponent* GetTeamComponent();
		TArray<struct FBuildingGridKey> GetSupportedByCells(const struct FBuildingGridLocation& At);
		float GetSturdiness();
		TArray<struct FBuildingGridKey> GetSoftCells();
		bool GetShouldShowHUDMarker();
		class ABuilding* GetReplacementBuilding();
		TArray<struct FRecipeRequirements> GetRemainingRequirements();
		int32_t GetRecipeIngredientCountRequired(const struct FDataTableRowHandle& Ingredient);
		int32_t GetRecipeIngredientCountRemaining(const struct FDataTableRowHandle& Ingredient);
		int32_t GetRecipeIngredientCountAdded(const struct FDataTableRowHandle& Ingredient);
		bool GetProvidesSupport();
		bool GetPlacementValid();
		class UBuildingGridComponent* GetParentGrid();
		TArray<struct FIntVector> GetOverrideSnaps();
		class UObsidianIDComponent* GetObsidianIDComponent();
		class FString GetName();
		bool GetIsFoundation();
		bool GetIsAnchoredCompleteTransitive();
		bool GetIsAnchor();
		int32_t GetHUDMarkerVariant();
		EHUDMarkerType GetHUDMarkerType();
		int32_t GetHUDMarkerColorVariant();
		class UHealthComponent* GetHealthComponent();
		class UBuildingShape* GetGridShape();
		struct FTransform GetGridOriginTransform();
		struct FVector GetGridOriginOffset();
		struct FBuildingGridLocation GetGridLocation();
		struct FBuildingGridKey GetGridKey();
		struct FBuildingGridBuildingId GetGridBuildingId();
		struct FVector GetGeometricOriginOffset();
		TArray<struct FBuildingGridKey> GetFlatFootprintAt(const struct FBuildingGridLocation& At, float InActualWorldRotation);
		TArray<struct FBuildingGridKey> GetFlatFootprint();
		TArray<struct FBuildingGridKey> GetComboFootprintAt(const struct FBuildingGridLocation& At, float InActualWorldRotation);
		TArray<struct FBuildingGridKey> GetComboFootprint();
		int32_t GetCollapseCount();
		TArray<struct FBuildingGridKey> GetCells(float AngleZ, EGetCellFlags Flags);
		TArray<struct FBuildingGridKey> GetCeilingFootprintAt(const struct FBuildingGridLocation& At, float InActualWorldRotation);
		TArray<struct FBuildingGridKey> GetCeilingFootprint();
		TArray<struct FBuildingGridKey> GetBaseFootprintAt(const struct FBuildingGridLocation& At, float InActualWorldRotation);
		TArray<struct FBuildingGridKey> GetBaseFootprint();
		EBuildingGridSurfaceType GetAnchoredSurface();
		TArray<struct FBuildingGridKey> GetAdjacentCells();
		float GetActualWorldRotation();
		void DropNewItem(const struct FDataTableRowHandle& ItemData, const struct FTransform& AtTransform, class UBaseLODActor* ThisActor, class UBaseLODActor* InstigatedBy);
		void DropItem(class UItem* Item, const struct FTransform& AtTransform, class UBaseLODActor* ThisActor, class UBaseLODActor* InstigatedBy);
		bool DoesCompletionCauseOverload();
		bool CheckAdditionalPlacementRequirements(const struct FBuildingGridLocation& At);
		EInteractionState CanUse(EInteractionChannel Channel, class AActor* InstigatedBy);
		void CancelBuild(class AActor* InstigatedBy);
		EInteractionState CanBeRelocated();
		bool CanAddIngredients();
		int32_t CalculateRequiredItemCount(const struct FRecipeRequirements& Requirement);
		class UMaterialInstanceDynamic* BuildingCreateDynamicMaterialInstance(class UMeshComponent* Target, int32_t ElementIndex, class UMaterialInterface* SourceMaterial, const class FName& OptionalName);
		void BlueprintDropItems(class UBaseLODActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuildingFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool GetBuildingDataFilterMatches(const struct FBaseBuildingData& BuildingData, const class FString& FilterText);
		void CoalesceSoftBuildingClass();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingGridBuildingIdLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuildingGridBuildingIdLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsBuildingIdValid(const struct FBuildingGridBuildingId& ID);
		struct FBuildingGridBuildingId GetInvalidBuildingId();
		class UBuildingGridComponent* GetGridForBuildingGridBuildingId(const struct FBuildingGridBuildingId& BuildingGridBuildingId);
		class UBuildingGridComponent* GetBuildingGridFromId(const struct FBuildingGridBuildingId& ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingGridComponent
	 * Size -> 0x0638 (FullSize[0x0860] - InheritedSize[0x0228])
	 */
	class UBuildingGridComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_61NL[0x8];                                   // 0x0228(0x0008) Fix Super Size
		unsigned char                                              UnknownData_UDT1[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBuildingPreRegister;                                   // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingRegistered;                                    // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingBuilt;                                         // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingPreUnregister;                                 // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingUnregistered;                                  // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    BaseIndex;                                               // 0x0288(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDynamicallyCreated;                                   // 0x028C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBuildingGridSurfaceType                                   SurfaceType;                                             // 0x028D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X36Q[0x52];                                  // 0x028E(0x0052) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInstancedBuildingData                              InstancedBuildings;                                      // 0x02E0(0x0078) Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<struct FBuildingGridISMKey, class UInstancedStaticMeshComponent*> ISMs;                                                    // 0x0358(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class UInstancedStaticMeshComponent*, struct FBuildingGridISMMetadata> ISMMetadata;                                             // 0x03A8(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_98CW[0xC0];                                  // 0x03F8(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDelayedDestructionData>                     DelayedDestroys;                                         // 0x04B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R9EK[0x38];                                  // 0x04C8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeSinceCreation;                                       // 0x0500(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BE0I[0xAC];                                  // 0x0504(0x00AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLiteBuildingGrid                                   LiteGrid;                                                // 0x05B0(0x0240) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W735[0x70];                                  // 0x07F0(0x0070) MISSED OFFSET (PADDING)

	public:
		struct FIntVector WorldToGrid(EBuildingPlacementMode PlacementMode, const struct FVector& WorldPosition, const struct FVector2D& Offset);
		struct FTransform SnapToBuildGrid(EBuildingPlacementMode PlacementMode, const struct FVector& WorldPosition, const struct FVector2D& Offset);
		void RegisterChangedCallback(const struct FBuildingGridKey& GridLocation, class ABuilding* Building);
		void OnRep_TimeSinceCreation();
		void OnRep_SurfaceType();
		void OnRep_InstancedBuildings();
		struct FVector LocalToWorld(const struct FVector& LocalLocation);
		struct FIntVector LocalToGrid(EBuildingPlacementMode PlacementMode, const struct FVector& LocalPosition, const struct FVector2D& Offset);
		struct FVector KeyToWorldLocation(const struct FBuildingGridKey& Key);
		bool IsSnapOccupied(const struct FIntVector& Snap);
		bool IsBlocked(const struct FBuildingGridKey& GridLocation);
		bool HasOverlappingBuilding(const struct FBuildingGridKey& GridLocation, class ABuilding* Building, float BuildingWorldRotation);
		bool HasBuildingPrecise(const struct FBuildingGridKey& GridLocation);
		bool HasBuildingAdjacent(const struct FBuildingGridKey& GridLocation, class ABuilding* Building, float BuildingWorldRotation);
		bool HasBuilding(const struct FBuildingGridKey& GridLocation);
		struct FTransform GridToWorld(const struct FIntVector& Position, const struct FVector& LocalOffset);
		struct FVector GridToLocal(const struct FIntVector& Position);
		EBuildingGridSlot GetWallSlot(float WorldRotation, bool bAllowDiagonal);
		bool GetUseBuildingIntegrity();
		EBuildingGridSurfaceType GetSurfaceType();
		TArray<struct FBuildingGridKey> GetSupportsSlots(const struct FTransform& RelativeTo, const struct FBuildingGridKey& OriginSlot, class ABuilding* Building, float BuildingWorldRotation);
		TArray<struct FBuildingGridKey> GetSupportedBySlots(const struct FTransform& RelativeTo, const struct FBuildingGridKey& OriginSlot, class ABuilding* Building, float BuildingWorldRotation);
		struct FVector GetSubdivisionOffset();
		int32_t GetSubdivisionCountZ();
		int32_t GetSubdivisionCountY();
		int32_t GetSubdivisionCountX();
		struct FIntVector GetSubdivisionCount();
		TArray<struct FBuildingGridKey> GetSubdividedBaseFootprint(const struct FBuildingGridKey& OriginSlot, class ABuilding* Building, float BuildingWorldRotation);
		TArray<struct FBuildingGridKey> GetSoftSlots(const struct FTransform& RelativeTo, const struct FBuildingGridKey& OriginSlot, class ABuilding* Building, float BuildingWorldRotation);
		struct FVector GetSnapOffset();
		TArray<struct FBuildingGridKey> GetRawSubdivisions(const struct FBuildingGridKey& OriginSlot, EGetCellFlags Flags);
		struct FIntVector GetMinCell();
		struct FIntVector GetMaxCell();
		TArray<struct FBuildingGridKey> GetFlatFootprint(const struct FBuildingGridKey& OriginSlot, class ABuilding* Building, float BuildingWorldRotation);
		int32_t GetCollapseCountMulti(bool bAllowDesignated);
		int32_t GetCollapseCountAsync(const struct FBuildingGridBuildingId& BuildingId);
		int32_t GetCollapseCount(class ABuilding* Building);
		struct FVector GetCellSize();
		struct FVector GetCellExtents();
		struct FVector GetBaseCellSize();
		void CheckDetachedDestroy();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingGridKeyLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuildingGridKeyLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FBuildingGridKey Subtract_BuildingGridKeyIntVector(const struct FBuildingGridKey& A, const struct FIntVector& B);
		struct FBuildingGridKey Add_BuildingGridKeyIntVector(const struct FBuildingGridKey& A, const struct FIntVector& B);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingGridLocationLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuildingGridLocationLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FBuildingGridLocation Subtract_BuildingGridLocationIntVector(const struct FBuildingGridLocation& A, const struct FIntVector& B);
		bool IsEaveBlockedAt(class ABuilding* Building, const struct FBuildingGridLocation& Location, const struct FGameplayTag& ByTag);
		bool IsCrenellationBlockedAt(class ABuilding* Building, const struct FBuildingGridLocation& Location, float ActualWorldRotation);
		bool IsBuildingGridLocationValid(const struct FBuildingGridLocation& Location);
		struct FBuildingGridLocation Add_BuildingGridLocationIntVector(const struct FBuildingGridLocation& A, const struct FIntVector& B);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingHealthWidget
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class UBuildingHealthWidget : public UGameUserWidget
	{
	public:
		class UCanvasPanel*                                        HealthHolder;                                            // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        HealthBar;                                               // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HideDelay;                                               // 0x0288(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3NMS[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              TargetActor;                                             // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthComponent;                                         // 0x0298(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowingBar;                                             // 0x02A0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRGC[0x2F];                                  // 0x02A1(0x002F) MISSED OFFSET (PADDING)

	public:
		void ShowBar();
		void HideBar();
		struct FLinearColor GetHealthBarColor(float HealthRatio);
		struct FLinearColor GetFragileBarColor(float FragileRatio);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingManagerComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UBuildingManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBuilingUnderConstruction;                              // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuilingNotUnderConstruction;                           // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingMaterialAssetUserData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UBuildingMaterialAssetUserData : public UAssetUserData
	{
	public:
		struct FDataTableRowHandle                                 Ingredient;                                              // 0x0028(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingPlacementComponent
	 * Size -> 0x0330 (FullSize[0x03E0] - InheritedSize[0x00B0])
	 */
	class UBuildingPlacementComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBuildingCompleteDelegate;                              // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAlternatePlacementModeChangedDelegate;                 // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepeatPlacementModeChangedDelegate;                    // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFlipPlacementModeChangedDelegate;                      // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingRelocateStart;                                 // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingRelocateCancel;                                // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingRelocateComplete;                              // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingErrorChanged;                                  // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingVariantChanged;                                // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V6Q0[0x18];                                  // 0x0140(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsPlacingBuilding;                                       // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B0NG[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UActorPoolComponent*                                 SnapPool;                                                // 0x0160(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BaseSnapObject;                                          // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ABuilding*                                           PendingBuilding;                                         // 0x0170(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TUM2[0x8];                                   // 0x0178(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBuildingGridLocation                               PendingLocation;                                         // 0x0180(0x0028) Transient, NoDestructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQZ7[0xB8];                                  // 0x01A8(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ABuilding*                                           PendingRelocate;                                         // 0x0260(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 PendingDataRowHandle;                                    // 0x0268(0x0010) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2OQU[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BuildingActor;                                           // 0x0280(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BuildingActorFlipped;                                    // 0x0288(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BuildingActorDiagonal;                                   // 0x0290(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BuildingActorWall;                                       // 0x0298(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BuildingActorCeiling;                                    // 0x02A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_29BK[0x4];                                   // 0x02A8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PendingRotation;                                         // 0x02AC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G0JW[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ActiveSnaps;                                             // 0x02B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CVO0[0xA4];                                  // 0x02C8(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlacedBuildingLocationLerpTime;                          // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlacedBuildingRotationLerpTime;                          // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ROS3[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         LerpCurve;                                               // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreeBuildingPlacementDistance;                           // 0x0380(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreeBuildingGroundDistance;                              // 0x0384(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DistanceScoreCurve;                                      // 0x0388(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         PerpendicularDistanceScoreCurve;                         // 0x0390(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SocketMatchScoreCurve;                                   // 0x0398(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         PersistentSnapMatchScoreCurve;                           // 0x03A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ValidSlotScore;                                          // 0x03A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuildingWallMountPlacementDistance;                      // 0x03AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuildingRotateSpeed;                                     // 0x03B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GroundSnapDistance;                                      // 0x03B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WallMaxTranslateCells;                                   // 0x03B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8LCD[0x4];                                   // 0x03BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RelocateVisuals;                                         // 0x03C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                RelocateVisualsInstance;                                 // 0x03C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVisualEffect*                                       BuildingRelocateSuccessEffect;                           // 0x03D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           BuildingRelocateSuccesAudio;                             // 0x03D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ServerSetRepeatPlacementMode(bool bRepeatMode);
		void ServerSetPlacementRotation(float InPendingRotation, float InActualWorldRotationRadZ);
		void ServerSetFlipPlacementMode(bool bFlipMode);
		void ServerSetAlternatePlacementMode(bool bAlternateMode);
		void ServerHandleAcceptPlacement(float InPendingRotation, float InActualWorldRotationRadZ);
		void ServerExitBuildingPlacement(bool bSuccess);
		void ServerEnterPlaceBuildingMode(const struct FDataTableRowHandle& BuildingData, EBuildingPlacementFlags Flags);
		void OnRep_PendingRelocate();
		void OnRep_PendingBuilding();
		void OnRep_IsPlacingBuilding();
		void MulticastHandleBuildingPlacementSuccessEffects(const struct FVector& Location);
		bool IsRelocatingBuilding();
		bool IsPlacementModeValid();
		bool GetRepeatPlacementMode();
		struct FDataTableRowHandle GetPendingBuildingRowHandle();
		bool GetPendingBuildingHasUnlockedVariants();
		class ABuilding* GetPendingBuilding();
		bool GetIsPlacingBuilding();
		bool GetFlipPlacementMode();
		bool GetCurrentPlacementHasFlipMode();
		bool GetCurrentPlacementHasAlternativeMode();
		class FString GetCurrentPlacementErrorString();
		int32_t GetCurrentPlacementError();
		bool GetAlternatePlacementMode();
		void ExitPlaceBuildingMode(bool bSuccess);
		void EnterRelocateMode(class ABuilding* Target);
		void EnterPlaceBuildingMode(const struct FDataTableRowHandle& BuildingData, bool bAutoAddIngredients, bool bDeployable);
		void ClientWarnRelocateCancelled();
		void ClientEnterRelocateMode(class ABuilding* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingPowerCable
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ABuildingPowerCable : public AActor
	{
	public:
		unsigned char                                              UnknownData_EWBW[0x30];                                  // 0x0230(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Start;                                                   // 0x0260(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             End;                                                     // 0x026C(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnRep_StartEnd();
		void OnPoweredNetworksCoalesced(int32_t DestinationNetwork, int32_t RemovedNetwork);
		void OnPoweredBuildingConnectionRemoved(int32_t InNodeA, int32_t InNodeB);
		void OnNodeRemoved(int32_t NodeId);
		void OnNodeChangedNetwork(int32_t NodeId, int32_t NewNetworkId);
		void OnBuildingMoved(const struct FBuildingPowerId& ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingRecipeDataLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuildingRecipeDataLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FDataTableRowHandle GetBuildingRecipePrimaryMaterial(const struct FBuildingRecipeData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuildingShape
	 * Size -> 0x0328 (FullSize[0x0358] - InheritedSize[0x0030])
	 */
	class UBuildingShape : public UDataAsset
	{
	public:
		class UBuildingShape*                                      OverrideSupportedBy;                                     // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FBuildingGridKey>                            AppendSupportedBy;                                       // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FBuildingGridKey>                            RemoveSupportedBy;                                       // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FBuildingGridKey>                            SoftCells;                                               // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FIntVector>                                  OverrideSnaps;                                           // 0x0068(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     ManualPlacementLocations;                                // 0x0078(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FBuildingGridKey>                            OverrideFullCells;                                       // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FBuildingGridKey>                            OverrideCells;                                           // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FBuildingGridKey>                            OverrideCellsAdvanced;                                   // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FBuildingGridKey>                            BlockFullCells;                                          // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FBuildingGridKey>                            BlockCells;                                              // 0x00C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FBuildingGridKey>                            BlockCellsAdvanced;                                      // 0x00D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OGKC[0x270];                                 // 0x00E8(0x0270) MISSED OFFSET (PADDING)

	public:
		bool IsCell(const struct FBuildingGridKey& Key, EGetCellFlags Flags);
		TArray<struct FBuildingGridKey> GetSupportsOrSupportedByCells(float AngleZ);
		TArray<struct FBuildingGridKey> GetSupportsCells(float AngleZ);
		TArray<struct FBuildingGridKey> GetSupportedByCells(float AngleZ);
		struct FIntVector GetSizeCellsGeometric();
		struct FIntVector GetSizeCells();
		TArray<struct FBuildingGridKey> GetCells(float AngleZ, EGetCellFlags Flags);
		TArray<struct FBuildingGridKey> GetAdjacentCells();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BuoyantProp
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class ABuoyantProp : public AActor
	{
	public:
		unsigned char                                              UnknownData_2U5A : 1;                                    // 0x0230(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPhysicsAsleep : 1;                                      // 0x0230(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0FFW[0xF];                                   // 0x0231(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestOptionActor
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class ABurgleQuestOptionActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_67HJ[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RewardTier;                                              // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowRepeat;                                            // 0x0244(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XG1F[0x3];                                   // 0x0245(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatRange                                         ProgressRange;                                           // 0x0248(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        QuestTag;                                                // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                IdComponent;                                             // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UBurgleQuestInstance>                 ActiveQuest;                                             // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReleaseByQuest(class UBurgleQuestInstance* Quest);
		void OnStartQuest();
		void OnEndQuest();
		void NotifyStartQuest();
		void NotifyEndQuest(bool bCompleted);
		bool IsAvailable();
		class UObsidianIDComponent* GetObsidianID();
		struct FGuid GetGuid();
		void ClaimByQuest(class UBurgleQuestInstance* Quest);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestChipOptionActor
	 * Size -> 0x0030 (FullSize[0x02A0] - InheritedSize[0x0270])
	 */
	class ABurgleQuestChipOptionActor : public ABurgleQuestOptionActor
	{
	public:
		class UItem*                                               ChipItem;                                                // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasInitializedChip : 1;                                 // 0x0278(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QI2P[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ChipClass;                                               // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4NP[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsComplete();
		struct FDataTableRowHandle GetChipItemType();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestTemplate
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UBurgleQuestTemplate : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestTemplateCoziness
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UBurgleQuestTemplateCoziness : public UBurgleQuestTemplate
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstance
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UBurgleQuestInstance : public UBaseQuest
	{
	public:
		unsigned char                                              UnknownData_7P9N[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBaseObjective*>                              Objectives;                                              // 0x0038(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q8RT : 1;                                    // 0x0048(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPerformedComplete : 1;                                  // 0x0048(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1ZYZ[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              Template;                                                // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetComplete();
		void RemoveObjectiveMarkers();
		void PerformComplete();
		void OnRep_Objectives();
		void NotifyQuestStart();
		void NotifyQuestComplete();
		void NotifyAbandonQuest();
		void InitializeStarted();
		bool HasPerformedComplete();
		class FString GetTitle();
		class UBurgleQuestTemplate* GetTemplate();
		int32_t GetScienceReward();
		class FString GetObjectiveText(int32_t ObjectiveIndex);
		class UBurgleObjectiveSimple* GetObjectiveAsSimple(int32_t Index);
		class UBurgleObjectiveProgress* GetObjectiveAsProgress(int32_t Index);
		class UBaseBurgleObjective* GetObjective(int32_t Index);
		bool GetGenerationFailed();
		int32_t GetExternalScienceReward();
		class FString GetDescriptionText();
		class UBaseBurgleObjective* GetCurrentObjective();
		void GenerateParameters();
		void FailGeneration();
		void CreateObjectiveMarkers();
		void CleanUpQuest();
		void AddObjective(class UBaseBurgleObjective* Objective);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceCoziness
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UBurgleQuestInstanceCoziness : public UBurgleQuestInstance
	{
	public:
		int32_t                                                    CozinessLevel;                                           // 0x0058(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6P73[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnCozinessLevelAchieved(class UPartyComponent* Sender, int32_t NewLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBurgleQuestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void LogBurgleQuestWarning(const class FString& Message);
		void LogBurgleQuestLog(const class FString& Message);
		void LogBurgleQuestError(const class FString& Message);
		bool IsBurgleQuestProgressAtLeast(class UObject* WorldContextObject, float Progress);
		class ABurgleQuestOptionActor* GetRandomQuestOption(class UObject* WorldContextObject, const struct FGameplayTag& Tag);
		class UBurgleObjectiveSimple* CreateBurgleQuestSimpleObjective(class UBurgleQuestInstance* ParentQuest, int32_t ObjectiveIndex);
		class UBurgleObjectiveProgress* CreateBurgleQuestProgressObjective(class UBurgleQuestInstance* ParentQuest, int32_t ObjectiveIndex, int32_t MaxProgress);
		int32_t CalculateBurgleQuestTargetCount(class UObject* WorldContextObject, const struct FFloatRange& AvailableProgressRange, int32_t MinCount, int32_t MaxCount, float MaxCountAt);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceSingleOptAct
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UBurgleQuestInstanceSingleOptAct : public UBurgleQuestInstance
	{
	public:
		class ABurgleQuestOptionActor*                             LocationOption;                                          // 0x0058(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GWF9[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceBurgleChip
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class UBurgleQuestInstanceBurgleChip : public UBurgleQuestInstanceSingleOptAct
	{
	public:
		unsigned char                                              UnknownData_S59U[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceMarkPoint
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class UBurgleQuestInstanceMarkPoint : public UBurgleQuestInstanceSingleOptAct
	{
	public:
		class ABuilding*                                           DesignatedBuilding;                                      // 0x0070(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W65C[0x10];                                  // 0x0078(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceSingleRow
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class UBurgleQuestInstanceSingleRow : public UBurgleQuestInstance
	{
	public:
		struct FDataTableRowHandle                                 RowHandle;                                               // 0x0058(0x0010) BlueprintVisible, Net, Transient, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestTemplateKillGroup
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UBurgleQuestTemplateKillGroup : public UBurgleQuestTemplate
	{
	public:
		TArray<struct FBurgleQuestInstanceKillConfiguration>       Configs;                                                 // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FBurgleQuestKillGroupRewardConfig>           Rewards;                                                 // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		int32_t GetSciencePerKill(const struct FGameplayTag& CreatureTag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestInstanceKillGroup
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UBurgleQuestInstanceKillGroup : public UBurgleQuestInstance
	{
	public:
		struct FGameplayTag                                        CreatureTag;                                             // 0x0058(0x0008) BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnPartyCreatureKill(class ASurvivalCharacter* Creature, class ASurvivalPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestKillUniqueOptionActor
	 * Size -> 0x0018 (FullSize[0x0288] - InheritedSize[0x0270])
	 */
	class ABurgleQuestKillUniqueOptionActor : public ABurgleQuestOptionActor
	{
	public:
		class FScriptMulticastDelegate                             OnOptionCompleted;                                       // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EA93[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsComplete();
		void EncounterCompletedCallback(class AActor* InInstigator);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestManagerComponent
	 * Size -> 0x0130 (FullSize[0x01E0] - InheritedSize[0x00B0])
	 */
	class UBurgleQuestManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ADVU[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnQuestStarted;                                          // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnQuestComplete;                                         // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveUpdated;                                      // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveComplete;                                     // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveQuestsChanged;                                   // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAvailableQuestsChanged;                                // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnQuestsRefilled;                                        // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CREM[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxSimultaneousQuests;                                   // 0x0138(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CompletedQuestProgressWeight;                            // 0x013C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DayProgressWeight;                                       // 0x0140(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0HYM[0x4];                                   // 0x0144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBurgleQuestInstance*>                        AvailableQuests;                                         // 0x0148(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LastDayGenerated;                                        // 0x0158(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2ZXN[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBurgleQuestInstance*>                        ActiveQuests;                                            // 0x0160(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      QuestTypes;                                              // 0x0170(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CMGF[0x60];                                  // 0x0180(0x0060) MISSED OFFSET (PADDING)

	public:
		bool TryRequestRefillQuests(class ASurvivalPlayerController* Instigator);
		void RejectQuest(class UBurgleQuestInstance* Quest);
		void OnRep_AvailableQuests();
		void OnRep_ActiveQuests();
		void MulticastStartQuest(class UBurgleQuestInstance* Quest);
		void MulticastQuestsRefilled();
		void MulticastObjectiveUpdated(class UBurgleQuestInstance* Quest, class UBaseObjective* Objective);
		void MulticastCompleteQuest(class UBurgleQuestInstance* Quest);
		float GetProgressRating();
		int32_t GetCompletedQuestCount();
		TArray<class UBurgleQuestInstance*> GetAvailableQuests();
		TArray<class UBurgleQuestInstance*> GetAllQuests();
		TArray<class UBurgleQuestInstance*> GetActiveQuests();
		void ForceRegenerateQuests();
		void DebugSetCompletedQuestCount(int32_t Count);
		void AcceptQuest(class UBurgleQuestInstance* Quest);
		void AbandonQuest(class UBurgleQuestInstance* Quest);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BaseBurgleObjective
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UBaseBurgleObjective : public UBaseObjective
	{
	public:
		unsigned char                                              UnknownData_IOTI[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ObjectiveIndex;                                          // 0x0040(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bActive : 1;                                             // 0x0044(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7WD6[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (PADDING)

	public:
		void Initialize(class UBurgleQuestInstance* InParentQuest, int32_t InObjectiveIndex);
		int32_t GetObjectiveIndex();
		void ActivateObjective();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleObjectiveSimple
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UBurgleObjectiveSimple : public UBaseBurgleObjective
	{
	public:
		unsigned char                                              bIsComplete : 1;                                         // 0x0048(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TCWI[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		void CompleteObjective();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleObjectiveProgress
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UBurgleObjectiveProgress : public UBaseBurgleObjective
	{
	public:
		int32_t                                                    ProgressCount;                                           // 0x0048(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    MaxProgress;                                             // 0x004C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetMaxProgress(int32_t InTarget);
		void InitializeProgress(class UBurgleQuestInstance* InParentQuest, int32_t InObjectiveIndex, int32_t InMaxProgress);
		int32_t GetProgress();
		int32_t GetMaxProgress();
		void AddProgress(int32_t Progress);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurgleQuestTemplateSingleOptAct
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UBurgleQuestTemplateSingleOptAct : public UBurgleQuestTemplate
	{
	public:
		struct FGameplayTag                                        OptionTag;                                               // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CharacterAnimInstance
	 * Size -> 0x00A8 (FullSize[0x0360] - InheritedSize[0x02B8])
	 */
	class UCharacterAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_TFUV[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		float                                                      AimPitch;                                                // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Speed;                                                   // 0x02C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SplineDirection;                                         // 0x02C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Velocity;                                                // 0x02CC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Heading;                                                 // 0x02D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsMoving : 1;                                            // 0x02DC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsInAir : 1;                                             // 0x02DC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsFlying : 1;                                            // 0x02DC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsSwimming : 1;                                          // 0x02DC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsSitting : 1;                                           // 0x02DC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGlidingStyle                                              GlidingStyle;                                            // 0x02DD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsZiplining : 1;                                        // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsCrouching : 1;                                         // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsSprinting : 1;                                         // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsClimbingSpline : 1;                                    // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsAttacking : 1;                                         // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsBlocking : 1;                                          // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsThrowing : 1;                                          // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsInCombat : 1;                                          // 0x02DE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsDead : 1;                                              // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsIncapacitated : 1;                                     // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsReviving : 1;                                          // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsUnderwater : 1;                                        // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsFirstPerson : 1;                                       // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              HasWeapon : 1;                                           // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              HasOffhand : 1;                                          // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsHauling : 1;                                           // 0x02DF(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsTurning : 1;                                           // 0x02E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsEquipping : 1;                                         // 0x02E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsAuthorityOrLocallyControlled : 1;                      // 0x02E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECreatureActivityMode                                      ActivityMode;                                            // 0x02E1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K4SU[0x2];                                   // 0x02E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnDelta;                                               // 0x02E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnDeltaSmoothed;                                       // 0x02E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Stance;                                                  // 0x02EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OffhandStance;                                           // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LookAtPoint;                                             // 0x02F4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookAtDistance;                                          // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bBigHeadMode : 1;                                        // 0x0304(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIKEnabled : 1;                                          // 0x0304(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bStartDead : 1;                                          // 0x0304(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasFlipperTag : 1;                                      // 0x0304(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JPW[0x3];                                   // 0x0305(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        FlipperTag;                                              // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        VitalTag;                                                // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VitalValue;                                              // 0x0318(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GI92[0x44];                                  // 0x031C(0x0044) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurrowCharacterAnimInstance
	 * Size -> 0x0010 (FullSize[0x0370] - InheritedSize[0x0360])
	 */
	class UBurrowCharacterAnimInstance : public UCharacterAnimInstance
	{
	public:
		unsigned char                                              UnknownData_N7S7[0x10];                                  // 0x0360(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurrowComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UBurrowComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KI0R[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBurrowStateChanged;                                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         BurrowStatusEffects;                                     // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      BurrowCooldown;                                          // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurrowTime;                                              // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnburrowTime;                                            // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisableWhileUnburrowed;                                 // 0x00E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCombatTogglesBurrow;                                    // 0x00E5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bClearThreatOnBurrow;                                    // 0x00E6(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBurrowAtBeginPlay;                                      // 0x00E7(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasBurrowedTimeToStop;                                  // 0x00E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LDT7[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BurrowedTimeToStop;                                      // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyAfterBurrowing;                                  // 0x00F0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBurrowState                                               BurrowState;                                             // 0x00F1(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7D4H[0x36];                                  // 0x00F2(0x0036) MISSED OFFSET (PADDING)

	public:
		void UnBurrow();
		void OnRep_BurrowState();
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void OnDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnCombatChange(class ASurvivalCharacter* Character, bool InCombat);
		bool IsBurrowed();
		EBurrowState GetBurrowState();
		void Burrow();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyBurrowComponent
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UProxyBurrowComponent : public UProxyComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurrowLODComponent
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UBurrowLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_6ZKY[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalCharacter
	 * Size -> 0x0D70 (FullSize[0x1240] - InheritedSize[0x04D0])
	 */
	class ASurvivalCharacter : public ACharacter
	{
	public:
		unsigned char                                              UnknownData_15Q0[0x680];                                 // 0x04D0(0x0680) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CameraDisplayModeLocked;                                 // 0x0B50(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsAttacking : 1;                                        // 0x0B51(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bClientWantsToAttack : 1;                                // 0x0B51(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G5WF[0x6];                                   // 0x0B52(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackLaunch;                                          // 0x0B58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAttackHit;                                             // 0x0B68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAttackEnded;                                           // 0x0B78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageTarget;                                          // 0x0B88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKillTarget;                                            // 0x0B98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReviveTarget;                                          // 0x0BA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDisplayModeChanged;                                    // 0x0BB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCombatChanged;                                         // 0x0BC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPropActorAddedRemoved;                                 // 0x0BD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       ShouldActorLOD;                                          // 0x0BE8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3SXS[0x3];                                   // 0x0BE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxFullActorDistance;                                    // 0x0BEC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ProxyStandIn;                                            // 0x0BF0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShouldOrientToGround;                                    // 0x0BF8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L097[0x3];                                   // 0x0BF9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GroundOrientLerpSpeed;                                   // 0x0BFC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D17X[0x10];                                  // 0x0C00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentAnimTarget;                                       // 0x0C10(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L63F[0x14];                                  // 0x0C18(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAlwaysRevelant;                                         // 0x0C2C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6G4V[0x3];                                   // 0x0C2D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 CharacterData;                                           // 0x0C30(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSpeakerInfo                                        SpeakerInfo;                                             // 0x0C40(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLocString                                          CharacterName;                                           // 0x0C70(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFemale;                                                 // 0x0C80(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAY0[0x3];                                   // 0x0C81(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MountSocket;                                             // 0x0C84(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O3WO[0x4];                                   // 0x0C8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        MountedAnimation;                                        // 0x0C90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThirdPersonFollowDistance;                               // 0x0C98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ERUD[0x4];                                   // 0x0C9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraComponent*                                    FirstPersonCamera;                                       // 0x0CA0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     FirstPersonCameraLocation;                               // 0x0CA8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpringArmComponent*                                 ThirdPersonSpringArm;                                    // 0x0CB0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthComponent;                                         // 0x0CB8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlockComponent*                                     BlockComponent;                                          // 0x0CC0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UReactionComponent*                                  ReactionComponent;                                       // 0x0CC8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTeamComponent*                                      TeamComponent;                                           // 0x0CD0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectComponent*                              StatusEffectComponent;                                   // 0x0CD8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaineCharMovementComponent*                         CharMovementComponent;                                   // 0x0CE0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEquipmentComponent*                                 CharEquipmentComponent;                                  // 0x0CE8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComp;                                          // 0x0CF0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     IncapacitatedInputComponent;                             // 0x0CF8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     CutsceneInputComponent;                                  // 0x0D00(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttractionComponent*                                AttractionComponent;                                     // 0x0D08(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UConversationComponent*                              ConversationComponent;                                   // 0x0D10(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBossComponent*                                      BossComponent;                                           // 0x0D18(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPrimitiveComponent*>                         PrimitiveComponents;                                     // 0x0D20(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UAttackHandlerComponent*                             AttackHandlerComponent;                                  // 0x0D30(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAttackComboData                                    DefaultAttackComboData;                                  // 0x0D38(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FAttackComboData                                    SwimAttackComboData;                                     // 0x0D58(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         AbilityDataList;                                         // 0x0D78(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 DeathAttackData;                                         // 0x0D88(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      AttackInputBufferTime;                                   // 0x0D98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DefaultAttackTier;                                       // 0x0D9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAlternateAttackFunction                                   AlternateAttackFunction;                                 // 0x0DA0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECameraDisplayMode                                         PlayerDisplayMode;                                       // 0x0DA1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CDSM[0x6];                                   // 0x0DA2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOverrideDisplayModeData>                    OverrideDisplayModes;                                    // 0x0DA8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class AActor*                                              OverrideViewTarget;                                      // 0x0DB8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     VoiceOverAudioComponent;                                 // 0x0DC0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PU16[0x1D];                                  // 0x0DC8(0x001D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECameraDisplayMode                                         ExpectedCameraViewPoint;                                 // 0x0DE5(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WJ3L[0x2];                                   // 0x0DE6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExpectedCameraTransitionTime;                            // 0x0DE8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BXH2[0x4];                                   // 0x0DEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERelevanceType                                             NetworkConsensusRelevance;                               // 0x0DF0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9LGW[0xF];                                   // 0x0DF1(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttackCombo*                                        DefaultAttackCombo;                                      // 0x0E00(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttackCombo*                                        SwimAttackCombo;                                         // 0x0E08(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAbility*>                                    Abilities;                                               // 0x0E10(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UAttack*                                             DeathAttack;                                             // 0x0E20(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XKYC[0x4];                                   // 0x0E28(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumFallDamageVelocity;                               // 0x0E2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallDamageRatio;                                         // 0x0E30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OLU1[0x4];                                   // 0x0E34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASurvivalCharacter*                                  CurrentMount;                                            // 0x0E38(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLD5[0x4];                                   // 0x0E40(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockedMontageTargetPitch;                                // 0x0E44(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LockedMontageBlendSpeed;                                 // 0x0E48(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CVCI[0x84];                                  // 0x0E4C(0x0084) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WatchCameraRig;                                          // 0x0ED0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bInCombat : 1;                                           // 0x0ED8(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bReplicatedIsSprinting : 1;                              // 0x0ED8(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bReplicatedAutorun : 1;                                  // 0x0ED8(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7U72[0x7];                                   // 0x0ED9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClimbableSplineKey                                 ReplicatedAttachedSpline;                                // 0x0EE0(0x0038) Net, Transient, NoDestructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDetachSplineReason                                        ReplicatedDetachSplineReason;                            // 0x0F18(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3OBT[0x3];                                   // 0x0F19(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReplicatedSplineProgress;                                // 0x0F1C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAttractionComponentKey                             ReplicatedPerchedObject;                                 // 0x0F20(0x0038) Net, Transient, NoDestructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AZiplineLine*                                        ReplicatedAttachedZipline;                               // 0x0F58(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReplicatedZiplinePosition;                               // 0x0F60(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D4QZ[0x4];                                   // 0x0F64(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        ReplicatedCurrentPlayingInteractAnim;                    // 0x0F68(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterMotionEaterComponent*                      ReplicatedMotionEater;                                   // 0x0F70(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3IHH[0x30];                                  // 0x0F78(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttack*                                             CurrentAttack;                                           // 0x0FA8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, class UAnimMontage*>             EmoteAnims;                                              // 0x0FB0(0x0050) Edit, NativeAccessSpecifierPublic
		unsigned char                                              SoftEmoteAnims[0x50];                                    // 0x1000(0x0050) UNKNOWN PROPERTY: MapProperty
		TMap<EInteractAnimType, class UAnimMontage*>               InteractAnims;                                           // 0x1050(0x0050) Edit, NativeAccessSpecifierPublic
		TArray<class UAnimMontage*>                                EmergeAnims;                                             // 0x10A0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FlyingLandAnim;                                          // 0x10B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FlyingTakeoffAnim;                                       // 0x10B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        PetAnim;                                                 // 0x10C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AudioData[0x28];                                         // 0x10C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UCharacterAudioData*                                 CachedAudioData;                                         // 0x10F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        CombatMusicTag;                                          // 0x10F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EInteractAnimType                                          InteractableAnimType;                                    // 0x1100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6LTW[0x7];                                   // 0x1101(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              InteractableProp;                                        // 0x1108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCharacterPropEntry>                         ActiveProps;                                             // 0x1110(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PTPO[0x8];                                   // 0x1120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AnimPropTemplate;                                        // 0x1128(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A8EA[0x8];                                   // 0x1130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ECharacterAnimMontageType, class UAnimMontage*>       ActiveAnimMontages;                                      // 0x1138(0x0050) Transient, NativeAccessSpecifierPublic
		float                                                      GiveUpTime;                                              // 0x1188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2XXC[0x2C];                                  // 0x118C(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DeathDestroyEffect[0x28];                                // 0x11B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UVisualEffect*                                       LoadedDeathDestroyEffect;                                // 0x11E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A6CJ[0x40];                                  // 0x11E8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhotoModeHelperComponent*                           PhotoModeHelperComponent;                                // 0x1228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7O1C[0x10];                                  // 0x1230(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateCameraDisplayMode(float InBlendTime);
		void ToggleCrouch();
		void SetOverrideViewTarget(class AActor* ViewTarget, const struct FViewTargetTransitionParams& Transition);
		void SetInCutscene(bool bInCutscene);
		void SetCameraDisplayModeLocked(bool Locked);
		void SetCameraDisplayMode(ECameraDisplayMode DisplayMode, float InBlendTime);
		void ServerTriggerAnimationInteract(class UAnimationInteractComponent* AnimationInteractComponent);
		void ServerToggleSprint();
		void ServerStopZiplining(bool bLaunch);
		void ServerStopAnimMontage(class UAnimMontage* AnimMontage);
		void ServerStartSprint();
		void ServerStartGlide();
		void ServerStartBlock();
		void ServerStartAttack(EAttackType AttackType);
		void ServerStartAbility(int32_t AbilityIndex);
		void ServerSetDisplayMode(ECameraDisplayMode DisplayMode);
		void ServerSetAutorun(bool bState);
		void ServerPlayEmoteAnim(const struct FGameplayTag& EmoteTypeTag);
		void ServerPlayEmote(const struct FDataTableRowHandle& EmoteDataRowHandle);
		void ServerPlayChatter(const struct FChatterEventReference& ChatterEvent, int32_t Param1, int32_t Param2);
		void ServerPlayAnimMontage(class UAnimMontage* AnimMontage, bool bLockCharacter, ECharacterAnimMontageType AnimMontageType);
		void ServerEndSprint();
		void ServerEndGlide();
		void ServerEndBlock(bool FromInput);
		void ServerEndAttack(bool bOnlyEndBeforeHitFrame);
		void ServerDismount();
		void ServerAttemptRaycastPossess();
		void PlayDestroyVisuals(EDestroyCharacterVariation Variation);
		void OnUnderwaterChanged(bool bIsUnderwater);
		void OnUIOpenChatPressed();
		void OnStatusEffectChanged();
		void OnRevive();
		void OnRep_SplineProgress();
		void OnRep_ReplicatedMotionEater();
		void OnRep_ReplicatedCurrentPlayingInteractAnim();
		void OnRep_NetworkRelevance();
		void OnRep_IsAttacking();
		void OnRep_InCombat();
		void OnRep_CurrentMount();
		void OnRep_bReplicatedIsSprinting();
		void OnRep_bReplicatedAutorun();
		void OnPlayerRemoved(class APlayerState* RemovedPlayer);
		void OnOpenChatMenuPressed();
		void OnIncapacitate(const struct FDamageInfo& DamageInfo);
		void OnHitReact(class UReactionComponent* Sender, EHitReactionType ReactType);
		void OnHealthStateChanged(EHealthState HealthState);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void MulticastStopCaptureReaction();
		void MulticastStopAnimMontageType(ECharacterAnimMontageType AnimMontageType);
		void MulticastStopAnimMontageSoft();
		void MulticastStopAnimMontage(class UAnimMontage* AnimMontage);
		void MulticastStartCaptureReaction(class UAnimMontage* AnimMontage, bool bLockCharacter);
		void MulticastSetPawnCollision(ECollisionResponse CollisionResponse);
		void MulticastSetAnimMontageNextSection(class UAnimMontage* AnimMontage, const class FName& SectionToSet, const class FName& NextSection, bool JumpIfNotInSection);
		void MulticastPlayPropAnimSoftProp(class UAnimMontage* AnimMontage, bool bLockCharacter, ECharacterAnimMontageType AnimMontageType);
		void MulticastPlayPropAnim(class UAnimMontage* AnimMontage, class UClass* Prop, bool bLockCharacter, ECharacterAnimMontageType AnimMontageType);
		void MulticastPlayDestroyVisuals(EDestroyCharacterVariation Variation);
		void MulticastPlayConsumedEffect(const struct FDataTableRowHandle& ItemType, const struct FVector& AtLocation);
		void MulticastPlayAnimMontageSoft(bool bLockCharacter, ECharacterAnimMontageType AnimMontageType);
		void MulticastPlayAnimMontage(class UAnimMontage* AnimMontage, bool bLockCharacter, ECharacterAnimMontageType AnimMontageType);
		void MulticastJumpAnimMontageSection(class UAnimMontage* AnimMontage, const class FName& SectionToSet, const class FName& NextSection);
		void MulticastHandleDetachFromControllerPendingDestroy(class AController* OldController);
		void MulticastAttackDestroyCharacter(bool bDestroy);
		bool IsLockedByAnimation();
		bool IsInCombat();
		bool IsFemale();
		bool IsCameraDisplayModeLocked();
		void InputToggleCameraModePressed();
		bool HasTag(const struct FGameplayTag& InTag);
		bool HasAnyTag(const struct FGameplayTagContainer& InTags);
		void HandleCameraDisplayModeChanged(ECameraDisplayMode DisplayMode, float BlendTime);
		void HandleBaseBuildingRelocated(class ABuilding* Sender);
		class ASurvivalCharacter* GetViewCharacter();
		struct FSpeakerReference GetSpeaker();
		struct FVector GetMovementForwardVector();
		struct FVector GetLookWorldOrigin();
		struct FVector GetLookForwardVector();
		bool GetIsFirstPerson();
		struct FGuid GetID();
		float GetGiveUpTimeRemaining();
		float GetGiveUpMaxTime();
		class UCameraComponent* GetFirstPersonCamera();
		void GetEmoteAnim(const struct FGameplayTag& EmoteTypeTag);
		class UAnimMontage* GetEmergeAnim(int32_t EmergeVariation);
		class ASurvivalCharacter* GetCurrentMount();
		struct FVector GetCurrentCameraLocation();
		class UCameraComponent* GetCurrentCamera();
		class UAttack* GetCurrentAttack();
		class UControlOptions* GetControlOptions(const struct FKey& Key);
		struct FLocString GetCharacterTypeName();
		class FString GetCharacterInstanceName();
		struct FDataTableRowHandle GetCharacterDataRow();
		struct FBoxSphereBounds GetCapsuleBounds();
		ECameraDisplayMode GetCameraDisplayMode();
		class AActor* GetAnimProp();
		TArray<class UAbility*> GetAbilities();
		void DisablePlayerLookAndTurnInput(float DisableTime);
		void ClientNotifyStartAttackFailure();
		void ClientNotifyRangedAttackHit();
		void ClearOverrideCameraDisplayMode(int32_t Handle, float InBlendTime);
		bool CanBeMounted();
		void ApplyFallDamage();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalCreature
	 * Size -> 0x0030 (FullSize[0x1270] - InheritedSize[0x1240])
	 */
	class ASurvivalCreature : public ASurvivalCharacter
	{
	public:
		unsigned char                                              UnknownData_2BVW[0x8];                                   // 0x1240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTamedCreatureData*                                  TameData;                                                // 0x1248(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z09B[0x8];                                   // 0x1250(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TamingChance;                                            // 0x1258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X8E3[0x4];                                   // 0x125C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        BeingPetAnim;                                            // 0x1260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OptimalPettingDistance;                                  // 0x1268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AOQH[0x4];                                   // 0x126C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_TameData(class UTamedCreatureData* OldData);
		bool IsTamingFood(class UItem* Item);
		bool IsInactivePet();
		bool IsActivePet();
		void HandleTameStateChanged(class UTamedCreatureData* Sender, ETamedState NewState);
		struct FVector GetPetMasterLocation();
		class ASurvivalPlayerCharacter* GetPetMaster();
		struct FVector GetPetHomeLocation();
		float GetPetHappinessNormalized();
		class FString GetFoodsList();
		TArray<struct FDataTableRowHandle> GetActivePetPassiveEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.BurrowSurvivalCharacter
	 * Size -> 0x0080 (FullSize[0x12F0] - InheritedSize[0x1270])
	 */
	class ABurrowSurvivalCharacter : public ASurvivalCreature
	{
	public:
		float                                                      SightEnableDelay;                                        // 0x1270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WBO7[0x4];                                   // 0x1274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPhysicalSurface, class UParticleSystem*>             BurrowSurfaceEffects;                                    // 0x1278(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UBurrowComponent*                                    BurrowComponent;                                         // 0x12C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NJLU[0x20];                                  // 0x12D0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetBurrowParticleComponent(class UParticleSystemComponent* PSC);
		void SetBurrowAudioComponent(class UAudioComponent* AudioComponent);
		void HandleBurrowStateChanged(EBurrowState BurrowState);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CalendarComponent
	 * Size -> 0x00A8 (FullSize[0x0158] - InheritedSize[0x00B0])
	 */
	class UCalendarComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_IC1U[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMinuteChanged;                                         // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHourChanged;                                           // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDayChanged;                                            // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDayNightChange;                                        // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    StartGameDay;                                            // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    StartGameHour;                                           // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    StartGameMinute;                                         // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SecondsPerMinute;                                        // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    MinutesPerHour;                                          // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    HoursPerDay;                                             // 0x0114(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    DaytimeStartHour;                                        // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    DaytimeEndHour;                                          // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NL47[0x8];                                   // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     CurrentTime;                                             // 0x0128(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZAVK[0x14];                                  // 0x0130(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GameToRealTimeRatio;                                     // 0x0144(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TimeMultiplier;                                          // 0x0148(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1XKI[0xC];                                   // 0x014C(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetTimeSpeedMultiplier(float Multiplier);
		void ServerAdvanceTime(float Seconds);
		void OnRep_CurrentTime(double PreviousValue);
		void MulticastSyncTimeOfDay(float TimeToSync);
		bool IsNightTime();
		bool IsDayTime();
		float GetTotalHour(float Day, float DayHour);
		float GetTotalGameHoursPassed();
		class FString GetTimeString();
		int32_t GetSecondsPerHour();
		int32_t GetSecondsPerDay();
		float GetNormalizedTime();
		float GetNextDayHourTotalHour(float DayHour);
		int32_t GetMinutesPerHour();
		int32_t GetMinute();
		float GetHoursUntilHour(float TargetHour);
		class FString GetHoursString(float Hours);
		int32_t GetHoursPerDay();
		float GetHourFloat();
		int32_t GetHour();
		float GetGameToRealTimeRatio();
		int32_t GetDaytimeStart();
		int32_t GetDaytimeEnd();
		int32_t GetDay();
		float GetCurrentTimeHours();
		float GetCurrentTime();
		class FString GetClockFormat(float Hours);
		void ForceSetTimeOfDay(int32_t TargetDay, int32_t TargetHour);
		class FString DeltaHoursToTimestamp(float Hours);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Switch
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ASwitch : public AActor
	{
	public:
		unsigned char                                              UnknownData_TI30[0x18];                                  // 0x0230(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLockStateChangedDelegate;                              // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnOpenStateChangedDelegate;                              // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		ESwitchMode                                                SwitchMode;                                              // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RV35[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   NumUsesRemaining;                                        // 0x026C(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOCLComponent*                                       OCLComponent;                                            // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetUsesRemaining(float UsesRemaining);
		void OnUpdateVisualState(bool IsOpen);
		void OnOpenStateChanged(bool IsOpen, class AActor* ActorInstigator);
		void OnLockStateChanged(bool IsLocked);
		void NativeOnUpdateVisualState(bool IsOpen);
		void NativeOnOpenStateChanged(bool IsOpen, class AActor* ActorInstigator);
		void NativeOnLockStateChanged(bool IsLocked);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CameraMonitorTerminal
	 * Size -> 0x0008 (FullSize[0x0290] - InheritedSize[0x0288])
	 */
	class ACameraMonitorTerminal : public ASwitch
	{
	public:
		unsigned char                                              UnknownData_0KVS[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLocalPlayerOverlappingOnBeginPlay();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CameraViewProvider
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCameraViewProvider : public UInterface
	{
	public:
		bool HasLookAtLocation();
		struct FVector GetLookAtLocation();
		struct FTransform GetCameraViewTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CDOFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCDOFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsDefaultObject(class UObject* Object);
		class UActorComponent* GetDefaultComponent(class UActorComponent* Component);
		TArray<class UActorComponent*> FindDefaultComponentsByClass(class AActor* Actor, class UClass* ComponentClass);
		class UActorComponent* FindDefaultComponentByName(class AActor* Actor, const class FName& ComponentName);
		class UActorComponent* FindDefaultComponentByClass(class AActor* Actor, class UClass* ComponentClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ChairBuilding
	 * Size -> 0x0008 (FullSize[0x0628] - InheritedSize[0x0620])
	 */
	class AChairBuilding : public ABuilding
	{
	public:
		class ASurvivalPlayerCharacter*                            SittingCharacter;                                        // 0x0620(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetupSittingCharacterTransform(const struct FTransform& Transform);
		bool IsOccupied();
		struct FTransform GetSitTargetTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CharacterAudioData
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UCharacterAudioData : public UDataAsset
	{
	public:
		TMap<struct FGameplayTag, class USoundBase*>               TaggedSounds;                                            // 0x0030(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyCharacterActor
	 * Size -> 0x0218 (FullSize[0x0310] - InheritedSize[0x00F8])
	 */
	class UProxyCharacterActor : public UProxyActor
	{
	public:
		unsigned char                                              UnknownData_3M84[0x8];                                   // 0x00F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_8RR5[0x60];                                  // 0x0100(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNavigationPath*                                     CurrentNavigationPath;                                   // 0x0160(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H8EI[0x28];                                  // 0x0168(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInterestCore*                                       InterestCore;                                            // 0x0190(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASurvivalAIController*                               ControllerCDO;                                           // 0x0198(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0GAD[0x90];                                  // 0x01A0(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGoapActionInstance                                 TargetAction;                                            // 0x0230(0x0060) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B5W0[0x38];                                  // 0x0290(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClimbableSplineKey                                 AttachedSpline;                                          // 0x02C8(0x0038) NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y7D1[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateHomeLocation();
		void OnNavigationPathUpdated(class UNavigationPath* AffectedPath, ENavPathEvent PathEvent);
		void MarkDesiredActionUnreachable(bool bObstructed);
		struct FVector GetWaveDestination();
		struct FVector GetSearchOrigin();
		struct FVector GetHomeLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CharacterLODActor
	 * Size -> 0x0080 (FullSize[0x0190] - InheritedSize[0x0110])
	 */
	class UCharacterLODActor : public UBaseLODActor
	{
	public:
		unsigned char                                              UnknownData_FADP[0x20];                                  // 0x0110(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGoapActionInstance                                 StartedAction;                                           // 0x0130(0x0060) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsSwimming();
		bool IsResting();
		bool IsMoving();
		bool IsFlying();
		class UInterestCore* GetInterestCore();
		struct FLocString GetCharacterTypeName();
		class FString GetCharacterInstanceName();
		struct FVector GetBlackboardTargetLocation();
		class AActor* GetBlackboardTargetActor();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CharacterMotionEaterComponent
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class UCharacterMotionEaterComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_0N0Y[0x4];                                   // 0x0228(0x0004) Fix Super Size
		float                                                      MaxSpeed;                                                // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEaterMoved;                                            // 0x0230(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterAttached;                                     // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterDetached;                                     // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class ASurvivalCharacter*>                          AttachedCharacters;                                      // 0x0260(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate

	public:
		void OnRep_AttachedCharacters(TArray<class ASurvivalCharacter*> PreviousCharacters);
		void HandleAttachedCharacterDestroyed(class AActor* Sender);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CharacterSelectWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UCharacterSelectWidget : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ChatBoxWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UChatBoxWidget : public UGameUserWidget
	{
	public:
		void HandleChatMessageReceived(const struct FChatBoxMessage& Message);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ClimbableSplineComponent
	 * Size -> 0x0060 (FullSize[0x05D0] - InheritedSize[0x0570])
	 */
	class UClimbableSplineComponent : public USplineComponent
	{
	public:
		struct FGameplayTagContainer                               ClimbableBy;                                             // 0x0570(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Role;                                                    // 0x0590(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FClimbableSplineAnimSegment>                 OverrideAnims;                                           // 0x0598(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UAnimMontage*                                        LadderAnim;                                              // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedMultiplier;                                     // 0x05B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RungSize;                                                // 0x05B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RungOffset;                                              // 0x05B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bLerpOnAttach : 1;                                       // 0x05BC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAllowSlidingCollision : 1;                              // 0x05BC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GC09[0x13];                                  // 0x05BD(0x0013) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Collectible
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class ACollectible : public AActor
	{
	public:
		unsigned char                                              UnknownData_K7ZB[0x18];                                  // 0x0230(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCollectableCollected;                                  // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FLocString                                          DisplayName;                                             // 0x0258(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColonyConfiguration
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UColonyConfiguration : public UDataAsset
	{
	public:
		class UCurveFloat*                                         PopulationCurve;                                         // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColonyManagerComponent
	 * Size -> 0x00C8 (FullSize[0x0178] - InheritedSize[0x00B0])
	 */
	class UColonyManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FKQO[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPredefinedColonyData>                       EditorColonyData;                                        // 0x00C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TH6L[0xA8];                                  // 0x00D0(0x00A8) MISSED OFFSET (PADDING)

	public:
		void DebugDumpColonies();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColonyMemberComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UColonyMemberComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_B1Z1[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        DefaultColony;                                           // 0x00C8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APOD[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnDeathCallback(const struct FDamageInfo& DamageInfo);
		bool IsMemberOf(const struct FColonyIdentifier& Identifier);
		struct FColonyIdentifier GetColonyIdentifier();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyColonyMemberComponent
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UProxyColonyMemberComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_XRTV[0x10];                                  // 0x0068(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsMemberOf(const struct FColonyIdentifier& ColonyId);
		struct FColonyIdentifier GetColonyIdentifier();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColonyMemberLODComponent
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UColonyMemberLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_3BFA[0x28];                                  // 0x0040(0x0028) MISSED OFFSET (PADDING)

	public:
		bool IsMemberOf(const struct FColonyIdentifier& ColonyId);
		struct FColonyIdentifier GetColonyIdentifier();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColorCollectible
	 * Size -> 0x0008 (FullSize[0x0278] - InheritedSize[0x0270])
	 */
	class AColorCollectible : public ACollectible
	{
	public:
		class UClass*                                              UnlockedTheme;                                           // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyColorCollectibleActor
	 * Size -> 0x0018 (FullSize[0x0110] - InheritedSize[0x00F8])
	 */
	class UProxyColorCollectibleActor : public UProxyActor
	{
	public:
		unsigned char                                              UnknownData_FZ74[0x8];                                   // 0x00F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_8A05[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              UnlockedTheme;                                           // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ColorCollectibleLODActor
	 * Size -> 0x0000 (FullSize[0x0110] - InheritedSize[0x0110])
	 */
	class UColorCollectibleLODActor : public UBaseLODActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CombinedLadder
	 * Size -> 0x0018 (FullSize[0x0248] - InheritedSize[0x0230])
	 */
	class ACombinedLadder : public AActor
	{
	public:
		TArray<struct FSplinePoint>                                SplinePoints;                                            // 0x0230(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class UClimbableSplineComponent*                           SplineComponent;                                         // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_SplinePoints();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CombinedMeshAssetUserData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UCombinedMeshAssetUserData : public UAssetUserData
	{
	public:
		class UStaticMesh*                                         CombinedMesh;                                            // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Conditionals
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UConditionals : public UConditionalLibrary
	{
	public:
		bool TechChipAvailableForSpeaker();
		bool IsPartySize(EComparisonOperator Operator, int32_t Size);
		bool IsOwnerTheSpeaker();
		bool IsInSpeakingRange(const struct FGuid& CharacterA, EPlayerCharacterIdentity CharacterB);
		bool IsInParty(EPlayerCharacterIdentity Character);
		bool IsAnyPartyMemberInSpeakingRange(const struct FGuid& Character);
		bool HasPartyOrPersonalUpgradeBeenCollected();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ConditionalToggleComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UConditionalToggleComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnConditionalStateChanged;                               // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConditionalStateChangedEx;                             // 0x00C0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bEnabled;                                                // 0x00D0(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YDNF[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StartHour;                                               // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EndHour;                                                 // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_448D[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGlobalVariableReferemceConditional>         GlobalVariableConditionals;                              // 0x00E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ELogicalOperator                                           ConditionalLogic;                                        // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bToggleVisibility;                                       // 0x00F1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bToggleCollision;                                        // 0x00F2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECollisionEnabled                                          DefaultCollisionType;                                    // 0x00F3(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XTX3[0xC];                                   // 0x00F4(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_Enabled();
		void OnHourChanged(int32_t NewHour, int32_t NewDay);
		void OnGlobalVariableChanged(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		bool IsEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ContextMenuEntryWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UContextMenuEntryWidget : public UGameUserWidget
	{
	public:
		class UButton*                                             Button;                                                  // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              Image;                                                   // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          LocString;                                               // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetIsValid(bool bEnabled);
		void OnSetIsValid(bool bEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ContextMenuWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UContextMenuWidget : public UGameUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnOptionSelected;                                        // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UVerticalBox*                                        ContextContainer;                                        // 0x0288(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ContextMenuClass;                                        // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetFocusFirst();
		void NotifyOptionSelected(const struct FGameplayTag& Action);
		class UContextMenuEntryWidget* AddEntry(const struct FContextEntry& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ControlOptions
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UControlOptions : public UObject
	{
	public:
		EControlSet                                                ControlSet;                                              // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I9O5[0x17];                                  // 0x0029(0x0017) MISSED OFFSET (PADDING)

	public:
		void UnbindGame();
		void SetSprintToggle(bool bNewSprintToggle);
		void SetSensitivityY(float NewSensitivity);
		void SetSensitivityX(float NewSensitivity);
		void SetSensitivity(const struct FVector2D& NewSensitivity);
		void SetInvertY(bool NewInvertY);
		void SetInvertX(bool NewInvertX);
		void SetGlideToggle(bool bNewGlideToggle);
		void SetDefaults();
		void SetCrouchToggle(bool bNewCrouchToggle);
		void Save();
		void Load();
		bool GetSprintToggle();
		struct FVector2D GetSensitivity();
		bool GetInvertY();
		bool GetInvertX();
		bool GetGlideToggle();
		bool GetCrouchToggle();
		void BindGame();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WidgetInteractComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UWidgetInteractComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ZK7U[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSingleUseInteractingActorChanged;                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              WidgetClass[0x28];                                       // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       bAllowMultipleUsers;                                     // 0x00F0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractionType                                           DefaultInteractionType;                                  // 0x00F1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bInUse : 1;                                              // 0x00F2(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UP52[0x15];                                  // 0x00F3(0x0015) MISSED OFFSET (PADDING)

	public:
		void OnInteractingActorDestroyed(class AActor* Actor);
		bool IsBusy();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ConversationComponent
	 * Size -> 0x0020 (FullSize[0x0128] - InheritedSize[0x0108])
	 */
	class UConversationComponent : public UWidgetInteractComponent
	{
	public:
		struct FConversationReference                              Conversation;                                            // 0x0108(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    StartNode;                                               // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HJNJ[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartConversation(class AActor* InstigatedBy);
		void EndConversation(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ConversationNavigatorComponent
	 * Size -> 0x0100 (FullSize[0x01B0] - InheritedSize[0x00B0])
	 */
	class UConversationNavigatorComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnConversationNodeShow;                                  // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConversationNodeHide;                                  // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConversationStart;                                     // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConversationComplete;                                  // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IM6G[0xC0];                                  // 0x00F0(0x00C0) MISSED OFFSET (PADDING)

	public:
		void StartLocalConversation(class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId);
		bool ShowConversation();
		bool ShouldQueue(const struct FGuid& ConversationID, EConversationPlayPriority Priority);
		bool ShouldInterrupt(const struct FGuid& ConversationID, EConversationPlayPriority Priority);
		void ServerStartConversation(class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationPlayPriority Priority, EConversationNodeDisplayStyle DisplayStyle);
		void ServerSelectPlayerResponse(class AActor* Owner, int32_t ResponseNodeID);
		void ServerEndPlayerDrivenConversation(class AActor* Owner);
		void ServerEndConversation(const struct FGuid& ConversationID);
		void ServerAdvancePlayerDrivenConversation(class AActor* Owner);
		void ServerAdvanceConversation(const struct FGuid& ConversationID);
		void ServerAbortConversations();
		void RemovePlayerDrivenConversation(class AActor* Owner);
		void QueueConversation(class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationPlayPriority Priority, EConversationNodeDisplayStyle DisplayStyle);
		void MulticastStartConversation(EConversationNodeDisplayStyle DisplayStyle);
		void MulticastPlayChatterNode(class ASurvivalCharacter* OwnerActor, int32_t NodeId);
		void MulticastEndConversation(const struct FGuid& ConversationID);
		void MulticastAdvanceConversation(class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationNodeDisplayStyle DisplayStyle);
		bool IsPlayerDrivenNode(EConversationNodeDisplayStyle DisplayStyle, const struct FGuid& ConversationNavigatorID);
		bool IsPlayerDrivenConversation(EConversationNodeDisplayStyle DisplayStyle);
		TArray<struct FConversationPlayData> GetConversationQueue();
		void EndConversation(const struct FGuid& ConversationID, bool bViaStartNewConversation);
		void AdvanceConversation(class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationNodeDisplayStyle DisplayStyle);
		void AddPlayerDrivenConversation(const struct FActiveConversationData& Convo);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InteractionWidget
	 * Size -> 0x0030 (FullSize[0x02D8] - InheritedSize[0x02A8])
	 */
	class UInteractionWidget : public UWindowWidget
	{
	public:
		class FScriptMulticastDelegate                             OnInitializeDelegate;                                    // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClose;                                                 // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bCloseOnInteract;                                        // 0x02C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V95S[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              InteractableActor;                                       // 0x02D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void HandleInitialize(class AActor* TargetActor);
		class AActor* GetInteractableActor();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ConversationWidget
	 * Size -> 0x0010 (FullSize[0x02E8] - InheritedSize[0x02D8])
	 */
	class UConversationWidget : public UInteractionWidget
	{
	public:
		struct FGuid                                               ConversationID;                                          // 0x02D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SelectPlayerResponse(int32_t ResponseIndex);
		TArray<struct FPlayerResponseData> GetPlayerResponses();
		void EndConversation();
		void ContinueConversation();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CozinessEvaluatorComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UCozinessEvaluatorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JSOA[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCozinessLevelChanged;                                  // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCozinessValueChanged;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OYX2[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CozinessValue;                                           // 0x00E8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    StructuralValue;                                         // 0x00EC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_StructuralValue(int32_t OldValue);
		void OnRep_CozinessValue(int32_t OldValue);
		int32_t GetCozinessValue();
		int32_t GetCozinessLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WidgetBuilding
	 * Size -> 0x0008 (FullSize[0x0628] - InheritedSize[0x0620])
	 */
	class AWidgetBuilding : public ABuilding
	{
	public:
		class UWidgetInteractComponent*                            WidgetInteractionComponent;                              // 0x0620(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CozinessSamplerBuilding
	 * Size -> 0x0008 (FullSize[0x0630] - InheritedSize[0x0628])
	 */
	class ACozinessSamplerBuilding : public AWidgetBuilding
	{
	public:
		class UCozinessEvaluatorComponent*                         CozinessEvaluatorComponent;                              // 0x0628(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void K2_HandleCozinessValueChanged(int32_t OldValue, int32_t NewValue);
		void K2_HandleCozinessLevelChanged(int32_t OldLevel, int32_t NewLevel);
		void HandleCozinessValueChanged(class UCozinessEvaluatorComponent* Sender, int32_t OldValue);
		void HandleCozinessLevelChanged(class UCozinessEvaluatorComponent* Sender, int32_t OldLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CraftingBuilding
	 * Size -> 0x0008 (FullSize[0x0630] - InheritedSize[0x0628])
	 */
	class ACraftingBuilding : public AWidgetBuilding
	{
	public:
		struct FGameplayTag                                        CraftingBuildingTag;                                     // 0x0628(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FGameplayTag GetCraftingBuildingType();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CraftingInterfaceWidget
	 * Size -> 0x00E0 (FullSize[0x0358] - InheritedSize[0x0278])
	 */
	class UCraftingInterfaceWidget : public UGameUserWidget
	{
	public:
		class UUserWidget*                                         WorkbenchTab;                                            // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         ModelViewer;                                             // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         CraftingRequirements;                                    // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      WarningContainer;                                        // 0x0290(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 CraftEquip;                                              // 0x0298(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 Craft;                                                   // 0x02A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 CraftMany;                                               // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 PlaceBlueprint;                                          // 0x02B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 HotCraft;                                                // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 HotCraftMany;                                            // 0x02C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 JumpToEntry;                                             // 0x02C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          ItemCount;                                               // 0x02D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameUserWidget*                                     ItemDescriptionBox;                                      // 0x02D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameUserWidget*                                     KnownRecipesUsedIn;                                      // 0x02E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              DangerLoopImage;                                         // 0x02E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          CraftingRecipes;                                         // 0x02F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedCraftingRecipe;                                  // 0x02F8(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedBuildingRecipe;                                  // 0x0308(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedResource;                                        // 0x0318(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedCraftingRequirement;                             // 0x0328(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedKnownRecipeUsedIn;                               // 0x0338(0x0010) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        CraftingBuildingType;                                    // 0x0348(0x0008) BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VMEB[0x8];                                   // 0x0350(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSelectionChanged();
		void OnPageOpened();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CreateLobbyWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UCreateLobbyWidget : public UWindowWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyCreatureActor
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class UProxyCreatureActor : public UProxyCharacterActor
	{
	public:
		unsigned char                                              UnknownData_0K3V[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTamedCreatureData*                                  TameData;                                                // 0x0318(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CreatureLODActor
	 * Size -> 0x0018 (FullSize[0x01A8] - InheritedSize[0x0190])
	 */
	class UCreatureLODActor : public UCharacterLODActor
	{
	public:
		unsigned char                                              UnknownData_QPBV[0x8];                                   // 0x0190(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTameStateChanged;                                      // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool IsTame();
		void HandleVitalChanged(class UInterestCore* Sender, class UVitalStat* Stat);
		void HandleTameStateChanged(class UTamedCreatureData* Sender, ETamedState NewState);
		void HandleSelfDeath(const struct FDamageInfo& DamageInfo);
		ETamedState GetTamedState();
		class UTamedCreatureData* GetTamedCreatureData();
		float GetHappinessNormalized();
		TArray<struct FDataTableRowHandle> GetActivePetPassiveEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CreditsData
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UCreditsData : public UDataAsset
	{
	public:
		TArray<struct FCreditsGroup>                               CreditGroups;                                            // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FSlateBrush>                    CreditsBrushes;                                          // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class FName                                                StringTableName;                                         // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCreditsFormattingData*                              CreditsFormattingData;                                   // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CreditsFormattingData
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UCreditsFormattingData : public UDataAsset
	{
	public:
		TArray<class UClass*>                                      TextHeaderLevels;                                        // 0x0030(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    ImageSpacing;                                            // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InitialSpacing;                                          // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PostSpacing;                                             // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MF0N[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CreditsWidget
	 * Size -> 0x0080 (FullSize[0x0328] - InheritedSize[0x02A8])
	 */
	class UCreditsWidget : public UWindowWidget
	{
	public:
		class FScriptMulticastDelegate                             CreditsClosedDelegate;                                   // 0x02A8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                CancelAction;                                            // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AccelerateAction;                                        // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScrollSpeed;                                             // 0x02C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceleratedScrollSpeed;                                  // 0x02CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WidgetsPerSecond;                                        // 0x02D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0KOL[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCreditsData*                                        CreditsAsset;                                            // 0x02D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScrollBox*                                          CreditsScrollBox;                                        // 0x02E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        CreditsVerticalBox;                                      // 0x02E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGlobalVariableReference                            CreditsMusicGlobalVariable;                              // 0x02F0(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OnCreditsStartGlobalVariableValue;                       // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OnCreditsSkippedGlobalVariableValue;                     // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OnCreditsEndedGlobalVariableValue;                       // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BF7V[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCreditsData*                                        CreditsAssetToUse;                                       // 0x0310(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9RO[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (PADDING)

	public:
		void StopCredits(bool bForced);
		void StartCredits();
		void OnCreditsStarted();
		void OnCreditsEnded();
		bool IsPlaying();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CustomizeInteractionComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UCustomizeInteractionComponent : public UActorComponent
	{
	public:
		class UClass*                                              WidgetClass;                                             // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X72Q[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void ShowCustomizationUI(class UCustomPropertyComponent* CustomPropertyComponent);
		void ServerSetCustomPropertyComponentInUse(class UCustomPropertyComponent* Component, bool InUse);
		void ServerOnCustomPropertyComponentChanged(class UCustomPropertyComponent* CustomPropertyComponent, const class FName& PropertyName, float PropertyValue);
		void OnCustomizeUIClosed(class AActor* InteractableActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CustomPropertiesWindowWidget
	 * Size -> 0x0030 (FullSize[0x0308] - InheritedSize[0x02D8])
	 */
	class UCustomPropertiesWindowWidget : public UInteractionWidget
	{
	public:
		class UCanvasPanel*                                        Container;                                               // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox*                                        SettingsBox;                                             // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CustomPropertyWidgetClass;                               // 0x02E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCustomPropertyChanged;                                 // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       MouseDownInWidget;                                       // 0x0300(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B3XL[0x7];                                   // 0x0301(0x0007) MISSED OFFSET (PADDING)

	public:
		void ResetToDefaults();
		void OnInputChanged(const class FName& PropertyName, float PropertyValue);
		class UCustomPropertyWidget* GetWidgetForProperty(const class FName& Property);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CustomPropertyComponent
	 * Size -> 0x00E0 (FullSize[0x0190] - InheritedSize[0x00B0])
	 */
	class UCustomPropertyComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_T1VZ[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhotoModePoseData*                                  CustomizationPoseSet;                                    // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasCustomLookAtLocation;                                 // 0x00D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZ79[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CustomLookAtLocationWS;                                  // 0x00D4(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCustomPropertyValueChanged;                            // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnUserInterfaceInitialized;                              // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnIsCustomizingChanged;                                  // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UCustomPropertyDataAsset*                            CustomPropertyData;                                      // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCustomizedValue>                            CustomizedValuesArray;                                   // 0x0118(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       IsInUse;                                                 // 0x0128(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OWJE[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DesiredCameraDistance;                                   // 0x012C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceptableCameraDistance;                                // 0x0130(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredCameraAngleVertical;                              // 0x0134(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraCollisionInsetDistance;                            // 0x0138(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R6YY[0x54];                                  // 0x013C(0x0054) MISSED OFFSET (PADDING)

	public:
		void SetIsInUse(bool InUse);
		void SetCustomPropertyValue(const class FName& PropertyName, float Value);
		void OnUIReady(class UCustomPropertiesWindowWidget* Widget);
		void OnRep_CustomizedValuesArray(TArray<struct FCustomizedValue> PreviousCustomizedValuesArray);
		bool NeedsManualValueTextUpdates();
		void NativeOnPropertyChanged(const class FName& PropertyName, float PropertyValue);
		bool IsPropertyCustomized(const class FName& Property);
		bool HasCustomProperties();
		bool GetIsInUse();
		void GetCustomPropertyValue(const class FName& PropertyName, float* AsFloat, int32_t* AsInt, bool* AsBool);
		struct FVector GetCameraInterestLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CustomPropertyDataAsset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UCustomPropertyDataAsset : public UDataAsset
	{
	public:
		TArray<struct FCustomProperty>                             CustomProperties;                                        // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CustomPropertyWidget
	 * Size -> 0x00A0 (FullSize[0x0308] - InheritedSize[0x0268])
	 */
	class UCustomPropertyWidget : public UUserWidget
	{
	public:
		class UOverlay*                                            Overlay;                                                 // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorizontalBox*                                      Container;                                               // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhotoModeTextBlock*                                 SettingTitleText;                                        // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhotoModeSliderBase*                                Slider;                                                  // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USizeBox*                                            CheckBoxSizeBox;                                         // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhotoModeCheckBoxBase*                              CheckBox;                                                // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhotoModeComboBoxBase*                              ComboBox;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          ValueText;                                               // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCustomProperty                                     CachedPropertyInfo;                                      // 0x02A8(0x0040) NativeAccessSpecifierPublic
		int32_t                                                    MaximumIntegralDigits;                                   // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaximumFractionalDigits;                                 // 0x02EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ODX3[0x18];                                  // 0x02F0(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetInputStyles(ECustomPropertyInputType InputType);
		void SetEnabledState(bool Enabled);
		void SetComboBoxOptions(TArray<struct FLocString> InOptions);
		void ResetToDefaults();
		void OnSliderValueChanged(float Value);
		void OnSettingChangedSlider(float Value);
		void OnSettingChangedComboBox(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnSettingChangedCheckBox(bool bChecked);
		void OnEnabledChanged(bool Enabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ActiveCutscene
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UActiveCutscene : public UObject
	{
	public:
		unsigned char                                              UnknownData_7DDK[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnLevelSequenceFinished();
		void OnInitialCameraCut(class UCameraComponent* CameraComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CutsceneComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UCutsceneComponent : public UActorComponent
	{
	public:
		TArray<class UActiveCutscene*>                             ActiveCutscenes;                                         // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PCGO[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartCutscene(class UCutsceneDataAsset* CutsceneData, class AActor* TriggerActor);
		void MulticastStartCutscene(class UCutsceneDataAsset* CutsceneData, class AActor* TriggerActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.CutsceneDataAsset
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UCutsceneDataAsset : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     LevelSequencePath;                                       // 0x0030(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECutsceneTargetType                                        TargetType;                                              // 0x0048(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bProvideInitialFOV;                                      // 0x0049(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GJI4[0x2];                                   // 0x004A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialFOV;                                              // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DamageInfoBlueprintFunction
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDamageInfoBlueprintFunction : public UBlueprintFunctionLibrary
	{
	public:
		class UBaseLODActor* GetLODActorDamageSource(const struct FDamageInfo& DamageInfo);
		void GetDeathMessage(class APlayerState* OwnerPlayerState, const struct FDeathInfo& DeathInfo, class FString* OutText, bool bForceDeathMessage);
		class AActor* GetActorDamageSource(const struct FDamageInfo& DamageInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DamageSwitch
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ADamageSwitch : public AActor
	{
	public:
		unsigned char                                              UnknownData_W5LG[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSwitchStateChanged;                                    // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSwitchStateRestored;                                   // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    CurrentState;                                            // 0x0260(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumStates;                                               // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitCooldown;                                             // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TDET[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponent*                                    HealthComponent;                                         // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetCurrentState(int32_t NewState);
		void OnRep_CurrentState();
		void OnDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		int32_t GetCurrentState();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DeathCountdownWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class UDeathCountdownWidget : public UGameUserWidget
	{
	public:
		float                                                      RenarrateInterval;                                       // 0x0278(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IY19[0xC];                                   // 0x027C(0x000C) MISSED OFFSET (PADDING)

	public:
		void NotifyElementDeactivated();
		void NotifyElementActivated();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DefenseScalingData
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UDefenseScalingData : public UDataAsset
	{
	public:
		TArray<float>                                              MaxHealthMultipliers;                                    // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              MaxStunMultipliers;                                      // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              StunDurationMultipliers;                                 // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              DamageResistanceMultipliers;                             // 0x0060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		float GetStunDurationMultiplier(int32_t PlayerCount);
		float GetMaxStunMultiplier(int32_t PlayerCount);
		float GetMaxHealthMultiplier(int32_t PlayerCount);
		float GetDamageResistanceMultiplier(int32_t PlayerCount);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DirectionalAnimEffect
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UDirectionalAnimEffect : public UBaseAnimEffect
	{
	public:
		TMap<EHitMotionType, class UAnimMontage*>                  DirectionalAnims;                                        // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      AngleThreshold;                                          // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9EFZ[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DivingSpiderNest
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ADivingSpiderNest : public AStaticMeshActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Door
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ADoor : public AActor
	{
	public:
		unsigned char                                              UnknownData_Y5XE[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLockStateChangedDelegate;                              // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnOpenStateChangedDelegate;                              // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UOCLComponent*                                       OCLComponent;                                            // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTimelineComponent*                                  TimelineComponent;                                       // 0x0270(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthComponent;                                         // 0x0278(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerminalSwitchListener*                             TerminalSwitchListener;                                  // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnUpdateVisualState(bool IsOpen);
		void OnTimelineCoreEvent(int32_t Event);
		void OnOpenStateChanged(bool IsOpen, class AActor* ActorInstigator);
		void OnLockStateChanged(bool IsLocked);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void NativeOnUpdateVisualState(bool IsOpen);
		void NativeOnOpenStateChanged(bool IsOpen, class AActor* ActorInstigator);
		void NativeOnLockStateChanged(bool IsLocked);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.DropletContentsComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UDropletContentsComponent : public UActorComponent
	{
	public:
		bool                                                       bOverrideVolume;                                         // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4KNX[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Volume;                                                  // 0x00B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideMaxDimension;                                   // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JJ6C[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDimension;                                            // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbsorbedByDroplet;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEjectedFromDroplet;                                    // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EggComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UEggComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_MPFQ[0x20];                                  // 0x00B0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyEggComponent
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UProxyEggComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_4O3K[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EggLODComponent
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UEggLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_WBQP[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Encounter
	 * Size -> 0x00B8 (FullSize[0x02E8] - InheritedSize[0x0230])
	 */
	class AEncounter : public AActor
	{
	public:
		unsigned char                                              UnknownData_36O1[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEncounterSpawnKilled;                                  // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEncounterComplete;                                     // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QNKI[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawnData>                                  SpawnList;                                               // 0x0270(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FGlobalVariableReferemceConditional                 GlobalVariableConditional;                               // 0x0280(0x0018) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VWRC[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       StartActivated;                                          // 0x02A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SpawnRandomlyInRadius;                                   // 0x02A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnOnNavMesh;                                         // 0x02AA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9P73[0x1];                                   // 0x02AB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Radius;                                                  // 0x02AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RespawnTime;                                             // 0x02B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_STAL[0x8];                                   // 0x02B4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayerSpawnDistance;                                     // 0x02BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerDistanceCheckInterval;                             // 0x02C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OXSE[0x3];                                   // 0x02C4(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bResetSpawnLocationsOnLoad;                              // 0x02C7(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBillboardComponent*                                 SpriteComponent;                                         // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDrawSphereComponent*                                SphereComponent;                                         // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x02D8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x02E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Spawn(bool bForceSpawn);
		void OnSpawnKilled(const struct FDamageInfo& DamageInfo);
		void OnGlobalVariableChanged(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* ActionInstigator);
		bool IsComplete();
		void Despawn(bool bImmediate);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EncounterComponent
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class UEncounterComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_US7X[0x8];                                   // 0x0228(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryContext_QuerierLocation
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UEnvQueryContext_QuerierLocation : public UEnvQueryContext
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryGenerator_FoliageKeys
	 * Size -> 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
	 */
	class UEnvQueryGenerator_FoliageKeys : public UEnvQueryGenerator
	{
	public:
		struct FAIDataProviderFloatValue                           SearchRadius;                                            // 0x0050(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UClass*                                              SearchCenter;                                            // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryGenerator_Sphere
	 * Size -> 0x0120 (FullSize[0x01A0] - InheritedSize[0x0080])
	 */
	class UEnvQueryGenerator_Sphere : public UEnvQueryGenerator_ProjectedPoints
	{
	public:
		struct FAIDataProviderFloatValue                           InnerRadius;                                             // 0x0080(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderFloatValue                           OuterRadius;                                             // 0x00B8(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderIntValue                             NumberOfRings;                                           // 0x00F0(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderIntValue                             PointsPerRing;                                           // 0x0128(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderFloatValue                           ArcAngle;                                                // 0x0160(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UClass*                                              Center;                                                  // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryItemType_FoliageKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UEnvQueryItemType_FoliageKey : public UEnvQueryItemType_VectorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_AllowableHeight
	 * Size -> 0x0000 (FullSize[0x01F8] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_AllowableHeight : public UEnvQueryTest
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_BaseDistance
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_BaseDistance : public UEnvQueryTest
	{
	public:
		bool                                                       bCheckWaveTargetBase;                                    // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9ILX[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_Height
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_Height : public UEnvQueryTest
	{
	public:
		class UClass*                                              DistanceTo;                                              // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_IsClimbable
	 * Size -> 0x0030 (FullSize[0x0228] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_IsClimbable : public UEnvQueryTest
	{
	public:
		struct FAIDataProviderStructValue                          ClimbingSizeProvider;                                    // 0x01F8(0x0030) Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_IsClimbingRole
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_IsClimbingRole : public UEnvQueryTest
	{
	public:
		struct FGameplayTag                                        Role;                                                    // 0x01F8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EnvQueryTest_PartyDistance
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_PartyDistance : public UEnvQueryTest
	{
	public:
		EPartyDistanceType                                         TestMode;                                                // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YTIA[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EQSRequest
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UEQSRequest : public UDataAsset
	{
	public:
		class UEnvQuery*                                           QueryTemplate;                                           // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAIDynamicParam_Maine>                       QueryConfig;                                             // 0x0038(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		EEnvQueryRunMode                                           RunMode;                                                 // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_INET[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EquipmentComponent
	 * Size -> 0x0268 (FullSize[0x0318] - InheritedSize[0x00B0])
	 */
	class UEquipmentComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_YG54[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEquipmentChanged;                                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEquipmentItemChanged;                                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEquipmentActorSpawned;                                 // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemBroken;                                            // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemPowerChanged;                                      // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemPowerDepleted;                                     // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEquipmentChangeFailureFromFullInventory;               // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QBAY[0x78];                                  // 0x0148(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bHasMainHand : 1;                                        // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasOffHand : 1;                                         // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasHead : 1;                                            // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasChest : 1;                                           // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasArms : 1;                                            // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasLegs : 1;                                            // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasGlider : 1;                                          // 0x01C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0HB0[0x7];                                   // 0x01C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItem*                                               MainHand;                                                // 0x01C8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               OffHand;                                                 // 0x01D0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               Head;                                                    // 0x01D8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               Chest;                                                   // 0x01E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               Arms;                                                    // 0x01E8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               Legs;                                                    // 0x01F0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               Glider;                                                  // 0x01F8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               PreviousMainHandItem;                                    // 0x0200(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UItem*                                               PreviousOffHandItem;                                     // 0x0208(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASurvivalCharacter*                                  OwnerCharacter;                                          // 0x0210(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x0218(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UHaulingComponent*                                   HaulingComponent;                                        // 0x0220(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IT6D[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemDataPreloadAssets                              MainHandPreloader;                                       // 0x0238(0x0048) Transient, NativeAccessSpecifierPrivate
		struct FItemDataPreloadAssets                              ChestPreloader;                                          // 0x0280(0x0048) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LXLK[0x50];                                  // 0x02C8(0x0050) MISSED OFFSET (PADDING)

	public:
		void SpawnVisuals(class UItem* Item, const class FName& Socket, EItemVisualsPriority Priority);
		void ServerUnequipItemSlot(EEquipmentSlot Slot, bool ReaddToInventory, int32_t TargetInventorySlot);
		void ServerUnequipItem(class UItem* Equippable, bool ReaddToInventory, int32_t TargetInventorySlot);
		void ServerRemoveItem(class UItem* Item, int32_t Count);
		void ServerEquipPreviousMainHand();
		void ServerEquipItemToSlot(class UItem* Equippable, EEquipmentSlot Slot);
		void ServerEquipItem(class UItem* Equippable);
		void ServerDumpItem(class UItem* Item);
		void ServerDropItem(class UItem* Item, int32_t Count);
		void ServerDisarmWeapon();
		void ServerCreateAndEquipItemData(const struct FDataTableRowHandle& RowData);
		void OnUnderwaterChanged(bool IsUnderwater);
		void OnRep_OffHand(class UItem* LastEquippable);
		void OnRep_MainHand(class UItem* LastEquippable);
		void OnRep_Legs(class UItem* LastEquippable);
		void OnRep_Head(class UItem* LastEquippable);
		void OnRep_Glider(class UItem* LastEquippable);
		void OnRep_Chest(class UItem* LastEquippable);
		void OnRep_Arms(class UItem* LastEquippable);
		void OnItemChanged();
		void OnHaulEnd(class UHaulingComponent* Sender);
		void OnHaulBegin(class UHaulingComponent* Sender);
		void OnCameraModeChanged(ECameraDisplayMode DisplayMode);
		class UItem* LocalUnequipItemInSlot(EEquipmentSlot Slot, bool ReaddToInventory, int32_t TargetInventorySlot, class UInventoryComponent* ToFromInventory);
		class UItem* LocalUnequipItem(class UItem* Equippable, bool ReaddToInventory, int32_t TargetInventorySlot, class UInventoryComponent* ToFromInventory);
		void LocalEquipItemToSlot(class UItem* Equippable, EEquipmentSlot Slot, class UInventoryComponent* ToFromInventory);
		bool IsItemRowHandleEquipped(const struct FDataTableRowHandle& ItemRowHandle);
		bool IsItemEquipped(class UItem* Item);
		bool HasSlot(EEquipmentSlot Slot);
		bool HasAnyItemEquipped();
		class UItem* GetWeapon();
		int32_t GetStance();
		class UItem* GetPreviousItemInSlot(EEquipmentSlot Slot);
		int32_t GetOffhandStance();
		EEquipmentSlot GetItemSlot(class UItem* Item);
		class UItem* GetItemInSlot(EEquipmentSlot Slot);
		int32_t GetItemCount(const struct FDataTableRowHandle& ItemRowHandle);
		TArray<EEquipmentSlot> GetEquipmentSlots();
		float GetAverageEquippedTier();
		struct FItemSetData GetActiveItemSet();
		bool EquipItemData(const struct FDataTableRowHandle& RowData);
		bool DestroyVisuals(class UItem* Item);
		void ClientNotifyItemPowerDepleted(class UItem* Item);
		void ClientNotifyItemPowerChanged(class UItem* Item);
		void ClientNotifyItemBroken(class UItem* Item, bool ItemDroppedInWorld);
		void ClientNotifyEquipmentChangeFailureFromFullInventory(EEquipmentChangeFailureFromFullInventoryStimulus FailureStimulus);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EquipmentDisplayBuilding
	 * Size -> 0x0020 (FullSize[0x0648] - InheritedSize[0x0628])
	 */
	class AEquipmentDisplayBuilding : public AWidgetBuilding
	{
	public:
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x0628(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEquipmentComponent*                                 EquipmentComponent;                                      // 0x0630(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EEquipmentSlot>                                     ValidEquipmentSlots;                                     // 0x0638(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		bool IsValidItem(class UItem* Item);
		bool IsValidEquipmentSlot(EEquipmentSlot Slot);
		class UMeshComponent* GetEquipmentMeshComponent();
		class USkeletalMeshComponent* GetArmorMeshComponent(EEquipmentSlot Slot);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyEquipmentComponent
	 * Size -> 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
	 */
	class UProxyEquipmentComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_GXDE[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       EquippedItems;                                           // 0x0070(0x0010) ZeroConstructor, NativeAccessSpecifierPublic

	public:
		bool HasSlot(EEquipmentSlot Slot);
		class UItem* GetItemInSlot(EEquipmentSlot Slot);
		TArray<EEquipmentSlot> GetEquipmentSlots();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EquipmentLODComponent
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class UEquipmentLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_3CGE[0x38];                                  // 0x0040(0x0038) MISSED OFFSET (PADDING)

	public:
		bool HasSlot(EEquipmentSlot Slot);
		class UItem* GetItemInSlot(EEquipmentSlot Slot);
		TArray<EEquipmentSlot> GetEquipmentSlots();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.EventAttackComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UEventAttackComponent : public UActorComponent
	{
	public:
		TArray<struct FDataTableRowHandle>                         StatusEffects;                                           // 0x00B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         AttacksToCheck;                                          // 0x00C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EDamageEventComponentType                                  DamageEventType;                                         // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJJZ[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthToLoseForApplyingEffect;                           // 0x00D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YASO[0x20];                                  // 0x00D8(0x0020) MISSED OFFSET (PADDING)

	public:
		void ResetValues();
		void OnDamagedCharacter(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnAttack(class UAttack* Attack);
		void EndAttack(class UAttack* Attack);
		void ApplyEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Fabricator
	 * Size -> 0x00A0 (FullSize[0x06C0] - InheritedSize[0x0620])
	 */
	class AFabricator : public ABuilding
	{
	public:
		unsigned char                                              UnknownData_ICEV[0x38];                                  // 0x0620(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFabricationStateChanged;                               // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFabricationProgress;                                   // 0x0668(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 FabricationRecipe;                                       // 0x0678(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T5U2[0x18];                                  // 0x0688(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       FabricationItems;                                        // 0x06A0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      ProcessingTime;                                          // 0x06B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JFB4[0x4];                                   // 0x06B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OperableHealthThreshold;                                 // 0x06B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFabricationState                                          FabricationState;                                        // 0x06BC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0IDZ[0x3];                                   // 0x06BD(0x0003) MISSED OFFSET (PADDING)

	public:
		void TickProcessing(float DeltaTime);
		void OnRep_FabricationState();
		void OnRep_FabricationItems();
		void OnHealthChanged(class UHealthComponent* SourceHealthComponent, float NewHealth, float OldHealth);
		TArray<struct FRecipeRequirements> GetRemainingFabricationRequirements();
		float GetProcessingTimePercentage();
		EFabricationState GetFabricationState();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FaucetBuilding
	 * Size -> 0x0008 (FullSize[0x0628] - InheritedSize[0x0620])
	 */
	class AFaucetBuilding : public ABuilding
	{
	public:
		class UFaucetSpawnerComponent*                             FaucetSpawnerComponent;                                  // 0x0620(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FaucetSpawnerComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UFaucetSpawnerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_2LVK[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFaucetItemSpawnData                                SpawnData;                                               // 0x00B8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		class UTrackedItemSpawnGroup*                              TrackedGroup;                                            // 0x00E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DON6[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		class UBaseLODActor* Spawn(const struct FItemSpawnPointData& SpawnPoint);
		void GetSpawnPoints(TArray<struct FItemSpawnPointData>* SpawnPoints);
		class UClass* GetItemSpawnGroupData();
		bool DoesSpawnActors();
		void Despawn(const struct FItemSpawnPointData& SpawnPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FluidVolume
	 * Size -> 0x02B8 (FullSize[0x04E8] - InheritedSize[0x0230])
	 */
	class AFluidVolume : public AActor
	{
	public:
		class UStaticMeshComponent*                                NativeWaterPlane;                                        // 0x0230(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                NativeDepthImpostor;                                     // 0x0238(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     NativePostProcessAnchor;                                 // 0x0240(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       NativePostProcessBox;                                    // 0x0248(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPostProcessComponent*                               NativePostProcessUnderWater;                             // 0x0250(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       NativeCollider;                                          // 0x0258(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       NativeColliderCamera;                                    // 0x0260(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SU1Q[0x70];                                  // 0x0268(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NativeTickBoundsPadding;                                 // 0x02D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NativeSetFootstepsInShallowWater;                        // 0x02DC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VF4O[0x3];                                   // 0x02DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NativeActivationRange;                                   // 0x02E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NativeOpacityFadeDistance;                               // 0x02E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NativeEnableDepthImpostor;                               // 0x02E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GDQN[0x3];                                   // 0x02E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             NativeDepthImpostorOffset;                               // 0x02EC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             NativeDepthImpostorScale;                                // 0x02F8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NativeDepthLimitOffsetScale;                             // 0x0304(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PebbleClass;                                             // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NativeMaxRippleCount;                                    // 0x0310(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NativeNumRipples;                                        // 0x0314(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NativeFadeSpeed;                                         // 0x0318(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NativeRippleSpeed;                                       // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialParameterCollection*                        NativeRTGlobalData;                                      // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  NativeRippleAddMaterial;                                 // 0x0328(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextureRenderTarget2D*                              NativeOutputRT;                                          // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextureRenderTarget2D*                              NativeWaterRT;                                           // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RippleUVBoundary;                                        // 0x0340(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZX5F[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     NativeSplashVFX;                                         // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NativeAllowTick;                                         // 0x0350(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W1JR[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNativeRippleEvent>                          NativeRipples;                                           // 0x0358(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            RippleAddMID;                                            // 0x0368(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RippleRandomTickMin;                                     // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RippleRandomTickMax;                                     // 0x0374(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterZ;                                                  // 0x0378(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22WW[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ALandscapeRTManager*                                 RTManager;                                               // 0x0380(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              NativeInitialOverlappingActors[0x50];                    // 0x0388(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              NativeActorsToConsider[0x50];                            // 0x03D8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              NativeActorsToRemove[0x50];                              // 0x0428(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              NativeOverlappingActors[0x50];                           // 0x0478(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class AActor*>                                      AssociatedTickActors;                                    // 0x04C8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       GotAssociatedTickActors;                                 // 0x04D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5J5H[0xF];                                   // 0x04D9(0x000F) MISSED OFFSET (PADDING)

	public:
		void TickMaintainActorList(float DeltaTime);
		void TickCreateRipples(float DeltaTime);
		void SpawnSplashVFX(class AActor* Actor, bool IsOverlapEvent);
		void SetupNativeReferences();
		void SetTickEnabled(bool Enabled);
		void OnPhotoModeExit();
		void OnPhotoModeEntered(class APhotoPawn* PhotoPawn);
		void OnColliderOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnColliderOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnCameraColliderOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnCameraColliderOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void NativeToggleDepthImpostorVisibility();
		bool NativeQualifyActor(class AActor* ActorToCheck);
		void NativeModifyRipple();
		void NativeMaintainActorList();
		bool NativeIsLocalPlayerInTickRange();
		void NativeInitDepthImpostor();
		void NativeDrawAtLocation(const struct FNativeRippleEvent& RippleEvent);
		void NativeCreateRippleEvents(bool bIsOverlapEvent);
		void NativeCreateOverlapRipple();
		bool IsCameraInVolume(bool XYOnly);
		bool IsActorNearWaterSurface(class AActor* Actor);
		void GetInitialOverlaps();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FlySwimSurvivalCharacter
	 * Size -> 0x10D0 (FullSize[0x2340] - InheritedSize[0x1270])
	 */
	class AFlySwimSurvivalCharacter : public ASurvivalCreature
	{
	public:
		float                                                      AcceptableDistanceToWaypoint;                            // 0x1270(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationInterpSlowDist;                                  // 0x1274(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollSpeed;                                               // 0x1278(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollStrength;                                            // 0x127C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxPitch;                                                // 0x1280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWiggleEnabled;                                          // 0x1284(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E1WI[0x3];                                   // 0x1285(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InMotionWiggleAmplitude;                                 // 0x1288(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IdleWiggleAmplitude;                                     // 0x128C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreferredElevation;                                      // 0x1290(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAllowStrafe : 1;                                        // 0x1294(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bPhysicsOnDeath : 1;                                     // 0x1294(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OS8U[0x3];                                   // 0x1295(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DerpFactor;                                              // 0x1298(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TakeoffLaunchVelocity;                                   // 0x129C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            CurrentRotation;                                         // 0x12A0(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NU0N[0x1C];                                  // 0x12AC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bPseudoLargePawn : 1;                                    // 0x12C8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bDoRecoil : 1;                                           // 0x12C8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9G33[0x17];                                  // 0x12C9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bShowGoalLocation : 1;                                   // 0x12E0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FUE2[0x1023];                                // 0x12E1(0x1023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BaseSeed;                                                // 0x2304(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OK70[0x38];                                  // 0x2308(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnRep_BaseSeed();
		void InterpolateRotationTo(const struct FRotator& InTargetRotation, float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FlyingSurvivalCharacter
	 * Size -> 0x0000 (FullSize[0x2340] - InheritedSize[0x2340])
	 */
	class AFlyingSurvivalCharacter : public AFlySwimSurvivalCharacter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FocusRerouteWidget
	 * Size -> 0x0028 (FullSize[0x0290] - InheritedSize[0x0268])
	 */
	class UFocusRerouteWidget : public UUserWidget
	{
	public:
		TArray<class UWidget*>                                     ReroutePriorityList;                                     // 0x0268(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UWidget*>                                     DisallowFocusFromList;                                   // 0x0278(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		EFocusRerouterChildIterationStyle                          ChildInterationStyle;                                    // 0x0288(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KVL3[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FoliageDisplacerComponent
	 * Size -> 0x00D8 (FullSize[0x0300] - InheritedSize[0x0228])
	 */
	class UFoliageDisplacerComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_DPPS[0x4];                                   // 0x0228(0x0004) Fix Super Size
		float                                                      RegisterRadius;                                          // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VelocityCompensationMultiplier;                          // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVelocityCompensation;                                 // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedAudioSmoothingSpeed;                                // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyAudioSmoothingSpeed;                               // 0x023C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFoliageSwapLevel                                          SwapLevel;                                               // 0x0240(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RDVJ[0xBF];                                  // 0x0241(0x00BF) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FoliageManager
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class AFoliageManager : public AInfo
	{
	public:
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FoliageManagerComponent
	 * Size -> 0x0410 (FullSize[0x04C0] - InheritedSize[0x00B0])
	 */
	class UFoliageManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_X34V[0xE0];                                  // 0x00B0(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicatedFoliageSet                               RemovedFoliageItems;                                     // 0x0190(0x0060) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FReplicatedFoliageSet                               AddedFoliageItems;                                       // 0x01F0(0x0060) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORYY[0x250];                                 // 0x0250(0x0250) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFoliageDamaged;                                        // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      SecondaryGroups;                                         // 0x04B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void SetSwappedActor(const struct FFoliageKey& Key, class UBaseLODActor* Actor);
		void SetFoliageInstanceDefaultState(const struct FFoliageKey& FoliageKey);
		class UBaseLODActor* ReplaceFoliageMeshWithBlueprintActor(const struct FFoliageKey& FoliageKey, EFoliageSwapFlags Flags);
		void RemoveFoliageInstance(const struct FFoliageKey& FoliageKey, EFoliageOperationFlags Flags);
		void ReaddFoliageInstance(const struct FFoliageKey& FoliageKey, EFoliageOperationFlags Flags);
		void OnRest(float RestDuration);
		void OnRep_RemovedFoliageItems();
		void OnRep_AddedFoliageItems();
		void MulticastPlayFoliageInteractEffects(TArray<struct FTransform> SpawnTransforms, const struct FFoliageKey& FoliageKey);
		bool IsRemovedFoliageInstance(const struct FFoliageKey& FoliageKey);
		void HandleGlobalVariableChanged(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		bool GetVisibleTransform(const struct FFoliageKey& FoliageKey, struct FTransform* Transform, bool bWorldSpace);
		struct FFoliageKey GetNearestInstanceOfType(TArray<class UFoliageType_InstancedStaticMesh*> Types, const struct FVector& Center);
		TArray<struct FFoliageKey> GetInstancesOverlappingSphereOfType(class UFoliageType_InstancedStaticMesh* Type, const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
		TArray<struct FFoliageKey> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
		TArray<struct FFoliageKey> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);
		bool GetFoliageIsClimbable(const struct FFoliageKey& FoliageKey, const struct FGameplayTag& ClimberTag);
		bool GetFoliageHasClimbRole(const struct FFoliageKey& FoliageKey, const struct FGameplayTag& RoleTag);
		bool GetCurrentTransform(const struct FFoliageKey& FoliageKey, struct FTransform* Transform, bool bWorldSpace);
		class UBaseLODActor* GetBlueprintInstance(const struct FFoliageKey& FoliageKey);
		void ClearGroundFoliage(const struct FVector& Location, float Radius, const struct FBox& BoundingBox);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FootstepData
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UFootstepData : public UDataAsset
	{
	public:
		struct FFootstepEntry                                      DefaultEffect;                                           // 0x0030(0x0020) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FFootstepEntry>                              OverrideEffects;                                         // 0x0050(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FPCOverlayComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UFPCOverlayComponent : public UActorComponent
	{
	public:
		class USceneComponent*                                     OverlayRootComponent;                                    // 0x00B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverlayRootComponentDefaultForwardOffset;                // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_87D4[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFPCOverlayConfigDataAsset*                          ConfigData;                                              // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CurrentConfigName;                                       // 0x00C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BDZ1[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdatePositionForDynamicFOVChange();
		void UpdatePositionForAspectRatioChange();
		void SetOverlay(const class FName& ConfigName, int32_t MeshVariant);
		void RemoveOverlay();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FPCOverlayConfigDataAsset
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UFPCOverlayConfigDataAsset : public UDataAsset
	{
	public:
		TMap<class FName, struct FFPCOverlayConfig>                OverlayConfigs;                                          // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FrankenlineControl
	 * Size -> 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
	 */
	class AFrankenlineControl : public AActor
	{
	public:
		unsigned char                                              UnknownData_S225[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFrankenlineMaster*                                  FrankenlineMaster;                                       // 0x0238(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          InteractString;                                          // 0x0240(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FrankenlineButton
	 * Size -> 0x0000 (FullSize[0x0250] - InheritedSize[0x0250])
	 */
	class AFrankenlineButton : public AFrankenlineControl
	{
	public:
		void HandleButtonPressed(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WalkDial
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class AWalkDial : public AActor
	{
	public:
		unsigned char                                              UnknownData_XVD5[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Radius;                                                  // 0x0238(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2D8A[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterMotionEaterComponent*                      MotionEater;                                             // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     DialRootComponent;                                       // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                DialMeshComponent;                                       // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          InteractString;                                          // 0x0258(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsBusy : 1;                                             // 0x0268(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7PNU[0x7];                                   // 0x0269(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnMotionInput(class UCharacterMotionEaterComponent* Sender, const struct FVector2D& Input);
		void OnCharacterDetached(class UCharacterMotionEaterComponent* Sender, class ASurvivalCharacter* Character);
		void OnCharacterAttached(class UCharacterMotionEaterComponent* Sender, class ASurvivalCharacter* Character);
		void HandleDialRotated(float Delta);
		void HandleCharacterDetached(class ASurvivalCharacter* Character);
		void HandleCharacterAttached(class ASurvivalCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FrankenlineDial
	 * Size -> 0x0010 (FullSize[0x0280] - InheritedSize[0x0270])
	 */
	class AFrankenlineDial : public AWalkDial
	{
	public:
		EFrankenlineAxis                                           Axis;                                                    // 0x0270(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WFVD[0x3];                                   // 0x0271(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpeedMultiplier;                                         // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFrankenlineMaster*                                  FrankenlineMaster;                                       // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.FrankenlineMaster
	 * Size -> 0x00A8 (FullSize[0x02D8] - InheritedSize[0x0230])
	 */
	class AFrankenlineMaster : public AActor
	{
	public:
		unsigned char                                              UnknownData_GJOP[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      ImageStreamingBuffer;                                    // 0x0240(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0250(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0258(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BrushSize;                                               // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WriteHeadSize;                                           // 0x026C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LineReplicationRate;                                     // 0x0270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DE6J[0x14];                                  // 0x0274(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        WriteHeadColor;                                          // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BackgroundColor;                                         // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                Colors;                                                  // 0x02A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              CurrentColorIndex;                                       // 0x02B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FM6B[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CursorPosition;                                          // 0x02BC(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIntPoint                                           RenderTargetDimensions;                                  // 0x02C4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LAEQ[0xC];                                   // 0x02CC(0x000C) MISSED OFFSET (PADDING)

	public:
		void ReplicateDrawLine();
		void MulticastDrawLine(const struct FVector2D& To, unsigned char ColorIndex);
		void MulticastCycleColor();
		void MulticastClear();
		void InputMotion(const struct FVector2D& Motion);
		void HandleRenderTargetCreated();
		void HandleHitEdge();
		void HandleCycleColor();
		void HandleClearScreen();
		struct FLinearColor GetNextColor();
		struct FLinearColor GetCurrentColor();
		void FinallyCycleColor();
		void FinallyClear();
		void CacheCursorMesh(class UStaticMeshComponent* InCursorMesh);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameLobbyWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UGameLobbyWidget : public UWindowWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameOptions
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UGameOptions : public UObject
	{
	public:
		class UControlOptions*                                     MouseOptions;                                            // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UControlOptions*                                     GamepadOptions;                                          // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WC01[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnbindGame();
		void Save();
		void Load();
		class UControlOptions* GetControlOptions(bool bIsGamepad);
		void BindGame();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameTextBlock
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class UGameTextBlock : public UTextBlock
	{
	public:
		bool                                                       ForceAllUpperCase;                                       // 0x02B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WU3Y[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameUI
	 * Size -> 0x0148 (FullSize[0x0468] - InheritedSize[0x0320])
	 */
	class AGameUI : public AHUD
	{
	public:
		class FScriptMulticastDelegate                             OnGlobalColorChange;                                     // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4L3O[0x68];                                  // 0x0330(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerStateGuidChanged;                                // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowSubtitlesChanged;                                  // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLanguageChanged;                                       // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E1N1[0xA0];                                  // 0x03C8(0x00A0) MISSED OFFSET (PADDING)

	public:
		void PostPlayerChatMessage(const class FString& Message, class ASurvivalPlayerState* PlayerState);
		void PostGenericMessage(const class FString& Message, class UTexture2D* MessageTexture);
		void PostChatMessage(const struct FChatBoxMessage& Message);
		void OnDayNightChange(bool bIsDayTime);
		void NotifyPossessedPlayerChanged(class ASurvivalPlayerCharacter* NewPlayerCharacter);
		void NotifyPlayerStateRegistered(class ASurvivalPlayerState* NewPlayerState);
		void NotifyGlobalColorChanged();
		void NotifyColorBlindChanged();
		bool GetShowSubtitles();
		class UHUDWidget* GetHUD();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameVersionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameVersionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FString GetGameVersionString();
		struct FGameVersion GetGameVersion();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameZoneVolume
	 * Size -> 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
	 */
	class AGameZoneVolume : public AVolume
	{
	public:
		struct FDataTableRowHandle                                 ZoneData;                                                // 0x0268(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GardenBuilding
	 * Size -> 0x00F8 (FullSize[0x0720] - InheritedSize[0x0628])
	 */
	class AGardenBuilding : public AWidgetBuilding
	{
	public:
		class FScriptMulticastDelegate                             OnGardenStateChanged;                                    // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGardenItemsChanged;                                    // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9PMG[0x48];                                  // 0x0648(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        CatalystTag;                                             // 0x0690(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        ModifierTag;                                             // 0x0698(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CatalystSlots;                                           // 0x06A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ModifierSlots;                                           // 0x06A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGardenState                                               GardenState;                                             // 0x06A8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GWKD[0x7];                                   // 0x06A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       CatalystItems;                                           // 0x06B0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class UItem*>                                       ModifierItems;                                           // 0x06C0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 CurrentRecipe;                                           // 0x06D0(0x0010) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x06E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CompletionTime;                                          // 0x06E4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FUL5[0x10];                                  // 0x06E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            RareSpawnList;                                           // 0x06F8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      MinScale;                                                // 0x0708(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxScale;                                                // 0x070C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        InProductionMeshes;                                      // 0x0710(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void TickProduction(float DeltaTime);
		void ReceiveProductionTick(float DeltaSeconds);
		void OnSpawnedActorDestroyed(class UBaseLODActor* LODActor);
		void OnRep_RareSpawnList();
		void OnRep_ProductionState();
		void OnRep_ModifierItems();
		void OnRep_CurrentRecipe();
		void OnRep_CatalystItems();
		float GetTimeRemaining();
		TArray<class UItem*> GetModifierItems();
		float GetGardenModifier(EGardenModifierType ModifierType);
		EGardenState GetCurrentState();
		TArray<class UItem*> GetCatalystItems();
		struct FGameplayTagContainer GetAllItemTags();
		struct FDataTableRowHandle FindRecipeForSelectedCatalyst();
		bool CanAddItem(class UItem* Item);
		float CalculateRareSpawnChance();
		float CalculateProductionDuration();
		bool AreModifiersFull();
		bool AreCatalystsFull();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalAIData
	 * Size -> 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
	 */
	class UGlobalAIData : public UDataAsset
	{
	public:
		class UEnvQuery*                                           StaticObstacleTargetLocationQuery;                       // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMovementConfig                                     DefaultMoveConfig;                                       // 0x0038(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J5JO[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EBehaviorType, struct FBehaviorMovementConfig>        MoveToConfig;                                            // 0x0048(0x0050) Edit, NativeAccessSpecifierPublic
		float                                                      FootstepNoiseCooldown;                                   // 0x0098(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoiseExpirationTime;                                     // 0x009C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NearPartyDistance;                                       // 0x00A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SenseThreatDecayTime;                                    // 0x00A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatThreatDecayTime;                                   // 0x00A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetAggressionDecayTime;                               // 0x00AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThreatDecayPerSecond;                                    // 0x00B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TXVB[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EPhysicalSurface>                                   BurrowSurfaces;                                          // 0x00B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalAudioData
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UGlobalAudioData : public UDataAsset
	{
	public:
		class UMusicSettings*                                      DefaultMusicSettings;                                    // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DefaultCombatMusicTag;                                   // 0x0038(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCombatMusicSettings>                        CombatMusicList;                                         // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class USoundClass*                                         MasterSoundClass;                                        // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         MusicSoundClass;                                         // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         EffectsSoundClass;                                       // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         AmbienceSoundClass;                                      // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         UISoundClass;                                            // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         NarrationSoundClass;                                     // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         VoiceSoundClass;                                         // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHourBasedOneShotsData*                              GlobalTimedOneShotsData;                                 // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalBuildingData
	 * Size -> 0x0170 (FullSize[0x01A0] - InheritedSize[0x0030])
	 */
	class UGlobalBuildingData : public UDataAsset
	{
	public:
		class UMaterialInterface*                                  BuildingUnderConstructionMaterial;                       // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  BuildingUnderConstructionInvalidMaterial;                // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMaterialInterface*>                          InvisibleMaterials;                                      // 0x0040(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingDestroySFX;                                      // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingDemolishSFX;                                     // 0x0058(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingAddItemSFX;                                      // 0x0060(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingPlaceSFX;                                        // 0x0068(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingCancelSFX;                                       // 0x0070(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           BuildingCompleteContructionSFX;                          // 0x0078(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         FacingHelperMesh;                                        // 0x0080(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BuildingCompleteVOTag;                                   // 0x0088(0x0008) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           GridBuildingMovedCue;                                    // 0x0090(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              BuildingGridPrefab;                                      // 0x0098(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              LadderSplinePrefab;                                      // 0x00A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         DamageWiggleAmplitude;                                   // 0x00A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         FragileWiggleAmplitude;                                  // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CancelDissolveAmount;                                    // 0x00B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BuildingDestroyTime;                                     // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FNF0[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBuildingShape*                                      DefaultFullCell;                                         // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBuildingShape*                                      DefaultFullWall;                                         // 0x00D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBuildingShape*                                      DefaultFullFloor;                                        // 0x00D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BaseCellSize;                                            // 0x00E0(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BuildSoundIntensity;                                     // 0x00EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BuildSoundRange;                                         // 0x00F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFloatRange                                         WallMountValidNormal;                                    // 0x00F4(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFloatRange                                         CeilingMountValidNormal;                                 // 0x0104(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntVector                                          GridSubdivisions;                                        // 0x0114(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTagDataInt>                                 WeightClasses;                                           // 0x0120(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FTagDataInt>                                 SturdinessClasses;                                       // 0x0130(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FCozinessLevel>                              CozinessLevels;                                          // 0x0140(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      StructureCozinessCap;                                    // 0x0150(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CozinessCheckRadius;                                     // 0x0154(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EmbedInGroundProtrusion;                                 // 0x0158(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CellSize;                                                // 0x015C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CellExtents;                                             // 0x0168(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntVector                                          SubOffset;                                               // 0x0174(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SubdivisionOffset;                                       // 0x0180(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GQF2[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ConvertedProcessingBuildingClasses[0x10];                // 0x0190(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		struct FIntVector RotateSnapCentered(const struct FIntVector& Snap, const struct FBuildingGridKey& Origin, float Angle);
		struct FIntVector RotateSnap(const struct FIntVector& Snap, const struct FBuildingGridKey& Origin, float Angle);
		struct FBuildingGridKey RotateSlotCentered(const struct FBuildingGridKey& Slot, const struct FBuildingGridKey& Origin, float Angle);
		struct FBuildingGridKey RotateSlot(const struct FBuildingGridKey& Slot, const struct FBuildingGridKey& Origin, float Angle);
		struct FVector GridToLocal(const struct FIntVector& Position);
		int32_t GetWeight(const struct FGameplayTag& Class);
		int32_t GetSturdiness(const struct FGameplayTag& Class);
		struct FVector GetSnapOffset();
		struct FBox GetSlotDebugShape(const struct FBuildingGridKey& GridLocation, struct FQuat* Rotation);
		struct FBox GetSlotBounds(const struct FBuildingGridKey& GridLocation);
		int32_t GetMaxWeight();
		int32_t GetMaxSturdiness();
		int32_t GetMaxCozinessValue();
		int32_t GetMaxCozinessLevel();
		int32_t GetEffectiveCozinessValue(int32_t InCoziness, int32_t InStructural);
		int32_t GetCozinessLevel(int32_t InCoziness, int32_t InStructural);
		void DrawDebugSnap(class UObject* WorldContextObject, const struct FTransform& GridTransform, const struct FIntVector& Location);
		void DrawDebugCell(class UObject* WorldContextObject, const struct FTransform& GridTransform, const struct FBuildingGridKey& Key, const struct FColor& Color);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalColorTheme
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UGlobalColorTheme : public UObject
	{
	public:
		unsigned char                                              UnknownData_1XMY[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetColorListColorByName(const class FName& ListName, const class FName& ColorName, const struct FLinearColor& Color);
		void ProduceColorblindCaches();
		struct FLinearColor GetColorListColorByName(const class FName& ListName, const class FName& ColorName);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalCombatData
	 * Size -> 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
	 */
	class UGlobalCombatData : public UDataAsset
	{
	public:
		float                                                      DefaultAttackTraceRadius;                                // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S399[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              GenericDamageType;                                       // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              HungerDamageType;                                        // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ThirstDamageType;                                        // 0x0048(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              BadFoodDamageType;                                       // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              EnvironmentalDamageType;                                 // 0x0058(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumDamageAfterArmor;                                 // 0x0060(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CriticalHitMultiplier;                                   // 0x0064(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FComboScalingData>                           ComboScalingTypes;                                       // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      ThrowingStaminaCost;                                     // 0x0078(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThrowingDurabilityCost;                                  // 0x007C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThrowingForce;                                           // 0x0080(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThrowingRotationalForce;                                 // 0x0084(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItemVelocityThresholdForDamage;                          // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItemVelocityThresholdForSound;                           // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FThrowingImpactData                                 DefaultThrowingImpact;                                   // 0x0090(0x0020) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FThrowingImpactData>                         ThrowingImpactTypes;                                     // 0x00B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class USoundBase*                                          HitMarkerSound;                                          // 0x00C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVisualEffect*                                       CriticalHitEffect;                                       // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatRegenDelay;                                        // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatRegenTickPercentage;                               // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatRegenTickRate;                                     // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8IUP[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ControlMetadataLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UControlMetadataLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FLocString GetControlDisplayName(const struct FControlMetadata& MetaData, bool bDisplayingForGamepad);
		int32_t GetConflictCategoryMask(const struct FControlMetadata& MetaData);
		struct FAnyControlMapping AxisMappingToAnyMapping(const struct FInputAxisKeyMapping& InMapping);
		struct FAnyControlMapping ActionMappingToAnyMapping(const struct FInputActionKeyMapping& InMapping);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalControlsData
	 * Size -> 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
	 */
	class UGlobalControlsData : public UDataAsset
	{
	public:
		TMap<class FName, struct FControlMetadata>                 ActionData;                                              // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FAxisDirectionKey, struct FControlMetadata>    AxisData;                                                // 0x0080(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EControlConflictContext, struct FControlConflictContextMetadata> ConflictContextData;                                     // 0x00D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		int32_t GetConflictsWithMask(EControlConflictContext Context);
		bool FindMetadata(const struct FAnyControlMappingKey& Key, struct FControlMetadata* OutData);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalFoliageData
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UGlobalFoliageData : public UDataAsset
	{
	public:
		TArray<struct FFoliageRespawnRules>                        FoliageRespawnRules;                                     // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class UStaticMesh*, struct FFoliageMapping>           FoliageMappings;                                         // 0x0040(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UStaticMesh*>                                 GroundFoliage;                                           // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      FoliageRustleFadeInTime;                                 // 0x00A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FoliageRustleFadeOutTime;                                // 0x00A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FoliageRustleMinEnergy;                                  // 0x00A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InstanceIfNecessaryDistance;                             // 0x00AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		float GetFoliagePlayerSwapDistanceFromMesh(class UStaticMesh* StaticMesh);
		float GetFoliagePlayerSwapDistanceFromKey(const struct FFoliageKey& Key);
		EFoliageInstanceState GetFoliageDefaultStateFromMesh(class UStaticMesh* StaticMesh);
		EFoliageInstanceState GetFoliageDefaultStateFromKey(const struct FFoliageKey& Key);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalItemData
	 * Size -> 0x0338 (FullSize[0x0368] - InheritedSize[0x0030])
	 */
	class UGlobalItemData : public UDataAsset
	{
	public:
		TArray<struct FProcessingTypeGlobalData>                   ProcessingData;                                          // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              DefaultEquippedItem;                                     // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVisualEffect*                                       DefaultAIBiteEffect;                                     // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVisualEffect*                                       DefaultAIEatEffect;                                      // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttackDurability;                                        // 0x0058(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockDurability;                                         // 0x005C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThrowDurability;                                         // 0x0060(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4PNQ[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              DamageDurabilityThresholds;                              // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      TotalSpoilingTimeInHours;                                // 0x0078(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D3M2[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 TorchItem;                                               // 0x0080(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TotalFireBurnTimeInHours;                                // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JLPZ[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGameplayTag, int32_t>                         StackSizes;                                              // 0x0098(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FItemStackUpgradeData>                       ItemStackUpgrades;                                       // 0x00E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    ItemStackBonusPerTier;                                   // 0x00F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxItemStackTier;                                        // 0x00FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SciencePerResearch;                                      // 0x0100(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HKZZ[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FResearchLevelGlobalData>                    ResearchLevels;                                          // 0x0108(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, int32_t>                         ResearchPoints;                                          // 0x0118(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      ItemUseCooldown;                                         // 0x0168(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CGOD[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 MushroomBrickItem;                                       // 0x0170(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class USoundBase*                                          DefaultCraftingSound;                                    // 0x0180(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FRecipeModData>                              RecipeModData;                                           // 0x0188(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              LootBag;                                                 // 0x0198(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxBaseEnhancementLevel;                                 // 0x01A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLocString                                          LocalizedBaseEnhancementDisplayName;                     // 0x01A4(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3Z0[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              BaseEnhancementItemSlotBG[0x28];                         // 0x01B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FDataTableRowHandle                                 BaseEnhancementItem;                                     // 0x01E0(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    BaseEnhancementBaseCost;                                 // 0x01F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseStatModifierPerLevel;                                // 0x01F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxBonusEnhancementLevel;                                // 0x01F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumBonusEnhancementTiers;                                // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BonusStatModifierPerLevel;                               // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BonusDamageTypeStatModifierPerLevel;                     // 0x0204(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BonusEnhancementBaseCost;                                // 0x0208(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DefaultBonusEnhancementTag;                              // 0x020C(0x0008) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WUHR[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGameplayTag, struct FItemBonusEnhancementData> BonusEnhancements;                                       // 0x0218(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, struct FKeyItemDisplayData>      KeyItemCategories;                                       // 0x0268(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, struct FKeyItemDisplayData>      KeyItemSubcategories;                                    // 0x02B8(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, struct FKeyItemDisplayData>      BestiaryWeakPointDisplayData;                            // 0x0308(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GasMaskItemTag;                                          // 0x0358(0x0008) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundEffectSubmixPreset*                            GasMaskReverb;                                           // 0x0360(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		struct FRecipeModData GetRecipeModData(const struct FDataTableRowHandle& ItemRowHandle);
		TArray<struct FGameplayTag> GetBonusEnhancementTypes();
		struct FDataTableRowHandle GetBonusEnhancementRepairItem(const struct FGameplayTag& BonusEnhancementType);
		int32_t GetBonusEnhancementItemCost(int32_t BonusEnhancementLevel);
		struct FDataTableRowHandle GetBonusEnhancementItem(const struct FGameplayTag& BonusEnhancementType, int32_t BonusEnhancementLevel);
		class UClass* GetBonusEnhancementDamageType(const struct FGameplayTag& BonusEnhancementType);
		int32_t GetBaseEnhancementItemCost(int32_t EnhancementLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalSaveLoadData
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UGlobalSaveLoadData : public UDataAsset
	{
	public:
		TMap<class FString, struct FSoftObjectPath>                ClassRedirects;                                          // 0x0030(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalTableData
	 * Size -> 0x00A8 (FullSize[0x00D8] - InheritedSize[0x0030])
	 */
	class UGlobalTableData : public UDataAsset
	{
	public:
		class UDataTable*                                          AllItemsTable;                                           // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          CraftingRecipeTable;                                     // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          BuildingRecipeTable;                                     // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          MetaBuildingsTable;                                      // 0x0048(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          MetaBuildingVariantsTable;                               // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          GardenRecipeTable;                                       // 0x0058(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          QuestsTable;                                             // 0x0060(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          ItemSetsTable;                                           // 0x0068(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          TechTreesTable;                                          // 0x0070(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PowerTypesTable;                                         // 0x0078(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          TutorialsTable;                                          // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PerksTable;                                              // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PlayerUpgradesTable;                                     // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          SignsTable;                                              // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          ZonesTable;                                              // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          AchievementsTable;                                       // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PetPersonalitiesTable;                                   // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          CharactersTable;                                         // 0x00B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          StatusEffectsTable;                                      // 0x00C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          BestiaryTable;                                           // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          KeyItemsTable;                                           // 0x00D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalTamingData
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UGlobalTamingData : public UDataAsset
	{
	public:
		TArray<struct FTamingHappinessStep>                        HappinessSteps;                                          // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HappinessVitalTag;                                       // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EquippedHappinessDecayMult;                              // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1P7D[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		float HungerToHappiness(float Hunger);
		float HappinessToHunger(float Happiness);
		int32_t GetHappinessStepIndexFromHunger(float Hunger);
		int32_t GetHappinessStepIndex(float Happiness);
		struct FTamingHappinessStep GetHappinessStepData(float Happiness);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GlobalUIData
	 * Size -> 0x02E8 (FullSize[0x0318] - InheritedSize[0x0030])
	 */
	class UGlobalUIData : public UDataAsset
	{
	public:
		class UClass*                                              WidgetManagerClass;                                      // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ConversationWidgetClass[0x28];                           // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BurgleQuestsWidgetClass[0x28];                           // 0x0060(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ScienceStoreWidgetClass[0x28];                           // 0x0088(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UpgradesWidgetClass[0x28];                               // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              PauseWidgetClass[0x28];                                  // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              InGameMenu;                                              // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              HotBarRadialMenu;                                        // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              BuildingRadialMenu;                                      // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AmmoRadialMenu;                                          // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              EmoteRadialMenu;                                         // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ChatRadialMenu;                                          // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ShortcutRadialMenu;                                      // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<struct FKey, struct FInputKeyData>                    KeyDisplayData;                                          // 0x0138(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EHUDMarkerType, struct FHUDMarkerVariationData>       HUDMarkerBrushes;                                        // 0x0188(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FColor>                                      HUDMarkerColorOptions;                                   // 0x01D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<ERadialShortcut, struct FRadialShortcutData>          RadialShortcutBrushes;                                   // 0x01E8(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EStatusEffectType, struct FStatusEffectUIData>        StatusEffectUIData;                                      // 0x0238(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, struct FLocString>               AttackSpeedNames;                                        // 0x0288(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UTexture2D*                                          AutoSaveIcon;                                            // 0x02D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UScriptStruct*                                       GlobalColorListType;                                     // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      UIThemes;                                                // 0x02E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AllUIThemes;                                             // 0x02F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		class UClass*                                              DefaultUITheme;                                          // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              DefaultNightUITheme;                                     // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		int32_t GetMarkerBuildingHiddenIconIndex();
		int32_t GetMarkerBuildingBurgleIconIndex();
		class FString GetKeyNarrationName(const struct FKey& Key);
		class FText GetChordNarrationName(const struct FInputChord& Chord);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapAction
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UGoapAction : public UDataAsset
	{
	public:
		float                                                      InherentCost;                                            // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttractionRange;                                         // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InteractDuration;                                        // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InteractSoundTag;                                        // 0x003C(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsEnabled : 1;                                          // 0x0044(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bMustLand : 1;                                           // 0x0044(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              IndefiniteDuration : 1;                                  // 0x0044(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bOwnerOnly : 1;                                          // 0x0044(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bObstructionTrace : 1;                                   // 0x0044(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFaceTargetType                                            Facing;                                                  // 0x0045(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EInteractAnimType                                          InteractAnimType;                                        // 0x0046(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_854Z[0x1];                                   // 0x0047(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Cooldown;                                                // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YO2U[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		EGoapActionResult ExecuteReal(class UCharacterLODActor* Actor, struct FGoapActionOwner* Owner, const struct FVector& TargetLocation);
		bool CanExecuteReal(class UCharacterLODActor* Actor, const struct FGoapActionOwner& Owner);
		bool CanActorExecuteEver(class UCharacterLODActor* Actor, const struct FGoapActionOwner& Owner);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionAdjustVitals
	 * Size -> 0x0060 (FullSize[0x00B0] - InheritedSize[0x0050])
	 */
	class UGoapActionAdjustVitals : public UGoapAction
	{
	public:
		TMap<struct FGameplayTag, struct FGoapActionVitalAdjustment> ValueAdjustments;                                        // 0x0050(0x0050) NativeAccessSpecifierPublic
		TArray<struct FGoapActionVitalAdjustment>                  Adjustments;                                             // 0x00A0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionActivityMode
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UGoapActionActivityMode : public UGoapActionAdjustVitals
	{
	public:
		ECreatureActivityMode                                      ActivityMode;                                            // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZD6P[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionUseHeldItem
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UGoapActionUseHeldItem : public UGoapActionAdjustVitals
	{
	public:
		bool IsUsableData(const struct FDataTableRowHandle& ItemDataHandle, const struct FGoapActionOwner& Owner);
		bool IsUsable(class UItem* Item, const struct FGoapActionOwner& Owner);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionBuild
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UGoapActionBuild : public UGoapActionUseHeldItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionCacheData
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UGoapActionCacheData : public UDataAsset
	{
	public:
		class UGoapActionGetItem*                                  GetItemTemplate;                                         // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionDumpItem*                                 DumpItemTemplate;                                        // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionDropItem*                                 DropItemTemplate;                                        // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionConsumeItem*                              ConsumeItemTemplate;                                     // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionBuild*                                    BuildAction;                                             // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionCache
	 * Size -> 0x01F8 (FullSize[0x0220] - InheritedSize[0x0028])
	 */
	class UGoapActionCache : public UObject
	{
	public:
		class UGoapActionCacheData*                                CacheData;                                               // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLKJ[0x1E0];                                 // 0x0030(0x01E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UGoapAction*>                                 CachedActions;                                           // 0x0210(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionConsumeItem
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UGoapActionConsumeItem : public UGoapActionAdjustVitals
	{
	public:
		unsigned char                                              UnknownData_348Z[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionConsumeItemDynamic
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class UGoapActionConsumeItemDynamic : public UGoapActionConsumeItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionDeliverItem
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UGoapActionDeliverItem : public UGoapActionUseHeldItem
	{
	public:
		struct FGameplayTagContainer                               DeliverTags;                                             // 0x00B0(0x0020) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         ItemHandles;                                             // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionDropItem
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class UGoapActionDropItem : public UGoapAction
	{
	public:
		struct FDataTableRowHandle                                 ItemRow;                                                 // 0x0050(0x0010) NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionRemoveItem
	 * Size -> 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
	 */
	class UGoapActionRemoveItem : public UGoapAction
	{
	public:
		struct FDataTableRowHandle                                 Item;                                                    // 0x0050(0x0010) Transient, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6NCX[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionDumpItem
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UGoapActionDumpItem : public UGoapActionRemoveItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionGetItem
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UGoapActionGetItem : public UGoapActionRemoveItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionGetItemDynamic
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UGoapActionGetItemDynamic : public UGoapActionGetItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionHarvest
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class UGoapActionHarvest : public UGoapAction
	{
	public:
		unsigned char                                              UnknownData_MMA3[0x10];                                  // 0x0050(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionHoldItem
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UGoapActionHoldItem : public UGoapActionUseHeldItem
	{
	public:
		struct FGameplayTagContainer                               DeliverTags;                                             // 0x00B0(0x0020) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         ItemHandles;                                             // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionInstanceFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGoapActionInstanceFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FVector GetGoapActionInstanceLocation(const struct FGoapActionInstance& ActionInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionKill
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UGoapActionKill : public UGoapAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionProviderInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGoapActionProviderInterface : public UInterface
	{
	public:
		TArray<class UGoapAction*> AllocateGOAPActions(class USurvivalGameInstance* GameInstance, class UObject* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionSpawnActor
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UGoapActionSpawnActor : public UGoapActionAdjustVitals
	{
	public:
		class UClass*                                              SpawnActor;                                              // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SpawnSocket;                                             // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bFaceCharacter : 1;                                      // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bSpawnOnGround : 1;                                      // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bForceSimulatePhysics : 1;                               // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4A1P[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        SpawnInRegion;                                           // 0x00C4(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6FVG[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapActionSpawnEgg
	 * Size -> 0x0000 (FullSize[0x00D0] - InheritedSize[0x00D0])
	 */
	class UGoapActionSpawnEgg : public UGoapActionSpawnActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapWorldStateEvaluator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGoapWorldStateEvaluator : public UDataAsset
	{
	public:
		struct FFloatRange                                         MemberWeightVariance;                                    // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapColonyPopulationEvaluator
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UGoapColonyPopulationEvaluator : public UGoapWorldStateEvaluator
	{
	public:
		class UCurveFloat*                                         PopulationValue;                                         // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapItemsInRegionEvaluator
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UGoapItemsInRegionEvaluator : public UGoapWorldStateEvaluator
	{
	public:
		struct FGameplayTag                                        RegionTag;                                               // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ValueCurve;                                              // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GoapSphereRegionComponent
	 * Size -> 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
	 */
	class UGoapSphereRegionComponent : public UBaseGoapRegionComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GridLaddersComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UGridLaddersComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_RQUV[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCombinedLadderData>                         CombinedLadders;                                         // 0x00B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class ALadderBuilding*>                             NeedsRebuild;                                            // 0x00C8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G4JC[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void RebuildDirty();
		void RebuildAll();
		void HandleBuildingUnregistered(class UBuildingGridComponent* Sender, const struct FBuildingGridBuilding& Building, const struct FBuildingGridKey& Slot);
		void HandleBuildingRegistered(class UBuildingGridComponent* Sender, const struct FBuildingGridBuilding& Building, const struct FBuildingGridKey& Slot);
		void HandleBuildingBuilt(class UBuildingGridComponent* Sender, const struct FBuildingGridBuilding& Building, const struct FBuildingGridKey& Slot);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GroundLevelAssetUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGroundLevelAssetUserData : public UAssetUserData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HarvestNode
	 * Size -> 0x00C0 (FullSize[0x02F0] - InheritedSize[0x0230])
	 */
	class AHarvestNode : public AActor
	{
	public:
		unsigned char                                              UnknownData_2LHM[0x30];                                  // 0x0230(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          DisplayName;                                             // 0x0260(0x0010) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LODFullActorMaxDistance;                                 // 0x0270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAllowLODNavDirtying : 1;                                // 0x0274(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAllowFoliageRespawn : 1;                                // 0x0274(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3TR4[0x3];                                   // 0x0275(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponent*                                    HealthComponent;                                         // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTeamComponent*                                      TeamComponent;                                           // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralAnimationComponent*                       ProceduralAnimationComponent;                            // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0290(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULootComponent*                                      LootComponent;                                           // 0x0298(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               HarvestNodeTags;                                         // 0x02A0(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              bUseOverrideGameHourLifetime : 1;                        // 0x02C0(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7V03[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideGameHourLifetime;                                // 0x02C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQDS[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFoliageKey                                         SourceFoliage;                                           // 0x02D0(0x0020) BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetAdditiveRotationQuat(class UObject* Source, const struct FQuat& Rotation);
		void SetAdditiveRotation(class UObject* Source, const struct FRotator& Rotation);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void OnDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		bool HasTag(const struct FGameplayTag& InTag);
		bool HasAnyTag(const struct FGameplayTagContainer& InTags);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyHarvestNodeActor
	 * Size -> 0x0028 (FullSize[0x0120] - InheritedSize[0x00F8])
	 */
	class UProxyHarvestNodeActor : public UProxyActor
	{
	public:
		struct FFoliageKey                                         SourceFoliage;                                           // 0x00F8(0x0020) Transient, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RVYY[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HarvestNodeLODActor
	 * Size -> 0x0018 (FullSize[0x0128] - InheritedSize[0x0110])
	 */
	class UHarvestNodeLODActor : public UBaseLODActor
	{
	public:
		unsigned char                                              UnknownData_3H99[0x18];                                  // 0x0110(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HatchingDataAsset
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UHatchingDataAsset : public UDataAsset
	{
	public:
		TArray<struct FEggHatchType>                               HatchOptions;                                            // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UVisualEffect*                                       HatchVFX;                                                // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           HatchAudio;                                              // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HaulingComponent
	 * Size -> 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
	 */
	class UHaulingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_T624[0x20];                                  // 0x00B0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Capacity;                                                // 0x00D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHaulAnything;                                           // 0x00D4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AOD6[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBeginHauling;                                          // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndHauling;                                            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHaulingChanged;                                        // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UItem*>                                       HauledItems;                                             // 0x0108(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6XHU[0x18];                                  // 0x0118(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     HaulingInputComponent;                                   // 0x0130(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ServerRemoveItem(class UItem* Item);
		void ServerDropItem();
		void ServerDropAll();
		void ServerAddItem(class UItem* Item);
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		void OnStatusEffectChanged();
		void OnRep_HauledItems(TArray<class UItem*> PreviousHauledItems);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void OnDamage(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnCharacterMovementChanged(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		void OnAttackLaunch(class UAttack* Attack);
		bool IsHaulingThrowableItems();
		bool IsHaulingItems();
		bool IsHaulingItem(class UItem* Item);
		void InputDropPressed();
		TArray<class UItem*> GetItems();
		int32_t GetHaulingItemCount();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		int32_t GetAdjustedCapacity();
		void ClientOnItemAdded(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItems(TArray<class UItem*> Items);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyHaulingComponent
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UProxyHaulingComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_Z91I[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       HauledItems;                                             // 0x0070(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    AdjustedCapacity;                                        // 0x0080(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHaulAnything;                                           // 0x0084(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9GK1[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		int32_t GetAdjustedCapacity();
		bool CanAddItems(TArray<class UItem*> Items);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HaulingLODComponent
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UHaulingLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_FCK3[0x28];                                  // 0x0040(0x0028) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		bool CanAddItems(TArray<class UItem*> Items);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Hazard
	 * Size -> 0x0130 (FullSize[0x0360] - InheritedSize[0x0230])
	 */
	class AHazard : public AActor
	{
	public:
		unsigned char                                              UnknownData_3IQ5[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterEnter;                                        // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterExit;                                         // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHazardEnded;                                           // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHazardEnabled;                                         // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHazardTargetTick;                                      // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USceneComponent*                                     SceneComponent;                                          // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UShapeComponent*                                     CollisionComponent;                                      // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TickInterval;                                            // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PKAE[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Lifetime;                                                // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3VGZ[0x14];                                  // 0x02A4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDamageData                                         DamageData;                                              // 0x02B8(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bTickForDamage;                                          // 0x02E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInflictDamageStyle                                        DamageStyle;                                             // 0x02E9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HJR0[0x16];                                  // 0x02EA(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHazardEnded;                                            // 0x0300(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHazardEnabled;                                          // 0x0301(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8U7N[0x2];                                   // 0x0302(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FailsafeDestroyTime;                                     // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHazardEffectApplyType                                     StatusEffectApplyType;                                   // 0x0308(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O2YN[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         StatusEffects;                                           // 0x0310(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UScreenEffectData*                                   ScreenEffect;                                            // 0x0320(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 ProjectileAttackData;                                    // 0x0328(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class AActor*                                              ProjectileOwner;                                         // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttack*                                             ProjectileAttack;                                        // 0x0340(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAlwaysClearEffectsOnExit;                               // 0x0348(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1GJW[0x17];                                  // 0x0349(0x0017) MISSED OFFSET (PADDING)

	public:
		void SetProjectileAttackOwner(class AActor* NewOwner);
		void OnRep_HazardEnding();
		void OnRep_HazardEnabled();
		void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		bool IsHazardExpired();
		void HazardExpired();
		void HandleHazardEnding();
		class UAttack* GetProjectileAttack();
		bool GetHazardEnabled();
		void EnableHazard(bool bEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HazardBox
	 * Size -> 0x0000 (FullSize[0x0360] - InheritedSize[0x0360])
	 */
	class AHazardBox : public AHazard
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HazardCapsule
	 * Size -> 0x0000 (FullSize[0x0360] - InheritedSize[0x0360])
	 */
	class AHazardCapsule : public AHazard
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HazardSphere
	 * Size -> 0x0000 (FullSize[0x0360] - InheritedSize[0x0360])
	 */
	class AHazardSphere : public AHazard
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HazardVolume
	 * Size -> 0x0008 (FullSize[0x0368] - InheritedSize[0x0360])
	 */
	class AHazardVolume : public AHazard
	{
	public:
		class AVolume*                                             Volume;                                                  // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnVolumeEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnVolumeBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HealthComponent
	 * Size -> 0x0228 (FullSize[0x02D8] - InheritedSize[0x00B0])
	 */
	class UHealthComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_SHC8[0x20];                                  // 0x00B0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseDamageReduction;                                     // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint16_t                                                   ImmunityFlags;                                           // 0x00D4(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint16_t                                                   RequiredDamageTypeFlags;                                 // 0x00D6(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RequiredDamageTypeTier;                                  // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PlayDamagedParticlesOnDeath : 1;                         // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanDieFromDamage : 1;                                   // 0x00D9(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanBeDamagedByFriendlyFire : 1;                         // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanBeRepaired : 1;                                      // 0x00D9(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanBePushed : 1;                                        // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bRegenOutOfCombat : 1;                                   // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3N6G : 2;                                    // 0x00D9(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAffectsDurability : 1;                                  // 0x00DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanDieFromFragility : 1;                                // 0x00DA(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DH1N[0x1];                                   // 0x00DB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FragileTime;                                             // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   CurrentFragilityLevel;                                   // 0x00E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M0BW[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHealthColliderConfig>                       ColliderConfigs;                                         // 0x00E8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FThreatDamageModifierConfig>                 ThreatDamageConfigs;                                     // 0x00F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHit;                                                   // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamaged;                                               // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeath;                                                 // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIncapacitated;                                         // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRevive;                                                // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthStateChanged;                                    // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthChanged;                                         // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFragileStateChanged;                                   // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFragilityLevelChanged;                                 // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHandleNoDamageEffects;                                 // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHandleDamageEffects;                                   // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHandleDeathEffects;                                    // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIncapacitatationRatioChange;                           // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UVisualEffect*>                               OnNoDamagedParticles;                                    // 0x01D8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UVisualEffect*>                               OnDamagedParticles;                                      // 0x01E8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UVisualEffect*>                               OnDeathParticles;                                        // 0x01F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class USoundCue*                                           OnNoDamagedSFX;                                          // 0x0208(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           OnDamagedSFX;                                            // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           OnDeathSFX;                                              // 0x0218(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HealthFleeThreshold;                                     // 0x0220(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TX3S[0x1C];                                  // 0x0224(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxHits;                                                 // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxHealth;                                               // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CurrentDamage;                                           // 0x0248(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EHealthState                                               HealthState;                                             // 0x024C(0x0001) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EHealthState                                               HealthStateOnLoad;                                       // 0x024D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EIncapacitationSetting                                     IncapacitationSetting;                                   // 0x024E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RUQM[0x1];                                   // 0x024F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReviveHealthPercentage;                                  // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ReviveTime;                                              // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ReviveStartTime;                                         // 0x0258(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      IncapacitationTime;                                      // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      IncapacitationTimer;                                     // 0x0260(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ReviveImmunityTime;                                      // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E9IC[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        LifetimeTimer;                                           // 0x0270(0x0008) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FragileDeathTime;                                        // 0x0278(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L7WB[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        ReviveAnim;                                              // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PWD2[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeUntilDecay;                                          // 0x0290(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HealthPerHourRested;                                     // 0x0294(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9POJ[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OverrideTargetTokens;                                    // 0x02A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EDX4[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGoapActionKill*                                     KillAction;                                              // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class AActor>                               Reviver;                                                 // 0x02B0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_198K[0x4];                                   // 0x02B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bShowDamageInteractUI : 1;                               // 0x02BC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XGQ5[0x3];                                   // 0x02BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeForMemorizingPushback;                               // 0x02C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_697S[0x14];                                  // 0x02C4(0x0014) MISSED OFFSET (PADDING)

	public:
		void ToggleShowHealthDebug();
		bool ShowDamageInteractUI();
		void SetCurrentHealth(float DesiredHealth);
		void SetCurrentDamage(float DesiredDamage);
		void ServerKill();
		void ServerIncapacitate();
		void Revive(class AActor* InReviver);
		void Restore();
		void OnStatusEffectChanged(class AActor* Owner, class UStatusEffect* StatusEffect);
		void OnRest(float RestDuration);
		void OnRep_Reviver();
		void OnRep_HealthState(EHealthState PrevHealthState);
		void OnRep_CurrentFragilityLevel();
		void OnRep_CurrentDamage(float PrevDamage);
		void OnPlayerScalingCountChanged(class UAuraReceiverComponent* Sender, int32_t AuraCount);
		void OnCombatChanged(class ASurvivalCharacter* Character, bool bInCombat);
		void MulticastHandleEffects(const struct FVector& HitLocation, float Damage, const struct FDamageInfo& DamageInfo, EPlayEffectType PlayEffectType);
		void Kill();
		bool IsReviving();
		bool IsKnockedOut();
		bool IsIncapacitated();
		bool IsFragile();
		bool IsDead();
		bool IsDamaged();
		void Incapacitate();
		void HandleOutOfCombatRegen();
		void HandleDecay();
		float GetReviveTimeRatio();
		float GetReviveTime();
		int32_t GetRequiredDamageTypeFlags();
		unsigned char GetRequiredDamageTier();
		float GetMaxHits();
		float GetMaxHealth();
		float GetInverseHealthRatio();
		float GetIncapacitatedTimeRatio();
		EHealthState GetHealthState();
		float GetHealthRatio();
		float GetFragileProgress();
		float GetDamageReduction();
		float GetCurrentHealth();
		void ApplyHit(class UBaseLODActor* Causer);
		void ApplyDamageFromInfo(float* Damage, const struct FDamageEvent& DamageEvent, struct FDamageInfo* DamageInfo);
		void ApplyDamage(float* Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		TArray<class UGoapAction*> AllocateGOAPActions(class USurvivalGameInstance* GameInstance, class UObject* InOwner);
		void AddHealth(float Amount, class UBaseLODActor* Causer);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyHealthComponent
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UProxyHealthComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_SI6N[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HealthLODComponent
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UHealthLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_74BU[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		void HandleOnDeath(const struct FDamageInfo& DamageInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HealthReadoutWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UHealthReadoutWidget : public UGameUserWidget
	{
	public:
		float                                                      LastPlayerHealth;                                        // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDisplayedHealth;                                  // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T55T[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthRatio;                                             // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_02KI[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHealthAnim();
		void CheckHealthChange(class UHealthComponent* SourceHealthComponent, float NewHealth, float OldHealth);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HeatHazardComponent
	 * Size -> 0x0128 (FullSize[0x01D8] - InheritedSize[0x00B0])
	 */
	class UHeatHazardComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JDUY[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       OwnerSizzles;                                            // 0x00C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VYLN[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SizzleRateMultiplier;                                    // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSizzle;                                               // 0x00C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeatHazardExitDecayRate;                                 // 0x00CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExitDecayOnAdditiveSizzleDelayTime;                      // 0x00D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TakesSizzleDamage;                                       // 0x00D4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ML6J[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SizzlingDamageAmount;                                    // 0x00D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SizzlingDamageTickRate;                                  // 0x00DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SizzlePercentOnRevive;                                   // 0x00E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SizzlePercentOnReviveThreshold;                          // 0x00E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TestShadows;                                             // 0x00E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R3OP[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShadowSweepRadius;                                       // 0x00EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShadowDistanceMultiplier;                                // 0x00F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TestSurface;                                             // 0x00F4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8AZN[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSizzleRatioChanged;                                    // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSizzleStateChanged;                                    // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      CurrentSizzle;                                           // 0x0118(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5M1J[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  PostProcessMaterial;                                     // 0x0120(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EHeatHazardCondition, struct FHeatHazardConditionState> HeatHazardState;                                         // 0x0128(0x0050) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		EPhysicalSurface                                           LastTouchedPhysicalMaterial;                             // 0x0178(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SNQN[0xF];                                   // 0x0179(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHeatEmitterTraceResult>                     EmitterResults;                                          // 0x0188(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class UDirectionalLightComponent*                          SunLight;                                                // 0x0198(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AHeatHazardVolume*                                   CurrentHazardVolume;                                     // 0x01A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic*                            PostProcessMaterialInstance;                             // 0x01A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ERA1[0x28];                                  // 0x01B0(0x0028) MISSED OFFSET (PADDING)

	public:
		bool SetHazardStateActive(EHeatHazardCondition Condition, bool Active);
		void SetCurrentSizzle(float NewSizzle);
		void SetCurrentHeatHazardVolume(class AHeatHazardVolume* HazardVolume);
		void OnRevive();
		void OnHourChanged(int32_t NewHour, int32_t NewDay);
		void OnHeatVolumeEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnHeatVolumeBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnHealthStateChanged(EHealthState NewHealthState);
		float GetSummedEmitterValues();
		float GetStrongestEmitterValue();
		struct FHeatEmitterTraceResult GetStrongestEmitter();
		float GetNearestEmitterValue();
		TArray<struct FHeatEmitterTraceResult> GetNearbyHeatEmitters();
		float GetHazardStateDuration(EHeatHazardCondition Condition);
		bool GetHazardStateActive(EHeatHazardCondition Condition);
		float GetCurrentSizzleRatio();
		float GetCurrentSizzle();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HeatHazardVolume
	 * Size -> 0x0028 (FullSize[0x0390] - InheritedSize[0x0368])
	 */
	class AHeatHazardVolume : public AHazardVolume
	{
	public:
		float                                                      HazardStartTime;                                         // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HazardEndTime;                                           // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EPhysicalSurface>                                   HotSurfaceTypes;                                         // 0x0370(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FHeatEmitter>                                HeatEmitters;                                            // 0x0380(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		struct FDamageData GetDamageData();
		float EvaluateHeatHazard(class UHeatHazardComponent* HazardComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PersistentObject
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UPersistentObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_DI9A[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               UniqueId;                                                // 0x0038(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HotBarQuickSlot
	 * Size -> 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
	 */
	class UHotBarQuickSlot : public UPersistentObject
	{
	public:
		EHotBarQuickSlotType                                       QuickSlotType;                                           // 0x0048(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZQF2[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItem*                                               CurrentItem;                                             // 0x0050(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FHotBarQuickSlotItemTypeKey                         AssignedItemKey;                                         // 0x0058(0x0020) BlueprintVisible, Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZDS3[0x18];                                  // 0x0078(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRep_PropertyChanged();
		void ChangeQuickSlotType(EHotBarQuickSlotType NewSlotType);
		void AssignItemKey(const struct FHotBarQuickSlotItemTypeKey& ItemKey);
		void AssignItem(class UItem* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HotBarWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UHotBarWidget : public UGameUserWidget
	{
	public:
		int32_t                                                    SelectedSlot;                                            // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentPage;                                             // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsingHotBar;                                            // 0x0280(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ALS8[0x3];                                   // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UItem>                                SelectedItem;                                            // 0x0284(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G952[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnSelectedItemChanged();
		void NewSelectedItem(class UItem* NewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDArmorWidget
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class UHUDArmorWidget : public UGameUserWidget
	{
	public:
		struct FArmorEquipmentSlot                                 HeadSlot;                                                // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FArmorEquipmentSlot                                 ChestSlot;                                               // 0x0288(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FArmorEquipmentSlot                                 LegSlot;                                                 // 0x0298(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NJK3[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnEquipmentChanged(const struct FArmorEquipmentSlot& EquipmentSlot);
		void OnDurabilityChanged(const struct FArmorEquipmentSlot& SlotStruct);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDCrosshairWidget
	 * Size -> 0x01A8 (FullSize[0x0420] - InheritedSize[0x0278])
	 */
	class UHUDCrosshairWidget : public UGameUserWidget
	{
	public:
		struct FSlateBrush                                         WontHitBrush;                                            // 0x0278(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         InvalidDamageBrush;                                      // 0x0300(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         WillHitBrush;                                            // 0x0388(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EAttackResolutionType                                      MostRecentAttackOutcome;                                 // 0x0410(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VPB5[0xF];                                   // 0x0411(0x000F) MISSED OFFSET (PADDING)

	public:
		void UpdateCursorBrush(EAttackResolutionType AttackResolution);
		void OnPlayerAttackTargetChanged();
		void OnCameraModeChanged(ECameraDisplayMode DisplayMode);
		void OnAttackResolutionChanged(EAttackResolutionType AttackResolution);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDDestroyStructureWidget
	 * Size -> 0x00A0 (FullSize[0x0318] - InheritedSize[0x0278])
	 */
	class UHUDDestroyStructureWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_TQZ3[0x68];                                  // 0x0278(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        StructureContainer;                                      // 0x02E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULocalizedTextBlock*                                 FragileText;                                             // 0x02E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameTextBlock*                                      SupportCount;                                            // 0x02F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCircularThrobber*                                   CountThrobber;                                           // 0x02F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              DangerIcon;                                              // 0x0300(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    RecycleWarningStop;                                      // 0x0308(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    RecycleWarning;                                          // 0x0310(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void NativeUpdateData();
		void InitSupportTextColors(const struct FSlateColor& NormalColor, const struct FSlateColor& WarningColor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDGasMaskWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UHUDGasMaskWidget : public UGameUserWidget
	{
	public:
		class UImage*                                              WarningImage;                                            // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              InHazardIcon;                                            // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay*                                            DurabilityOverlay;                                       // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    GlideWarningAnim;                                        // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDInteractableWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class UHUDInteractableWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_2YMW[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateInteractionTargetChanged(class UObject* NewTarget);
		void UpdateAttackResolutionChanged();
		void OnPlayerInteractableChanged();
		void OnPlayerAttackTargetChanged();
		void OnEquipmentChanged();
		void OnAttackResolutionChanged(EAttackResolutionType AttackResolution);
		class UHealthComponent* GetCurrentTargetHealth();
		EAttackResolutionType GetCurrentAttackResolution();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDMarkerData
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UHUDMarkerData : public UObject
	{
	public:
		unsigned char                                              UnknownData_GD4Y[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               ReferenceActor;                                          // 0x0038(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UBaseLODActor>                        ReferenceLODActor;                                       // 0x0040(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 AdditionalDataRowHandle;                                 // 0x0048(0x0010) Net, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 QuestData;                                               // 0x0058(0x0010) Net, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FVector_NetQuantize                                 Location;                                                // 0x0068(0x000C) Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EHUDMarkerType                                             MarkerType;                                              // 0x0074(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MarkerListIndex;                                         // 0x0075(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int8_t                                                     MarkerTypeVariant;                                       // 0x0076(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int8_t                                                     MarkerTypeColorVariant;                                  // 0x0077(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DisplayName;                                             // 0x0078(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FColor                                              Color;                                                   // 0x0088(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ShowDistance : 1;                                        // 0x008C(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsCharacter : 1;                                        // 0x008C(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bShowOnlyNearby : 1;                                     // 0x008C(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GQWC[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifeTimeRemaining;                                       // 0x0090(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B880[0x2C];                                  // 0x0094(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHUDMarkerDataChanged;                                  // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHUDMarkerObjectiveReferenceChanged;                    // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetIconVariant(int32_t Variant);
		void SetDisplayName(const class FString& NewName);
		void SetColorVariant(int32_t Variant);
		void SetColor(const struct FColor& NewColor);
		void HandleLODActorConvertedToProxy(class UBaseLODActor* Sender);
		void HandleLODActorConvertedToFull(class UBaseLODActor* Sender);
		void HandleHUDMarkerChanged();
		bool GetShowDistance();
		bool GetShouldShow();
		class UBaseLODActor* GetReferencedLODActor();
		class AActor* GetReferencedActor();
		struct FDataTableRowHandle GetQuestData();
		int32_t GetMarkerVariant();
		EHUDMarkerType GetMarkerType();
		int32_t GetMarkerColorVariant();
		struct FVector GetLocation();
		float GetLifeTimeRemaining();
		class FString GetDisplayName();
		struct FColor GetColor();
		struct FDataTableRowHandle GetAdditionalData();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameStateComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USurvivalGameStateComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDMarkerManagerComponent
	 * Size -> 0x0260 (FullSize[0x0310] - InheritedSize[0x00B0])
	 */
	class UHUDMarkerManagerComponent : public USurvivalGameStateComponent
	{
	public:
		unsigned char                                              UnknownData_F0RW[0xB0];                                  // 0x00B0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASpawnedItem*>                                RegisteredSpawnedItems;                                  // 0x0160(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredActorMarkerData;                               // 0x0170(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredLODActorMarkerData;                            // 0x0198(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredPlayerMarkerData;                              // 0x01C0(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredSpecificLocationMarkerData;                    // 0x01E8(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredItemObjectiveMarkerData;                       // 0x0210(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		struct FHUDMarkerArray                                     RegisteredPlayerWaypointMarkerData;                      // 0x0238(0x0028) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UHUDMarkerData*>                              ReplicatedMarkerList;                                    // 0x0260(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N8JB[0x24];                                  // 0x0270(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxHeightUsedForTopOfObjectiveMesh;                      // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MHK9[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMarkerAdded;                                           // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkerRemoved;                                         // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerMarkerAdded;                                     // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerMarkerRemoved;                                   // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerWaypointAdded;                                   // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerWaypointRemoved;                                 // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowFarHUDMarkersChanged;                              // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ToggleShowFarHUDMarkers();
		void RegisterPlayerWaypointMarker(class APlayerState* OwningPlayer, const struct FVector& Location, bool ShowDistance, float Lifetime);
		void RegisterPlayer(class ASurvivalPlayerCharacter* Player);
		void RegisterLocationMarker(const class FString& MarkerTag, const struct FDataTableRowHandle& Quest, const struct FVector& Location, EHUDMarkerType MarkerType, bool ShowDistance, float Lifetime);
		void RegisterItemObjectiveMarker(const struct FDataTableRowHandle& ItemDataRowHandle, const struct FDataTableRowHandle& Quest, bool ShowDistance, float Lifetime);
		void RefreshActor(class AActor* Actor);
		void K2_RegisterLODActor(class UBaseLODActor* Actor, const struct FDataTableRowHandle& Quest, const struct FDataTableRowHandle& AdditionalData, EHUDMarkerType MarkerType, int32_t IconVariant, int32_t ColorVariant, bool ShowDistance, float Lifetime);
		void K2_RegisterActor(class AActor* Actor, const struct FDataTableRowHandle& Quest, const struct FDataTableRowHandle& AdditionalData, EHUDMarkerType MarkerType, int32_t IconVariant, int32_t ColorVariant, bool ShowDistance, float Lifetime);
		bool GetShowFarHUDMarkers();
		void DeregisterPlayerWaypointMarker(class APlayerState* OwningPlayer);
		void DeregisterActor(class AActor* Actor);
		void AddStartingMarkers();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDMarkerTargetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHUDMarkerTargetInterface : public UInterface
	{
	public:
		bool GetShouldShowHUDMarker();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDMarkerWidget
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class UHUDMarkerWidget : public UGameUserWidget
	{
	public:
		class UHUDMarkerData*                                      MarkerData;                                              // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MarkerOpacity;                                           // 0x0280(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MarkerDistance;                                          // 0x0284(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MarkerDistanceTruncated;                                 // 0x0288(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PWQ2[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          DistanceText;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox*                                        OuterBox;                                                // 0x0298(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOverlay*                                            ArrowRotationOverlay;                                    // 0x02A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              ArrowIcon;                                               // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProgressBar*                                        TimerFillbar;                                            // 0x02B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GJDG[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateMarkerPosition();
		void UpdateMarkerFade();
		void UpdateMarkerDistance();
		void UpdateBuildingMarkerHealth();
		bool ShouldShowMarkerTimer();
		bool ShouldShowMarkerArrow();
		bool ShouldMarkerLockToScreen();
		bool ShouldFadeMarkerAtEdge();
		void HandleStickiedQuestChanged();
		float GetMarkerScreenEdgeAlpha();
		float GetMarkerLifetimeFade();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDSCABFoodWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UHUDSCABFoodWidget : public UGameUserWidget
	{
	public:
		class UWidgetAnimation*                                    FoodDanger;                                              // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    FoodGainAnim;                                            // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              WarningCircle;                                           // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          FoodGainSound;                                           // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDSCABWaterWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UHUDSCABWaterWidget : public UGameUserWidget
	{
	public:
		class UWidgetAnimation*                                    WaterDanger;                                             // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    WaterGainAnim;                                           // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              WarningCircle;                                           // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          WaterGainSound;                                          // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDSCABWidget
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class UHUDSCABWidget : public UGameUserWidget
	{
	public:
		class UWidgetAnimation*                                    SignalProcessAnim;                                       // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    SignalArrived;                                           // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    SignalAppear;                                            // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentNormalizedTime;                                   // 0x0290(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LastTransmitterFrame;                                    // 0x0294(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CPKS[0x18];                                  // 0x0298(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateTimeOfDay(int32_t NewHour, int32_t NewDay);
		void UpdateThirstRatio(float NewRatio);
		void UpdateStaminaRatio(float NewRatio);
		void UpdateRadarVisuals();
		void UpdateHungerRatio(float NewRatio);
		void UpdateHealthRatio(float NewHealthRatio);
		void OnHourChange(int32_t NewHour, int32_t NewDay);
		void CheckWaterChange(class USurvivalComponent* Sender, float OldValue, float NewValue);
		void CheckHealthChange(class UHealthComponent* SourceHealthComponent, float NewHealth, float OldHealth);
		void CheckFoodChange(class USurvivalComponent* Sender, float OldValue, float NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDWeaponInfoWidget
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class UHUDWeaponInfoWidget : public UGameUserWidget
	{
	public:
		class UItem*                                               MainHandItem;                                            // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJWL[0x40];                                  // 0x0280(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnPowerChanged(float NewRatio);
		void OnMainHandChanged(class UItem* ChangedItem);
		void OnItemCountChanged(int32_t ItemCount);
		void OnEnhancementLevelChanged(int32_t NewEnhancementLevel);
		void OnDurabilityChanged(float NewRatio);
		void OnAmmoTypeChanged(const class FName& ItemName);
		void OnAmmoCountChanged(int32_t ItemCount);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HUDWidget
	 * Size -> 0x00B0 (FullSize[0x0328] - InheritedSize[0x0278])
	 */
	class UHUDWidget : public UGameUserWidget
	{
	public:
		class UGameUserWidget*                                     UIInteract;                                              // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameUserWidget*                                     SlotsUsed;                                               // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNotificationLogBase*                                TemporaryNotificationLog;                                // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RYZI[0x4];                                   // 0x0290(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UInventoryComponent>                  InventoryComponent;                                      // 0x0294(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XKW9[0x8C];                                  // 0x029C(0x008C) MISSED OFFSET (PADDING)

	public:
		void SetSpyGlassOverlayVisibility(bool Visible);
		void RemovePlayerNameplateWidget(class UHUDMarkerData* HUDMarkerData);
		void RemoveHUDMarkerWidget(class UHUDMarkerData* HUDMarkerData);
		void OnZiplineMovementModeChanged(bool bIsZiplining);
		void OnZiplineModeChanged(class AZiplineSelectorPawn* Selector);
		void OnSizzlingChanged(bool bIsSizzling, class AActor* Actor);
		void OnSizzleCountdownChanged(float NewRatio, bool bIsLocalPlayer);
		void OnSittingChangedImpl(bool bIsSitting);
		void OnSittingChanged(bool bIsSitting);
		void OnRevived();
		void OnPlayerNewPawn(class APawn* Pawn);
		void OnPlayerDeathOrIncap(const struct FDamageInfo& DamageInfo);
		void OnPerfectBlock();
		void OnOffHandChanged(class UItem* Item);
		void OnMainHandChanged(class UItem* Item);
		void OnHUDShowChange(bool bShowHUD);
		void OnHaulingChangedImpl(class UHaulingComponent* Sender);
		void OnHaulingChanged(bool bIsHauling);
		void OnGliderMovementModeChanged(bool bIsGliding);
		void OnGliderChanged(class UItem* Item);
		void OnFullBreathChanged(bool bFullBreath);
		void OnDeathCountdownChanged(bool bDeathCountdown);
		void OnClimbMovementModeChanged(bool bIsClimbing);
		void OnBuildingModeChanged(bool bIsPlacingBuilding);
		void OnBuildingFragileChanged(class ABuilding* Sender, bool IsFragile);
		void OnBlockChanged(bool bIsBlocking);
		bool IsPlayerNameplateDataActive(class UHUDMarkerData* HUDMarkerData);
		bool IsHUDMarkerDataActive(class UHUDMarkerData* HUDMarkerData);
		void HandleGenericMessage(const class FString& Message, class UTexture2D* MessageIcon);
		void AddPlayerNameplateWidget(class UPlayerNameplateWidget* PlayerNameplateWidget);
		void AddHUDMarkerWidget(class UHUDMarkerWidget* HUDMarkerWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.HungerReadoutWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UHungerReadoutWidget : public UGameUserWidget
	{
	public:
		float                                                      LastPlayerHunger;                                        // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDisplayedHunger;                                  // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UW0Y[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HungerRatio;                                             // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DRYL[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHungerAnim();
		void CheckFoodChange(class USurvivalComponent* Sender, float OldValue, float NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.IconKeyItem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UIconKeyItem : public UObject
	{
	public:
		bool                                                       bIsHeader;                                               // 0x0028(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FU62[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 DisplayData;                                             // 0x0030(0x0010) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic

	public:
		void SetIconKeyHeader(const struct FDataTableRowHandle& CategoryRow);
		void SetIconKeyData(const struct FDataTableRowHandle& IconRow);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.IconKeyItemPopulator
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UIconKeyItemPopulator : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.IncapacitateWindowWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UIncapacitateWindowWidget : public UWindowWidget
	{
	public:
		void EnableChatLog();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InGameMenuWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UInGameMenuWidget : public UWindowWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InstancedBuildingClassUserData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInstancedBuildingClassUserData : public UAssetUserData
	{
	public:
		class UClass*                                              BuildingClass;                                           // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InstancedStaticMeshFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInstancedStaticMeshFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int32_t GetClosestInstanceInRadius(class UInstancedStaticMeshComponent* Component, const struct FVector& Center, float Radius);
		void GatherInstancesInRadius(class UInstancedStaticMeshComponent* Component, const struct FVector& Center, float Radius, TArray<int32_t>* OutInstances);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InteractableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInteractableInterface : public UInterface
	{
	public:
		void UpdateInteractionPosition(class AActor* InstigatedBy);
		bool IsLockingAnim();
		EInteractionState IsInteractionEnabled(EInteractionChannel Channel, class AActor* InstigatedBy);
		void Interact(EInteractionChannel Channel, class AActor* InstigatedBy);
		bool HideHUDCursorWhenInRange();
		int32_t GetRequiredItemCount(EInteractionChannel Channel, class AActor* InstigatedBy);
		struct FDataTableRowHandle GetRequiredItem(EInteractionChannel Channel, class AActor* InstigatedBy);
		float GetOverrideInteractionTime(EInteractionChannel Channel, class AActor* InstigatedBy);
		EInteractionType GetOverrideInteractIcon(class AActor* InstigatedBy);
		EInteractionType GetInteractionType(EInteractionChannel Channel, class AActor* InstigatedBy);
		void GetInteractionText(EInteractionChannel Channel, class AActor* InstigatedBy, class FString* OutText);
		EInteractionPriority GetInteractionPriority(EInteractionChannel Channel, class AActor* InstigatedBy);
		EInteractAnimType GetInteractHoldAnimType(EInteractionChannel Channel, class AActor* InstigatedBy);
		EInteractHighlightLevel GetInteractHighlightLevel(class AActor* InstigatedBy);
		void GetInteractableName(class FString* OutText);
		EInteractAnimType GetInteractableAnimType(EInteractionChannel Channel, class AActor* InstigatedBy);
		class UClass* GetInteractableAnimProp(EInteractionChannel Channel, class AActor* InstigatedBy);
		class UAnimMontage* GetCustomInteractAnim(EInteractionChannel Channel, class AActor* InstigatedBy);
		void EndInteraction(class AActor* InstigatedBy);
		void EndInteractHold(class AActor* InstigatedBy, EInteractHoldHandleType HoldInteractType);
		void BeginInteractHold(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InteractableFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInteractableFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool ShowInteractionInterface(class UObject* Interactable, EInteractionChannel Channel, class AActor* InstigatedBy);
		bool ShouldShowAnyInteractionInterface(class UObject* Interactable, class AActor* InstigatedBy);
		void SendInteractError(class UObject* Source, class AActor* InstigatedBy, const class FText& Warning);
		bool IsAnyInteractionEnabled(class UObject* Interactable, class AActor* InstigatedBy);
		class UItem* GetInteractItem(class AActor* InstigatedBy);
		EInteractionType GetFirstEnabledPrimaryInteractionType(class UObject* Interactable, class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InterestCore
	 * Size -> 0x03B8 (FullSize[0x03E0] - InheritedSize[0x0028])
	 */
	class UInterestCore : public UObject
	{
	public:
		unsigned char                                              UnknownData_BF9W[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnActionExecuted;                                        // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVitalChanged;                                          // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MLRI[0x30];                                  // 0x0058(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGoapAction*                                         FleeBreadcrumbAction;                                    // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UGoapAction*                                         BaselineAction;                                          // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KR5Q[0x158];                                 // 0x0098(0x0158) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UObject*, struct FUnreachableActionData>        UnreachableActions;                                      // 0x01F0(0x0050) Transient, NativeAccessSpecifierPrivate
		TArray<struct FGoapActionInstance>                         DesiredActionSequence;                                   // 0x0240(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		struct FGoapActionInstance                                 PreviousAction;                                          // 0x0250(0x0060) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGoapActionInstance                                 BreadcrumbAction;                                        // 0x02B0(0x0060) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2PRV[0x10];                                  // 0x0310(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGoapActionInstance                                 DesiredAction;                                           // 0x0320(0x0060) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_293Q[0x60];                                  // 0x0380(0x0060) MISSED OFFSET (PADDING)

	public:
		bool ShouldTrackDesiredTarget();
		bool ShouldInteractWithFace();
		bool SetVitalValueBySemantic(const struct FGameplayTag& Tag, float Value);
		void SetActivityMode(ECreatureActivityMode Mode);
		bool HasInterest();
		bool HasDesiredBreadcrumb();
		bool GetVitalValueBySemantic(const struct FGameplayTag& Tag, float* Value);
		bool GetVitalValue(class UVitalStat* Stat, float* Value);
		struct FVitalState GetVitalState();
		TMap<class UVitalStat*, struct FVitalStatValue> GetVitals();
		struct FGameplayTag GetTirednessTag();
		struct FRealInterestState GetState();
		bool GetShouldDropBreadcrumbs();
		float GetPetHappinessNormalized();
		bool GetMustLand();
		struct FGameplayTagContainer GetFoodTags();
		EFaceTargetType GetFacingBehavior();
		struct FRotator GetDesiredTargetRotation();
		struct FVector GetDesiredTargetLocation();
		class UAttractionComponent* GetDesiredTarget();
		struct FVector GetBreadcrumbActionLocation();
		struct FGoapActionInstance GetBreadcrumbAction();
		ECreatureActivityMode GetActivityMode();
		void AdjustVitalValueBySemantic(const struct FGameplayTag& Tag, float Adjustment);
		void AdjustVitalValue(class UVitalStat* Stat, float Adjustment);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InterestComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UInterestComponent : public UActorComponent
	{
	public:
		class UInterestCore*                                       Core;                                                    // 0x00B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               FoodTags;                                                // 0x00B8(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        TirednessTag;                                            // 0x00D8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bShouldDropBreadcrumbs : 1;                              // 0x00E0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SL6G[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGoapAction*                                         FleeBreadcrumbAction;                                    // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGoapAction*                                         BaselineAction;                                          // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      VitalValues;                                             // 0x00F8(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UGoapWorldStateEvaluator*>                    WorldEvaluators;                                         // 0x0108(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void VisitBreadcrumb();
		bool HasInterest();
		bool HasDesiredBreadcrumb();
		TArray<class UGoapWorldStateEvaluator*> GetWorldEvaluators();
		bool GetVitalValueBySemantic(const struct FGameplayTag& Tag, float* Value);
		bool GetVitalValue(class UVitalStat* Stat, float* Value);
		struct FVitalState GetVitalState();
		TMap<class UVitalStat*, struct FVitalStatValue> GetVitals();
		struct FGameplayTag GetTirednessTag();
		struct FRealInterestState GetState();
		bool GetShouldDropBreadcrumbs();
		struct FGameplayTagContainer GetFoodTags();
		class UGoapAction* GetFleeBreadcrumbAction();
		struct FRotator GetDesiredTargetRotation();
		struct FVector GetDesiredTargetLocation();
		class AActor* GetDesiredTargetActor();
		class UAttractionComponent* GetDesiredTarget();
		struct FVector GetBreadcrumbActionLocation();
		struct FGoapActionInstance GetBreadcrumbAction();
		class UGoapAction* GetBaselineAction();
		ECreatureActivityMode GetActivityMode();
		void AdjustVitalValueBySemantic(const struct FGameplayTag& Tag, float Adjustment);
		void AdjustVitalValue(class UVitalStat* Stat, float Adjustment);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InterestManagerComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UInterestManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_22DB[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UInterestCore*>                               ImmediateScanList;                                       // 0x00D8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class UProxyAttractionComponent*>                   MovingProxyAdvertisements;                               // 0x00E8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class UAttractionComponent*>                        FullAdvertisements;                                      // 0x00F8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HV1K[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.GameInterfaceNarrationLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameInterfaceNarrationLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FInputChord GetFirstChordHelper(const class FName& ActionName, bool bAxisPositive, bool bUsingGamepad);
		void AddDoubleControlChunk(TArray<struct FNarrationChunk>* Chunks, class UWidget* Widget, const class FName& ActionName1, bool bAxisPositive1, const class FName& ActionName2, bool bAxisPositive2, const class FString& ActionDisplayName, bool bOnlyIfChanged, bool bVerbose);
		void AddControlChunk(TArray<struct FNarrationChunk>* Chunks, class UWidget* Widget, const class FName& ActionName, bool bAxisPositive, const class FString& ActionDisplayName, bool bOnlyIfChanged, bool bVerbose, bool bIsHold);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InteriorTrigger
	 * Size -> 0x0060 (FullSize[0x0290] - InheritedSize[0x0230])
	 */
	class AInteriorTrigger : public AActor
	{
	public:
		unsigned char                                              UnknownData_TSEF[0x50];                                  // 0x0230(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       Box1;                                                    // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       Box2;                                                    // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InventoryComponent
	 * Size -> 0x0100 (FullSize[0x01B0] - InheritedSize[0x00B0])
	 */
	class UInventoryComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_F6NW[0x20];                                  // 0x00B0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInventoryChanged;                                      // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemChanged;                                  // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemAdded;                                             // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemPickupNotification;                                // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemRemoved;                                           // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemCrafted;                                           // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemSpoiled;                                  // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemStashed;                                  // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryStashFailure;                                 // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemCraftedWithFullInventory;                          // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UItem*>                                       Items;                                                   // 0x0170(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class UAttractionComponent*                                AttractionComponent;                                     // 0x0180(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSize;                                                 // 0x0188(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAllowStacking : 1;                                      // 0x018C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bExposedToAI : 1;                                        // 0x018C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAllowHauledItems : 1;                                   // 0x018C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAllowAddItems : 1;                                      // 0x018C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_76NR : 1;                                    // 0x018C(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bBlockOnItemAddedBroadcast : 1;                          // 0x018C(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y8VJ : 1;                                    // 0x018C(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bSuspendItemSpoiling : 1;                                // 0x018C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQR9[0x13];                                  // 0x018D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGoapActionGetItem*                                  TakeItemTemplate;                                        // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGoapActionDumpItem*                                 DumpItemTemplate;                                        // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool TryCraftItem(const struct FDataTableRowHandle& RecipeRowHandle, bool bEquip, int32_t CraftCount);
		void ServerTransferItemTo(class UItem* Item, class UInventoryComponent* ToInventory, int32_t Count);
		void ServerTransferItemFrom(class UItem* Item, class UInventoryComponent* FromInventory, int32_t Count);
		void ServerTransferAllTo(class UInventoryComponent* ToInventory, bool IsNewItem);
		void ServerTransferAllFrom(class UInventoryComponent* FromInventory, bool IsNewItem);
		void ServerSwapItemSlotsBetweenInventories(class UItem* Item1, int32_t Index1, class UInventoryComponent* Inventory2, class UItem* Item2, int32_t Index2);
		void ServerSwapItemSlots(class UInventoryComponent* SourceInventory, class UItem* Item1, int32_t Index1, class UItem* Item2, int32_t Index2);
		void ServerRemoveItemMatchingItemData(const struct FDataTableRowHandle& ItemDataRowHandle, int32_t Count);
		void ServerRemoveItemAtIndex(int32_t Index, int32_t Count);
		void ServerRemoveItem(class UItem* Item, int32_t Count);
		void ServerRemoveAllItems();
		void ServerMergeItemStacks(class UInventoryComponent* SourceInventory, class UItem* SourceItem, class UItem* DestinationItem);
		void ServerDropItem(class UItem* Item, int32_t Count);
		void ServerDefragInventory(bool SingleItem);
		void ServerCreateAndDropItem(const struct FDataTableRowHandle& ItemRowHandle);
		void ServerCreateAndAddItem(const struct FDataTableRowHandle& ItemRowHandle, int32_t Count);
		void ServerCraftRecipeForInventory(const struct FDataTableRowHandle& RecipeRowHandle, class UInventoryComponent* DestinationInventory, class UItem* RecipeModItem);
		void ServerCraftRecipeDataForInventory(const struct FDataTableRowHandle& RecipeRowHandle, class UInventoryComponent* DestinationInventory, const struct FDataTableRowHandle& RecipeModRowHandle);
		void ServerCraftRecipe(const struct FDataTableRowHandle& RecipeRowHandle, bool bEquip, int32_t CraftCount);
		void ServerAddItem(class UItem* Item, bool IsNewItem);
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		class UItem* PopRandomItem();
		class UItem* PopItem();
		void OnRep_Items(TArray<class UItem*> PreviousItems);
		void OnItemsChanged();
		void OnItemChanged();
		void NotifyItemSpoiled(const struct FDataTableRowHandle& OriginalItemHandle, const struct FDataTableRowHandle& SpoiledResultHandle);
		bool IsSlotAvailable(int32_t SlotIndex);
		bool IsInventoryFull();
		bool IsInventoryEmpty();
		bool HasRequirements(TArray<struct FRecipeRequirements> Requirements);
		bool HasAnySpaceForItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool HasAnySpaceForItem(class UItem* Item);
		int32_t GetTotalItemCount();
		int32_t GetNextAvailableInventorySlot();
		int32_t GetMaxSize();
		int32_t GetMaxAllowedSpaceForItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		int32_t GetMaxAllowedSpaceForItem(class UItem* Item);
		TArray<class UItem*> GetItemsIncludingEquipment();
		TArray<class UItem*> GetItems();
		class UItem* GetItemInSlot(int32_t Index);
		int32_t GetItemCountMatchingHotBarKeyIncludingEquipment(const struct FHotBarQuickSlotItemTypeKey& ItemKey, bool IncludeBrokenItems);
		int32_t GetItemCountIncludingEquipment(const struct FDataTableRowHandle& ItemRowHandle, bool IncludeBrokenItems);
		int32_t GetItemCountForHotBarKey(const struct FHotBarQuickSlotItemTypeKey& ItemKey, bool IncludeBrokenItems);
		int32_t GetItemCountByName(const class FName& ItemName);
		int32_t GetItemCount(const struct FDataTableRowHandle& ItemRowHandle, bool IncludeBrokenItems);
		class UItem* GetItem(const class FName& ItemName);
		int32_t GetExistingStackSpaceForItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		int32_t GetEmptySlots();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		class UItem* FindPartialItemStackForItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		class UItem* FindPartialItemStackForItem(class UItem* Item);
		int32_t ContainsItemOfType(const struct FDataTableRowHandle& ItemRowHandle);
		bool ContainsItem(class UItem* Item);
		void ClientOnItemStashFailue();
		void ClientOnItemStashed(const struct FDataTableRowHandle& ItemRowHandle, int32_t Count);
		void ClientOnItemSpoiled(const struct FDataTableRowHandle& OriginalItemHandle, const struct FDataTableRowHandle& SpoiledResultHandle);
		void ClientOnItemRemoved(const struct FDataTableRowHandle& ItemRowHandle);
		void ClientOnItemAdded(const struct FDataTableRowHandle& ItemRowHandle, bool IsNewItem, int32_t NewCount);
		void ClientNotifyCraftedWithFullInventory(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanTransferAllFrom(class UInventoryComponent* FromInventory);
		bool CanCraftRecipe(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItems(TArray<class UItem*> InItems);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyInventoryComponent
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UProxyInventoryComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_O8O9[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       Items;                                                   // 0x0070(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    MaxSize;                                                 // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P0GH[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		bool IsInventoryFull();
		bool IsInventoryEmpty();
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		class UItem* FindPartialItemStackForItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		class UItem* FindPartialItemStackForItem(class UItem* Item);
		bool CanAddItems(TArray<class UItem*> InItems);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InventoryLODComponent
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UInventoryLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_IYK8[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		bool CanAddItems(TArray<class UItem*> Items);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.InventoryWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UInventoryWidget : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Item
	 * Size -> 0x01A8 (FullSize[0x01F0] - InheritedSize[0x0048])
	 */
	class UItem : public UPersistentObject
	{
	public:
		unsigned char                                              UnknownData_VKNW[0x18];                                  // 0x0048(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USpawnedItemLODActor>                 ItemVisuals;                                             // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPowerStateChangedDelegate;                             // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLaunchAttack;                                          // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitWithAttack;                                         // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectedAmmoChanged;                                   // 0x0098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemChanged;                                           // 0x00A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 ItemDataRowHandle;                                       // 0x00B8(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BOE9[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StackSize;                                               // 0x00D0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InventorySlot;                                           // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2FS6[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpoilEndTime;                                            // 0x00E8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HatchEndTime;                                            // 0x00EC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F3UN[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SelectedAmmoType;                                        // 0x00F8(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U696[0x10];                                  // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttackCombo*                                        AttackCombo;                                             // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttackCombo*                                        AlternateAttackCombo;                                    // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttackCombo*                                        SwimmingAttackCombo;                                     // 0x0120(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class UAttack*>                          AmmoAttacks;                                             // 0x0128(0x0050) Protected, NativeAccessSpecifierProtected
		float                                                      PowerUsed;                                               // 0x0178(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IsPowerOn : 1;                                           // 0x017C(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3TQ6[0x3];                                   // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPowerReservoir                                     PowerReservoir;                                          // 0x0180(0x0028) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      DurabilityRemaining;                                     // 0x01A8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O78F[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SourceCreatureName;                                      // 0x01B0(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BaseEnhancementLevel;                                    // 0x01C0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BonusEnhancementLevel;                                   // 0x01C4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        BonusEnhancementType;                                    // 0x01C8(0x0008) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ROMM[0x20];                                  // 0x01D0(0x0020) MISSED OFFSET (PADDING)

	public:
		bool UsesPowerType(const struct FGameplayTag& PowerType);
		bool UsesPower();
		bool UsesAmmo();
		float TryAddPower(const struct FGameplayTag& PowerType, float Charges, class AActor* InstigatedBy);
		int32_t SetStackSize(int32_t InStackSize);
		void SetInventorySlot(int32_t Slot);
		void RestoreAllDurability();
		bool RemovePowerCharges(float Count);
		void RemoveDurability(float Amount);
		void OnRep_SelectedAmmoType();
		void OnRep_PropertyChanged();
		void OnRep_ItemDataRowHandle(const struct FDataTableRowHandle& PreviousHandle);
		void OnRep_IsPowerOn();
		void OnPowerStoredChanged(const struct FGameplayTag& PowerType, float ChargesStored);
		void LatentSpawnItem(class UObject* WorldContextObject, const struct FTransform& SpawnTransform, class UBaseLODActor* DroppedBy, EItemSpawnType ItemSpawnType, const struct FLatentActionInfo& LatentInfo);
		bool IsValidBonusEnhancementType(const struct FGameplayTag& EnhancementType);
		bool IsStackFull();
		bool IsPowerFull();
		bool IsPowerEmpty();
		bool IsPersonalKeyItem();
		bool IsPartyKeyItem();
		bool IsLightSource();
		bool IsInstanceOf(const struct FDataTableRowHandle& Row);
		bool IsFullyCharged();
		bool IsEquipped();
		bool IsCharged();
		bool IsBusy();
		bool IsBroken();
		bool IsAtMaxDurability();
		bool IsArmorItem();
		bool IsAHaulingItem();
		int32_t IncrementStackSize();
		bool HasTag(const struct FGameplayTag& Tag);
		bool HasDurability();
		bool HasConversation();
		bool HasConsumableEffectEver();
		bool HasConsumableEffect();
		bool HasAnyTag(const struct FGameplayTagContainer& Tags);
		struct FGameplayTagContainer GetValidBonusEnhancementTags();
		TArray<class UItem*> GetValidAmmoTypes();
		struct FLocString GetTypeDisplayName();
		float GetTotalSpoilTime();
		float GetTotalHatchTime();
		int32_t GetTotalEnhancementLevels();
		float GetThrowSpeedMultiplierInWater();
		float GetThrowSpeedMultiplier();
		EThrowAttackType GetThrowAttackType();
		float GetThrowAttackDelay();
		TArray<struct FDataTableRowHandle> GetTechTreeUnlocks();
		class UAttack* GetSwimmingAttack(int32_t Index);
		int32_t GetStackSize();
		ESpoilState GetSpoilState();
		float GetSpoilProgress();
		class FString GetSourceCreatureName();
		class FName GetSelectedAmmoType();
		TArray<struct FDataTableRowHandle> GetResearchRecipeUnlocks();
		void GetRepairRequirements(TArray<struct FRecipeRequirements>* OutRequirements);
		int32_t GetRemainingAmmo();
		TArray<struct FDataTableRowHandle> GetRecipeUnlocks();
		int32_t GetProcessedResultItemCount(const struct FGameplayTag& ProcessingType);
		struct FDataTableRowHandle GetProcessedResultItem(const struct FGameplayTag& ProcessingType);
		struct FPowerReservoir GetPowerReservoir();
		float GetPowerPercentage();
		class USoundCue* GetPickupAudio();
		TArray<struct FDataTableRowHandle> GetNewResearchRecipeUnlocks();
		int32_t GetMaxStackSize();
		int32_t GetMaxHaulingAmount();
		float GetMaxDurability();
		class USpawnedItemLODActor* GetLodItemVisuals();
		class ASpawnedItem* GetItemVisuals();
		EItemType GetItemType();
		struct FDataTableRowHandle GetItemRequiredForEnhancement();
		struct FDataTableRowHandle GetItemDataRowHandle();
		struct FBaseItemData GetItemData();
		int32_t GetItemCountRequiredForBonusEnhancement();
		int32_t GetItemCountRequiredForBaseEnhancement();
		bool GetIsPowerOn();
		int32_t GetInventorySlot();
		float GetImpactSoundRange();
		float GetImpactSoundIntensity();
		struct FDataTableRowHandle GetImpactAttack();
		EHUDMarkerType GetHUDMarkerType();
		float GetHatchProgress();
		float GetGlideTimeRemaining();
		float GetGardenModifierValue();
		EGardenModifierType GetGardenModifierType();
		class AActor* GetEquippedOwner();
		EEquipmentSlot GetEquipmentSlot();
		class USoundCue* GetEquipAudio();
		int32_t GetEnhancementLevel();
		float GetDurabilityRemaining();
		float GetDurabilityRatio();
		float GetDurabilityModifier();
		class FString GetDisplayName();
		struct FLocString GetDescription();
		float GetDamageReductionValue();
		int32_t GetConversationStartNode();
		struct FGuid GetConversationID();
		class USoundCue* GetConsumeAudio();
		struct FGameplayTag GetBonusEnhancementType();
		int32_t GetBonusEnhancementLevel();
		float GetBlockStaminaRegenMultiplier();
		float GetBlockStaminaCost();
		float GetBlockDamageMultiplier();
		int32_t GetAvailableStackSize();
		class FString GetAttackSpeedText();
		struct FGameplayTag GetAttackSpeedTag();
		class UClass* GetAttackDamageTypeModifier();
		unsigned char GetAttackDamageTypeFlags();
		float GetAttackDamageModifier();
		TArray<class FName> GetAmmoTypes();
		void EnablePower(bool bPowerEnabled);
		void DumpPower(class AActor* Dumper);
		bool DestroyOnThrowAttack();
		int32_t DecrementStackSize();
		bool ConsumesPowerDuringRest();
		void ConsumeCharge();
		bool CanUse(class AActor* Instigator);
		bool CanThrowUnderWater();
		bool CanThrow();
		bool CanStack();
		bool CanSpoil();
		bool CanRepairNow();
		bool CanRepair();
		bool CanProcess(const struct FGameplayTag& ProcessingType);
		bool CanPowerBeUsedInWater();
		bool CanHatch();
		bool CanGetBonusEnhancements();
		bool CanEverUse();
		bool CanEverEnhance();
		bool CanEverDumpPower();
		bool CanEquipTo(class AActor* Character);
		bool CanEquip();
		bool CanEnhance();
		bool CanDumpPower();
		bool CanBlock();
		bool CanAttack();
		bool CanAnalyze();
		bool CanAddPower(const struct FGameplayTag& PowerType, float Charges);
		bool CanAcceptPowerType(const struct FGameplayTag& PowerType);
		bool AppliesPositiveSurvivalStatOnConsume(EStatusEffectType StatusEffectType, bool IgnoreNegativeEffects);
		bool AlwaysOn();
		int32_t AdjustStackSize(int32_t AmountToAdjustBy);
		bool AddCharges(const struct FGameplayTag& PowerTag, float ChargesToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemContainerFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemContainerFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class UItem* FindPartialItemStackForItemHandle(class UObject* Container, const struct FDataTableRowHandle& ItemRowHandle);
		class UItem* FindPartialItemStackForItem(class UObject* Container, class UItem* Item);
		class UItem* FindItem(class UObject* Container, const struct FDataTableRowHandle& ItemData, bool SearchForwards);
		struct FAddItemResult CreateAndAddItem(class UObject* Container, const struct FDataTableRowHandle& ItemRowHandle, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemContainerActorFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemContainerActorFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void RemoveItemMatchingItemData(class AActor* ItemContainerActor, const struct FDataTableRowHandle& ItemData, bool SearchForwards);
		void RemoveItem(class AActor* ItemContainerActor, class UItem* Item, bool SearchForwards);
		bool HasRequirements(class AActor* ItemContainerActor, TArray<struct FRecipeRequirements> Requirements);
		TArray<struct FDataTableRowHandle> GetItemDataWithTag(class AActor* ItemContainerActor, const struct FGameplayTag& ItemTag);
		int32_t GetItemCount(class AActor* ItemContainerActor, const struct FDataTableRowHandle& ItemRowHandle);
		class UItem* GetItem(class AActor* ItemContainerActor, const struct FDataTableRowHandle& ItemRowHandle);
		TArray<class UItem*> GetAllItems(class AActor* ItemContainerActor);
		void CraftRecipeForInventory(class AActor* ItemContainerActor, const struct FDataTableRowHandle& RecipeRowHandle, class UInventoryComponent* DestinationInventory);
		bool CanCraftRecipe(class AActor* ItemContainerActor, const struct FDataTableRowHandle& RecipeRowHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemContainerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemContainerInterface : public UInterface
	{
	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		bool HasItems();
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		void DropItem(class UItem* Item, int32_t Count);
		bool CanAddItems(TArray<class UItem*> Items);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* Item);
		void AddItem(class UItem* Item, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemDataFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemDataFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsRepairTool(const struct FBaseItemData& ItemData);
		bool IsArmorSlot(EEquipmentSlot Slot);
		bool GetItemDataFilterMatches(const struct FBaseItemData& ItemData, const class FString& FilterText);
		void GetItemDataEquippedActor(const struct FBaseItemData& ItemData, class AActor* Equipper);
		void GetEquippableStatusEffects(struct FBaseItemData* ItemData, TArray<struct FDataTableRowHandle>* StatusEffects);
		void GetConsumableStatusEffects(struct FBaseItemData* ItemData, TArray<struct FDataTableRowHandle>* StatusEffects);
		float GetAverageItemAttackHitStun(const struct FBaseItemData& ItemData);
		float GetAverageItemAttackDamage(const struct FBaseItemData& ItemData);
		void GetAttackStatusEffects(struct FBaseItemData* ItemData, TArray<struct FDataTableRowHandle>* StatusEffects);
		struct FDataTableRowHandle GetAttackData(const struct FBaseItemData& ItemData);
		void GetAllItemStatusEffects(struct FBaseItemData* ItemData, TArray<struct FDataTableRowHandle>* StatusEffects);
		bool CanResearch(const struct FBaseItemData& ItemData);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemManagerComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UItemManagerComponent : public UActorComponent
	{
	public:
		TArray<class UItem*>                                       ItemsWithSpawnInFlight;                                  // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HXG8[0x28];                                  // 0x00C0(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnRest(float RestDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemProcessingDataFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemProcessingDataFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsStarted(const struct FItemProcessingData& Data);
		bool IsProcessingTimeFinished(const struct FItemProcessingData& Data);
		float GetTotalProcessingTime(const struct FItemProcessingData& Data);
		float GetRemainingProcessingTime(const struct FItemProcessingData& Data);
		float GetProgress(const struct FItemProcessingData& Data);
		struct FGameplayTag GetProcessingType(const struct FItemProcessingData& Data);
		EItemProcessingState GetProcessingState(const struct FItemProcessingData& Data);
		float GetElapsedProcessingTime(const struct FItemProcessingData& Data);
		bool CanProcess(const struct FItemProcessingData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemProcessingBuilding
	 * Size -> 0x0130 (FullSize[0x0758] - InheritedSize[0x0628])
	 */
	class AItemProcessingBuilding : public AWidgetBuilding
	{
	public:
		unsigned char                                              UnknownData_ZOES[0x38];                                  // 0x0628(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnItemProcessed;                                         // 0x0660(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProcessingItemsChanged;                                // 0x0670(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ProcessingType;                                          // 0x0680(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSimultaneousItems;                                    // 0x0688(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxWorkingItems;                                         // 0x068C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FItemProcessingData>                         ProcessingItems;                                         // 0x0690(0x0010) Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemProcessingData>                         PreviousProcessingItems;                                 // 0x06A0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        CookingItemSpawnSockets;                                 // 0x06B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        OutputItemSpawnSockets;                                  // 0x06C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, class USceneComponent*>                  SocketComponents;                                        // 0x06D0(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FLocString                                          UseText;                                                 // 0x0720(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          EmptyText;                                               // 0x0730(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          FlavorText;                                              // 0x0740(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          FlavorImage;                                             // 0x0750(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool WillQueueProcessingItems();
		void TickVisuals(float DeltaSeconds);
		void TickProcessing(float DeltaTime);
		void RemoveItem(class UItem* Item, class AActor* InInstigator);
		void OnRep_ProcessingItemsChanged();
		void NotifyWorldItemTake(class UItem* Item);
		void NotifyProcessingStateChanged(const struct FGameplayTag& NewProcessingType, int32_t CookingSlot);
		void MulticastNotifyProcessingStateChanged(const struct FGameplayTag& NewProcessingType, int32_t CookingSlot);
		bool IsProcessingAnything();
		bool IsItemFinished(int32_t Index);
		bool IsFull();
		struct FDataTableRowHandle GetResultItemType(int32_t Index);
		struct FGameplayTag GetProcessingType();
		EItemProcessingState GetProcessingState(int32_t Index);
		class FName GetProcessingSocketForItem(int32_t Index);
		TArray<struct FItemProcessingData> GetProcessingItems();
		class UItem* GetProcessingItem(int32_t Index);
		class FName GetOutputSocketForItem(int32_t Index);
		float GetItemProgress(int32_t Index);
		int32_t GetCurrentProcessingItemIndex();
		int32_t GetCurrentItemCount();
		class USceneComponent* GetComponentForSocket(const class FName& SocketName);
		bool CanProcessItem(class UItem* Item);
		bool CanAddItem(class UItem* Item);
		void AddItemToProcess(class UItem* Item, class ASurvivalCharacter* InInstigator, int32_t SlotToUse);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemSource
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemSource : public UInterface
	{
	public:
		bool IsSourceForItem(const struct FDataTableRowHandle& ItemType);
		struct FVector GetItemSourceWorldLocation(const struct FDataTableRowHandle& ItemType);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemSpawnData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UItemSpawnData : public UObject
	{
	public:
		class UVisualEffect*                                       SpawnVFX;                                                // 0x0028(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SpawnOffset;                                             // 0x0030(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SimulatePhysicsOnSpawn;                                  // 0x003C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanProxyOnSpawn;                                         // 0x003D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EWFL[0x2];                                   // 0x003E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      BlueprintPool;                                           // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		TArray<class UClass*> GetPossibleActors();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemSpawnGroupData
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UItemSpawnGroupData : public UObject
	{
	public:
		class UTexture2D*                                          BillboardSprite;                                         // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FItemSpawnGroupEvent>                        Events;                                                  // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       NeverReuseSpawnPoints;                                   // 0x0040(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESpawnProximityBehavior                                    PlayerProximityBehavior;                                 // 0x0041(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RaycastSoftSpawns;                                       // 0x0042(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OIU5[0x1];                                   // 0x0043(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGlobalVariableReference                            SpawnGlobalVariable;                                     // 0x0044(0x0010) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EComparisonOperator                                        GlobalVariableComparisonOperator;                        // 0x0054(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OSV5[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GlobalVariableCompareValue;                              // 0x0058(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerSpawnDistance;                                     // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnEvaluateInterval;                                   // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerDistanceCheckInterval;                             // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool HasGlobalVariableCondition();
		bool HasEventInterval(ESpawnIntervalBehavior Event);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemSpawnManager
	 * Size -> 0x01A0 (FullSize[0x03D0] - InheritedSize[0x0230])
	 */
	class AItemSpawnManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_ZUQH[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UItemSpawnGroupData*, struct FItemSpawnGroup>   ItemSpawnGroups;                                         // 0x0240(0x0050) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UTrackedItemSpawnGroup*>                      TrackedGroupSpawns;                                      // 0x0290(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		struct FTrackedItemSpawnGroupRepDataArray                  ReplicatedSpawnData;                                     // 0x02A0(0x0118) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OAYX[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x03C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_ReplicatedSpawnData();
		class UTrackedItemSpawnGroup* AddSpawnGroupHelper(class AActor* InOwner, class UItemSpawnGroupData* Group, const struct FItemSpawnGroup& SpawnGroup, bool bEnabled);
		class UTrackedItemSpawnGroup* AddSpawnGroup(class AActor* InOwner, class UItemSpawnGroupData* Group, bool bEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ItemSpawnPoint
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class AItemSpawnPoint : public AActor
	{
	public:
		class USceneComponent*                                     SceneRootComponent;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBillboardComponent*                                 BillboardComponent;                                      // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ItemSpawnGroupData;                                      // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ItemSpawnData;                                           // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameVersion                                        VersionAdded;                                            // 0x0260(0x000C) Edit, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XSHK[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.KeybindingDisplay
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class UKeybindingDisplay : public UGameUserWidget
	{
	public:
		class UTextBlock*                                          Text;                                                    // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              ButtonImage;                                             // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y3PQ[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAnyControlMapping                                  BoundControl;                                            // 0x0298(0x0030) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bGamepadControls;                                        // 0x02C8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4SSN[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateText();
		void UpdateControl(const struct FAnyControlMapping& Control);
		void UnsetKey(bool bNotify);
		void SetControl(const struct FAnyControlMapping& Control, bool bInGamepadControls, bool bNotify);
		void SetAxis(const struct FInputAxisKeyMapping& Axis, bool bInGamepadControls, bool bNotify);
		void SetAction(const struct FInputActionKeyMapping& Key, bool bInGamepadControls, bool bNotify);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabeledDropdownWidget
	 * Size -> 0x0040 (FullSize[0x0330] - InheritedSize[0x02F0])
	 */
	class ULabeledDropdownWidget : public UBaseSettingsWidget
	{
	public:
		unsigned char                                              UnknownData_JQXV[0x20];                                  // 0x02F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UComboBoxString*                                     DropdownSelection;                                       // 0x0310(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8IHY[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOptionsDropdownBaseAsset*                           DropDownAsset;                                           // 0x0320(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LastConfirmedValue;                                      // 0x0328(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EEA2[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void InitManual(int32_t SelectedIndex);
		void Init(TArray<class FString> Options, int32_t SelectedIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabeledKeybinding
	 * Size -> 0x00A8 (FullSize[0x0398] - InheritedSize[0x02F0])
	 */
	class ULabeledKeybinding : public UBaseSettingsWidget
	{
	public:
		unsigned char                                              UnknownData_7OOM[0x40];                                  // 0x02F0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAnyControlMappingKey                               MappingKey;                                              // 0x0330(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGamepadControls;                                        // 0x0340(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EFJE[0x7];                                   // 0x0341(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UKeybindingDisplay*                                  Binding0;                                                // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UKeybindingDisplay*                                  Binding1;                                                // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DII0[0x40];                                  // 0x0358(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetMappingKey(const struct FAnyControlMappingKey& Key, bool bInGamepadControls);
		void OnControlMapping1Changed(const struct FAnyControlMapping& Mapping);
		void OnControlMapping0Changed(const struct FAnyControlMapping& Mapping);
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabeledToggle
	 * Size -> 0x0038 (FullSize[0x0328] - InheritedSize[0x02F0])
	 */
	class ULabeledToggle : public UBaseSettingsWidget
	{
	public:
		unsigned char                                              UnknownData_GD5F[0x20];                                  // 0x02F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          Value;                                                   // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox*                                           ToggleBtn;                                               // 0x0318(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NZGI[0x8];                                   // 0x0320(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetIsChecked(bool bInIsChecked);
		void OnToggleStateChanged(bool bIsToggled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabledSliderWidget
	 * Size -> 0x0058 (FullSize[0x0348] - InheritedSize[0x02F0])
	 */
	class ULabledSliderWidget : public UBaseSettingsWidget
	{
	public:
		unsigned char                                              UnknownData_SGDO[0x20];                                  // 0x02F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnValueChangedEvent;                                     // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTextBlock*                                          ValueTextBlock;                                          // 0x0320(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USlider*                                             Slider;                                                  // 0x0328(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ApplyImmediately;                                        // 0x0330(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QLXI[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinValue;                                                // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxValue;                                                // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StepSize;                                                // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETextDisplayType                                           TextDisplayType;                                         // 0x0340(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BWRT[0x3];                                   // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastConfirmedValue;                                      // 0x0344(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		float ValueToNormalized(float Value);
		void OnSliderValueChanged(float ChangedValue);
		void OnSliderMouseCaptureEnd();
		float NormalizedToValue(float Normalized);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabMachineBase
	 * Size -> 0x0060 (FullSize[0x0290] - InheritedSize[0x0230])
	 */
	class ALabMachineBase : public AActor
	{
	public:
		class UStaticMeshComponent*                                BaseCabinet;                                             // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group1Cabinet;                                           // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group1Trim;                                              // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group1Doodads;                                           // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group2Cabinet;                                           // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group2Trim;                                              // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group2Doodads;                                           // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group3Cabinet;                                           // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group3Trim;                                              // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Group3Doodads;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                CabinetDoor;                                             // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLabMachineInfoBase                                 LabMachineInfo;                                          // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		struct FLabMachineBlueprintableInfo GetInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabMachineA
	 * Size -> 0x0050 (FullSize[0x02E0] - InheritedSize[0x0290])
	 */
	class ALabMachineA : public ALabMachineBase
	{
	public:
		class UStaticMeshComponent*                                MonitorA;                                                // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                CabinetA;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                ConsolePlate;                                            // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                ConsoleButtons;                                          // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Panel;                                                   // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                PanelDoodads;                                            // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                EmissiveStrip;                                           // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Table;                                                   // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        EmissiveStripColor;                                      // 0x02D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LabMachineFullBase
	 * Size -> 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
	 */
	class ALabMachineFullBase : public AActor
	{
	public:
		void SetupMeshesOnReplacementActor(class ALabMachineBase* NewActor);
		void SetLabMachineInfo(const struct FLabMachineBlueprintableInfo& InInfo);
		struct FLabMachineBlueprintableInfo GetLabMachineInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LadderBuilding
	 * Size -> 0x0018 (FullSize[0x0638] - InheritedSize[0x0620])
	 */
	class ALadderBuilding : public ABuilding
	{
	public:
		unsigned char                                              UnknownData_MP0B[0x8];                                   // 0x0620(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClimbableSplineComponent*                           CombinedSpline;                                          // 0x0628(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InteractRangeCap;                                        // 0x0630(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RJPG[0x4];                                   // 0x0634(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_CombinedSpline();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LandscapeRTManager
	 * Size -> 0x0050 (FullSize[0x0280] - InheritedSize[0x0230])
	 */
	class ALandscapeRTManager : public AActor
	{
	public:
		unsigned char                                              NativeActorsUsingRT[0x50];                               // 0x0230(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		bool HasAnyActors();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LatencyWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class ULatencyWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_PEAP[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPingChanged(int32_t Ping);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LiteBuildingGridObject
	 * Size -> 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
	 */
	class ULiteBuildingGridObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_0GBB[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLiteBuildingGrid                                   Grid;                                                    // 0x0030(0x0240) NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LocalizedTextBlock
	 * Size -> 0x0010 (FullSize[0x02C8] - InheritedSize[0x02B8])
	 */
	class ULocalizedTextBlock : public UGameTextBlock
	{
	public:
		struct FLocString                                          LocalizedString;                                         // 0x02B8(0x0010) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetLocalizedString(const struct FLocString& LocString);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LODableActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULODableActorInterface : public UInterface
	{
	public:
		void TransferBlueprintInstanceDataToProxy();
		bool ShowLODActorDebug();
		bool ShouldRestoreTransform();
		void RestoreBlueprintInstanceDataToFullActor();
		bool HasBlueprintInstanceData();
		class UClass* GetLODActorClass();
		bool GetLifetimeDespawnWhenProxyOnly();
		float GetGameLifetimeHours();
		bool CanActorProxy();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LODableComponentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULODableComponentInterface : public UInterface
	{
	public:
		class UClass* GetLODComponentClass();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LODActorManagerComponent
	 * Size -> 0x01C0 (FullSize[0x0270] - InheritedSize[0x00B0])
	 */
	class ULODActorManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WHQ4[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      SupportedLODComponents;                                  // 0x00C0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8F4H[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBaseLODActor*>                               LODActors;                                               // 0x00E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      AllTrackedActorClasses;                                  // 0x00F0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      AllTrackedLODActorClasses;                               // 0x0100(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FClassTreeNode                                      TrackedActorClassTree;                                   // 0x0110(0x0018) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WAWJ[0x148];                                 // 0x0128(0x0148) MISSED OFFSET (PADDING)

	public:
		void OnLODActorDestroyed(class UBaseLODActor* LODActor);
		struct FClassTreeNode GetTrackedActorClassTree();
		TArray<class UBaseLODActor*> GetLODActorsOfExactlyLODActorClass(class UClass* Class);
		TArray<class UBaseLODActor*> GetLODActorsOfExactlyClass(class UClass* Class);
		TArray<class UBaseLODActor*> GetLODActorsImplementingLODActorClass(class UClass* Class);
		TArray<class UBaseLODActor*> GetLODActorsImplementingClass(class UClass* Class);
		TArray<class UClass*> GetAllTrackedLODActorClasses();
		TArray<class UClass*> GetAllTrackedActorClasses();
		TArray<class UBaseLODActor*> GetAllLODActors();
		void FinishSpawningLODActor(class UBaseLODActor* LODActor);
		class UBaseLODComponent* FindLODComponentForComponent(class UActorComponent* Component);
		class UBaseLODActor* FindLODActorForComponent(class UActorComponent* Component);
		class UBaseLODActor* FindLODActorForActor(class AActor* Actor);
		class UBaseLODActor* FindLODActor(const struct FGuid& Guid);
		class UBaseLODActor* CreateLODActorOfTypeDeferred(class UClass* ActorClass, const struct FTransform& Transform);
		class UBaseLODActor* CreateLODActorOfType(class UClass* ActorClass, const struct FTransform& Transform);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LODActorStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULODActorStatics : public UBlueprintFunctionLibrary
	{
	public:
		void LODActorSaveBlueprintVectorArray(TArray<struct FVector> inArray);
		void LODActorSaveBlueprintVector(const struct FVector& InVector);
		void LODActorSaveBlueprintInt(int32_t inInt);
		void LODActorSaveBlueprintFloat(float InFloat);
		void LODActorSaveBlueprintBool(bool InBool);
		TArray<struct FVector> LODActorRestoreBlueprintVectorArray();
		struct FVector LODActorRestoreBlueprintVector();
		int32_t LODActorRestoreBlueprintInt();
		float LODActorRestoreBlueprintFloat();
		bool LODActorRestoreBlueprintBool();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LookTriggerComponent
	 * Size -> 0x0078 (FullSize[0x02A0] - InheritedSize[0x0228])
	 */
	class ULookTriggerComponent : public USceneComponent
	{
	public:
		TArray<struct FGlobalVariableReferemceConditional>         GlobalVariableConditionals;                              // 0x0228(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      MaxRange;                                                // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AngleRange;                                              // 0x023C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBlockedByAttachParent;                                  // 0x0240(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6WNZ[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLookTriggered;                                         // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLookEnded;                                             // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7OHX[0x38];                                  // 0x0268(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LootableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULootableInterface : public UInterface
	{
	public:
		bool CheckLootConditionals(const struct FDataTableRowHandle& ItemDataRowHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LootBag
	 * Size -> 0x00F8 (FullSize[0x0328] - InheritedSize[0x0230])
	 */
	class ALootBag : public AActor
	{
	public:
		unsigned char                                              UnknownData_YEOP[0x20];                                  // 0x0230(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               OwnerPlayerGuid;                                         // 0x0250(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OwnerName;                                               // 0x0260(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                OverrideName;                                            // 0x0270(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bOnlyAllowPreviousOwnerToLoot;                           // 0x0288(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoLootOnInteract;                                     // 0x0289(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyWhenEmpty;                                       // 0x028A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6MF5[0x1];                                   // 0x028B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          DisplayName;                                             // 0x028C(0x0010) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ST6Y[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULootComponent*                                      LootComponent;                                           // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x02B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x02B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              WidgetClass[0x28];                                       // 0x02C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_EHOY[0x38];                                  // 0x02E8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseBuoyancy : 1;                                        // 0x0320(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CU2Z[0x7];                                   // 0x0321(0x0007) MISSED OFFSET (PADDING)

	public:
		void TickBuoyancy(float DeltaTime);
		void ResyncReplicationTransform();
		bool GetShouldShowHUDMarker();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LootComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class ULootComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KP9J[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLootData>                                   Items;                                                   // 0x00C0(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              bDestroyBody : 1;                                        // 0x00D0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JFJR[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InteractDelayOnDeath;                                    // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGoapActionHarvest*                                  TemplateHarvestAction;                                   // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bInteractable : 1;                                       // 0x00E0(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4XEE[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void StartCacheSpawnPointVelocities();
		void SetSpawnPointForItem(class USceneComponent* SpawnPoint, int32_t ItemIndex);
		void SetAllDropChanceMultipliers(float Value);
		void ServerSpawnLoot(class AActor* Looter, ELootSpawnType SpawnType);
		void OnDeath(const struct FDamageInfo& DamageInfo);
		void OnDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		TArray<class UGoapAction*> AllocateGOAPActions(class USurvivalGameInstance* GameInstance, class UObject* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyLootComponent
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UProxyLootComponent : public UProxyComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.LootLODComponent
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class ULootLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_S09F[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineAIPerceptionComponent
	 * Size -> 0x0018 (FullSize[0x01A8] - InheritedSize[0x0190])
	 */
	class UMaineAIPerceptionComponent : public UAIPerceptionComponent
	{
	public:
		unsigned char                                              UnknownData_SGV9[0x18];                                  // 0x0190(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnActivityModeChanged(class ASurvivalAIController* Sender, ECreatureActivityMode ActivityMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineAISystem
	 * Size -> 0x0008 (FullSize[0x0138] - InheritedSize[0x0130])
	 */
	class UMaineAISystem : public UAISystem
	{
	public:
		class UAITokenManager*                                     TokenManager;                                            // 0x0130(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineAnalyticsManager
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMaineAnalyticsManager : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineCharMovementComponent
	 * Size -> 0x0290 (FullSize[0x0DB0] - InheritedSize[0x0B20])
	 */
	class UMaineCharMovementComponent : public UCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_3AOB[0x50];                                  // 0x0B20(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartsClimbing;                                        // 0x0B70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnderwaterChanged;                                     // 0x0B80(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSittingChanged;                                        // 0x0B90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      MaxSprintSpeed;                                          // 0x0BA0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimMaxSpeedMultiplierRange;                             // 0x0BA4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimAttackMaxSpeedMultiplierRange;                       // 0x0BA8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockingSpeedModifier;                                   // 0x0BAC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintStaminaRate;                                       // 0x0BB0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlideYawRate;                                            // 0x0BB4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlideRollRateMultiplier;                                 // 0x0BB8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlideBankRollMagnitude;                                  // 0x0BBC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlideMinStartElevation;                                  // 0x0BC0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ZiplineIgnoreCollisionDistance;                          // 0x0BC4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ZiplineMaxSpeedMultiplier;                               // 0x0BC8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ZiplineReattachDelay;                                    // 0x0BCC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ZiplinePropTemplate[0x28];                               // 0x0BD0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      MaxSwimSprintSpeed;                                      // 0x0BF8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4V2R[0x4];                                   // 0x0BFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClimbingSprintSpeedMultiplier;                           // 0x0C00(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ClimbingSize;                                            // 0x0C04(0x0008) Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bExitSplinesAtEnds : 1;                                  // 0x0C0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EClimbSplineRotationType                                   ClimbSplineRotationType;                                 // 0x0C0D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAnyDamageExitsSpline;                                   // 0x0C0E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NEK3[0x1];                                   // 0x0C0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         MaxSpeedMultiplier_Nav;                                  // 0x0C10(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         MaxSpeedMultiplier_Attack;                               // 0x0C18(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         MaxSpeedMultiplier_AbsoluteInv;                          // 0x0C20(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YKES[0x10];                                  // 0x0C28(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClimbableSplineKey                                 AttachedSpline;                                          // 0x0C38(0x0038) Transient, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZTC4[0x20];                                  // 0x0C70(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAttractionComponentKey                             PerchedObject;                                           // 0x0C90(0x0038) Transient, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2P54[0x30];                                  // 0x0CC8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EFootstepType, class UFootstepData*>                  FootstepData;                                            // 0x0CF8(0x0050) Edit, NativeAccessSpecifierPrivate
		float                                                      CrouchingNoiseMultiplier;                                // 0x0D48(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseMovementAudioLoops;                                  // 0x0D4C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QGUX[0x3];                                   // 0x0D4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          WalkAudioLoop;                                           // 0x0D50(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundBase*                                          SprintAudioLoop;                                         // 0x0D58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MovementLoopFadeInTime;                                  // 0x0D60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MovementLoopFadeOutTime;                                 // 0x0D64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                MovementLoopAttachName;                                  // 0x0D68(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3TZJ[0x40];                                  // 0x0D70(0x0040) MISSED OFFSET (PADDING)

	public:
		void Unperch(EDetachSplineReason Reason);
		bool ToggleSprint();
		bool ToggleGlide();
		bool ToggleAutorun();
		void SetStandingInWater(bool bInWater);
		void SetIsSitting(bool bSitting);
		void SetAutorun(bool bState);
		bool Perch(const struct FAttractionComponentKey& Target);
		void OnFoliageDamaged(class AActor* Sender, float Damage, const struct FDamageEvent& DamageEvent, const struct FDamageInfo& DamageInfo);
		bool IsZiplining();
		bool IsUnderwater();
		bool IsStandingInWater();
		bool IsSprinting();
		bool IsSitting();
		bool IsPerched();
		bool IsGliding();
		bool IsClimbing();
		bool IsAutorunning();
		float GetZiplineReattachTime();
		float GetZiplinePosition();
		float GetPreviousZiplineChangeTime();
		class AZiplineLine* GetPreviousZipline();
		class UCharacterMotionEaterComponent* GetMotionEater();
		float GetMaxGroundSpeed();
		EGlidingStyle GetGlidingStyle();
		ECameraDisplayMode GetCameraDisplayMode();
		class AZiplineLine* GetAttachedZipline();
		void DetachFromSpline(EDetachSplineReason Reason);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineFreeCamPhotoPawn
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class AMaineFreeCamPhotoPawn : public AFreeCamPhotoPawn
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineGameModeBase
	 * Size -> 0x0000 (FullSize[0x02D0] - InheritedSize[0x02D0])
	 */
	class AMaineGameModeBase : public AGameModeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineGameUserSettings
	 * Size -> 0x0780 (FullSize[0x08A0] - InheritedSize[0x0120])
	 */
	class UMaineGameUserSettings : public UGameUserSettings
	{
	public:
		bool                                                       bHasSeenArachnophobiaMessage;                            // 0x0120(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasSeenAccessibilityMessage;                            // 0x0121(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasSeenEarlyAccessMessage;                              // 0x0122(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DF5X[0x1];                                   // 0x0123(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MasterSoundVolume;                                       // 0x0124(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KW5C[0x10];                                  // 0x0128(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EffectsSoundVolume;                                      // 0x0138(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J64M[0x14];                                  // 0x013C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AmbienceSoundVolume;                                     // 0x0150(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DSUA[0x14];                                  // 0x0154(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MusicSoundVolume;                                        // 0x0168(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6E69[0x14];                                  // 0x016C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UISoundVolume;                                           // 0x0180(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T5FD[0x14];                                  // 0x0184(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NarrationSoundVolume;                                    // 0x0198(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BJGD[0x14];                                  // 0x019C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VoiceSoundVolume;                                        // 0x01B0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FR1S[0x14];                                  // 0x01B4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VoiceChatSoundVolume;                                    // 0x01C8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BVM4[0x14];                                  // 0x01CC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EVoiceChatActivation                                       VoiceChatActivation;                                     // 0x01E0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R7KQ[0x17];                                  // 0x01E1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bXAxisInverted;                                          // 0x01F8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D3SA[0x17];                                  // 0x01F9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bYAxisInverted;                                          // 0x0210(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ADXE[0x17];                                  // 0x0211(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerXAxisInverted;                                // 0x0228(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N2K9[0x17];                                  // 0x0229(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerYAxisInverted;                                // 0x0240(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A4SU[0x17];                                  // 0x0241(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerMoveXInverted;                                // 0x0258(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AR86[0x17];                                  // 0x0259(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerMoveYInverted;                                // 0x0270(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FCZB[0x17];                                  // 0x0271(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MouseSensitivityValue;                                   // 0x0288(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MouseSensitivityValueX;                                  // 0x028C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R48J[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MouseSensitivityValueY;                                  // 0x02A0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7R4R[0x14];                                  // 0x02A4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerSensitivity;                                   // 0x02B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ControllerSensitivityX;                                  // 0x02BC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RXT7[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerSensitivityY;                                  // 0x02D0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FHZO[0x14];                                  // 0x02D4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bMouseToggleSprint;                                      // 0x02E8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9K23[0x17];                                  // 0x02E9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bMouseToggleCrouch;                                      // 0x0300(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SYZF[0x17];                                  // 0x0301(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerToggleSprint;                                 // 0x0318(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X4CI[0x17];                                  // 0x0319(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerToggleCrouch;                                 // 0x0330(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9O3H[0x17];                                  // 0x0331(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bKeyboardLevelViewOnSprint;                              // 0x0348(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UU8O[0x17];                                  // 0x0349(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerLevelViewOnSprint;                            // 0x0360(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_350N[0x17];                                  // 0x0361(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bControllerRumbleEnabled;                                // 0x0378(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TGEH[0x17];                                  // 0x0379(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerLeftInnerDeadZone;                             // 0x0390(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B4HC[0x14];                                  // 0x0394(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerLeftOuterDeadZone;                             // 0x03A8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PCEC[0x14];                                  // 0x03AC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerRightInnerDeadZone;                            // 0x03C0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_17KB[0x14];                                  // 0x03C4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerRightOuterDeadZone;                            // 0x03D8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NEUZ[0x14];                                  // 0x03DC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ActionMappingChangedDelegate;                            // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             AxisMappingChangedDelegate;                              // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5Y3V[0x50];                                  // 0x0410(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInputActionKeyMapping>                      AddedActionKeyBinds;                                     // 0x0460(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FInputActionKeyMapping>                      RemovedActionKeyBinds;                                   // 0x0470(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FInputAxisKeyMapping>                        AddedAxisKeyBinds;                                       // 0x0480(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FInputAxisKeyMapping>                        RemovedAxisKeyBinds;                                     // 0x0490(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RAT3[0x188];                                 // 0x04A0(0x0188) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutosaveInterval;                                        // 0x0628(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutosavesNumber;                                         // 0x062C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowTutorial;                                           // 0x0630(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EInteractHighlightLevel                                    InteractHighlightLevel;                                  // 0x0631(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExtraWideInteract;                                      // 0x0632(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ELanguageSetting                                           LanguageSetting;                                         // 0x0633(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MotionBlurScale;                                         // 0x0634(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ChromaticAberration;                                     // 0x0638(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D5F4[0x17];                                  // 0x0639(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GammaLevel;                                              // 0x0650(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5SXK[0x14];                                  // 0x0654(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFPSLimit                                                  FPSLimit;                                                // 0x0668(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WB5Z[0x17];                                  // 0x0669(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Resolution3D;                                            // 0x0680(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K24Z[0x14];                                  // 0x0684(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasRunHardwareBenchmark;                                // 0x0698(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasWarnedForUnsafeValues;                               // 0x0699(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EScalabilitySettings                                       DefaultQualitySettings;                                  // 0x069A(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EScalabilitySettings                                       QualitySettings;                                         // 0x069B(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JZQD[0x14];                                  // 0x069C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FSRQualityLevel;                                         // 0x06B0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CustomFieldOfView;                                       // 0x06B4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             FieldOfViewChangedDelegate;                              // 0x06B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      HDRMaxBrightness;                                        // 0x06C8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q2A8[0x14];                                  // 0x06CC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HDRContrast;                                             // 0x06E0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FUY3[0x14];                                  // 0x06E4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HDRUIBrightness;                                         // 0x06F8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BAA7[0x14];                                  // 0x06FC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HDRUIContrast;                                           // 0x0710(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VKEG[0x14];                                  // 0x0714(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EColorBlindModeSettings                                    ColorBlindSetting;                                       // 0x0728(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KGJP[0x7];                                   // 0x0729(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ColorblindChangedDelegate;                               // 0x0730(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ESubtitleVerbositySettings                                 SubtitlesSetting;                                        // 0x0740(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3GES[0x7];                                   // 0x0741(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             SubtitlesChangedDelegate;                                // 0x0748(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ESubtitleSizeSettings                                      SubtitleSizeSetting;                                     // 0x0758(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OE2Y[0x7];                                   // 0x0759(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             SubtitleSizeChangedDelegate;                             // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bChatBackground;                                         // 0x0770(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C8BJ[0x7];                                   // 0x0771(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ChatBackgroundChangedDelegate;                           // 0x0778(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bSubtitleBackground;                                     // 0x0788(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M4Y2[0x7];                                   // 0x0789(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             SubtitleBackgroundChangedDelegate;                       // 0x0790(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    ArachnophobiaSafeMode;                                   // 0x07A0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5U5U[0x4];                                   // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ArachnophobiaSafeModeChangedDelegate;                    // 0x07A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bReadToMe;                                               // 0x07B8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U5HS[0x7];                                   // 0x07B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ReadToMeChangedDelegate;                                 // 0x07C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      ReadToMeSpeed;                                           // 0x07D0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4WAH[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ReadToMeSpeedChangedDelegate;                            // 0x07D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bChatTextToSpeech;                                       // 0x07E8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8BP6[0x7];                                   // 0x07E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ChatTextToSpeechChangedDelegate;                         // 0x07F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bChatSpeechToText;                                       // 0x0800(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_02O2[0x7];                                   // 0x0801(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ChatSpeechToTextChangedDelegate;                         // 0x0808(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bLargeText;                                              // 0x0818(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KPZE[0x7];                                   // 0x0819(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             LargeTextChangedDelegate;                                // 0x0820(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bPartyDistance;                                          // 0x0830(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0O09[0x7];                                   // 0x0831(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             PartyDistanceChangedDelegate;                            // 0x0838(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bSpecialPerformance;                                     // 0x0848(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0L4I[0x57];                                  // 0x0849(0x0057) MISSED OFFSET (PADDING)

	public:
		void SetYAxisInverted(bool Value);
		void SetXAxisInverted(bool Value);
		void SetVSyncWrapper(bool bEnabled);
		void SetVoiceSoundVolume(float Value);
		void SetVoiceChatSoundVolume(float Value);
		void SetVoiceChatActivation(EVoiceChatActivation Quality);
		void SetUISoundVolume(float Value);
		void SetSubtitleSize(ESubtitleSizeSettings Setting);
		void SetSubtitleMode(ESubtitleVerbositySettings Setting);
		void SetSubtitleBackground(bool Setting);
		void SetShowTutorial(bool NewShowTutorial);
		void SetReadToMeSpeed(float Setting);
		void SetReadToMe(bool Setting);
		void SetQualitySettings(EScalabilitySettings Quality);
		void SetPartyDistance(bool Setting);
		void SetNarrationSoundVolume(float Value);
		void SetMusicSoundVolume(float Value);
		void SetMouseToggleSprintEnabled(bool bEnabled);
		void SetMouseToggleCrouchEnabled(bool bEnabled);
		void SetMouseSensitivityY(float Value);
		void SetMouseSensitivityX(float Value);
		void SetMotionBlurScale(float NewMotionBlurScale);
		void SetMasterSoundVolume(float Value);
		void SetLargeText(bool Setting);
		void SetLanguage(ELanguageSetting NewLanguage);
		void SetKeyboardLevelViewOnSprint(bool bEnabled);
		void SetInteractHighlightLevel(EInteractHighlightLevel NewInteractHighlightLevel);
		void SetHDRUIContrast(float Contrast);
		void SetHDRUIBrightness(float Brightness);
		void SetHDRMaxBrightness(float MaxBrightness);
		void SetHDRContrast(float Contrast);
		void SetHasSeenEarlyAccessMessage(bool bState);
		void SetHasSeenArachnophobiaMessage(bool bState);
		void SetHasSeenAccessibilityMessage(bool bState);
		void SetGammaLevel(float GammaLevelIn);
		void SetFSRQuality(int32_t Quality);
		void SetFPSLimit(EFPSLimit FPSLimitIn);
		void SetFOV(float FOVIn);
		void SetExtraWideInteract(bool NewExtraWideInteract);
		void SetEffectsSoundVolume(float Value);
		void SetControllerToggleSprintEnabled(bool bEnabled);
		void SetControllerToggleCrouchEnabled(bool bEnabled);
		void SetControllerSensitivityY(float Value);
		void SetControllerSensitivityX(float Value);
		void SetControllerRumbleEnabled(bool Value);
		void SetControllerRightOuterDeadZone(float Value);
		void SetControllerRightInnerDeadZone(float Value);
		void SetControllerMoveYInverted(bool Value);
		void SetControllerMoveXInverted(bool Value);
		void SetControllerLookYInverted(bool Value);
		void SetControllerLookXInverted(bool Value);
		void SetControllerLevelViewOnSprint(bool bEnabled);
		void SetControllerLeftOuterDeadZone(float Value);
		void SetControllerLeftInnerDeadZone(float Value);
		void SetColorblindMode(EColorBlindModeSettings Setting);
		void SetChromaticAberration(bool NewChromaticAberration);
		void SetChatTextToSpeech(bool Setting);
		void SetChatSpeechToText(bool Setting);
		void SetChatBackground(bool Setting);
		void SetAxisKeyBinds(TArray<struct FInputAxisKeyMapping> OldValues, TArray<struct FInputAxisKeyMapping> NewValues);
		void SetAutosavesNumber(float NewAutosavesNumber);
		void SetAutosaveInterval(float NewAutosaveInterval);
		void SetArachnophobiaSafeMode(float Setting);
		void SetAmbienceSoundVolume(float Value);
		void SetActionKeyBinds(TArray<struct FInputActionKeyMapping> OldValues, TArray<struct FInputActionKeyMapping> NewValues);
		void Set3DResolution(float ResolutionIn);
		void ResetAllKeyBinds();
		void RemoveMappings(TArray<struct FAnyControlMapping> Bindings);
		void RemoveActionMappings(TArray<struct FInputActionKeyMapping> Bindings);
		bool GetYAxisInverted();
		bool GetXAxisInverted();
		bool GetVSyncWrapper();
		float GetVoiceSoundVolume();
		float GetVoiceChatSoundVolume();
		EVoiceChatActivation GetVoiceChatActivation();
		float GetUISoundVolume();
		ESubtitleSizeSettings GetSubtitleSize();
		ESubtitleVerbositySettings GetSubtitleMode();
		bool GetSubtitleBackground();
		bool GetShowTutorial();
		float GetReadToMeSpeed();
		bool GetReadToMe();
		EScalabilitySettings GetQualitySettings();
		bool GetPartyDistance();
		float GetNarrationSoundVolume();
		float GetMusicSoundVolume();
		bool GetMouseToggleSprintEnabled();
		bool GetMouseToggleCrouchEnabled();
		float GetMouseSensitivityY();
		float GetMouseSensitivityX();
		float GetMotionBlurScale();
		float GetMasterSoundVolume();
		bool GetLargeText();
		ELanguageSetting GetLanguage();
		bool GetKeyboardLevelViewOnSprint();
		EInteractHighlightLevel GetInteractHighlightLevel();
		float GetHDRUIContrast();
		float GetHDRUIBrightness();
		float GetHDRMaxBrightness();
		float GetHDRContrast();
		bool GetHasSeenEarlyAccessMessage();
		bool GetHasSeenArachnophobiaMessage();
		bool GetHasSeenAccessibilityMessage();
		float GetGammaLevel();
		int32_t GetFSRQuality();
		EFPSLimit GetFPSLimit();
		float GetFOV();
		bool GetExtraWideInteract();
		float GetEffectsSoundVolume();
		bool GetControllerToggleSprintEnabled();
		bool GetControllerToggleCrouchEnabled();
		float GetControllerSensitivityY();
		float GetControllerSensitivityX();
		bool GetControllerRumbleEnabled();
		float GetControllerRightOuterDeadZone();
		float GetControllerRightInnerDeadZone();
		bool GetControllerMoveYInverted();
		bool GetControllerMoveXInverted();
		bool GetControllerLookYInverted();
		bool GetControllerLookXInverted();
		bool GetControllerLevelViewOnSprint();
		float GetControllerLeftOuterDeadZone();
		float GetControllerLeftInnerDeadZone();
		bool GetColorblindModeEnabled();
		EColorBlindModeSettings GetColorblindMode();
		bool GetChromaticAberration();
		bool GetChatTextToSpeech();
		bool GetChatSpeechToText();
		bool GetChatBackground();
		TArray<struct FInputAxisKeyMapping> GetAxisKeyBinds(const class FName& AxisName, bool bPositive);
		float GetAutosavesNumber();
		float GetAutosaveInterval();
		float GetArachnophobiaSafeMode();
		float GetAmbienceSoundVolume();
		TArray<struct FInputActionKeyMapping> GetAllKeyBinds();
		TArray<struct FInputAxisKeyMapping> GetAllAxisMappings();
		TArray<struct FInputActionKeyMapping> GetActionKeyboardKeyBinds(const class FName& ActionName);
		TArray<struct FInputActionKeyMapping> GetActionKeyBinds(const class FName& ActionName);
		TArray<struct FInputActionKeyMapping> GetActionGamepadKeyBinds(const class FName& ActionName);
		float Get3DResolution();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainePathFollowingComponent
	 * Size -> 0x0018 (FullSize[0x0268] - InheritedSize[0x0250])
	 */
	class UMainePathFollowingComponent : public UPathFollowingComponent
	{
	public:
		unsigned char                                              UnknownData_HKYF[0x18];                                  // 0x0250(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainePhotoModeComponent
	 * Size -> 0x0080 (FullSize[0x0170] - InheritedSize[0x00F0])
	 */
	class UMainePhotoModeComponent : public UPhotoModeComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPhotoTaken;                                            // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XFYH[0x70];                                  // 0x0100(0x0070) MISSED OFFSET (PADDING)

	public:
		void UIEnterPhotoMode();
		void ServerUIEnterPhotoMode();
		void ServerNotifyPhotoTaken();
		void ClientUIEnterPhotoMode();
		void ClientOnPlayerInMenuChanged(bool InPlayerInMenu);
		void ClientAddNotificationMessage(const class FString& Message);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainePhotoModeSettingInput
	 * Size -> 0x0000 (FullSize[0x02B8] - InheritedSize[0x02B8])
	 */
	class UMainePhotoModeSettingInput : public UPhotoModeSettingWidget
	{
	public:
		void SetPhotoModeTimeOfDay(float Time);
		void SetAzimuthOffset(float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainePhotoModeSettings
	 * Size -> 0x0000 (FullSize[0x0288] - InheritedSize[0x0288])
	 */
	class UMainePhotoModeSettings : public UPhotoModeSettingsBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineReplicationFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMaineReplicationFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineReplicationGraph
	 * Size -> 0x0078 (FullSize[0x0510] - InheritedSize[0x0498])
	 */
	class UMaineReplicationGraph : public UReplicationGraph
	{
	public:
		class UReplicationGraphNode_GridSpatialization2D*          GridNode;                                                // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UReplicationGraphNode_ActorList*                     AlwaysRelevantNode;                                      // 0x04A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UNetConnection*, class UReplicationGraphNode_AlwaysRelevant_ForConnection_Maine*> AlwaysRelevantForConnectionNodes;                        // 0x04A8(0x0050) NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      ActorsWithoutNetConnection;                              // 0x04F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_254L[0x8];                                   // 0x0508(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineRichTextBlock
	 * Size -> 0x0000 (FullSize[0x0680] - InheritedSize[0x0680])
	 */
	class UMaineRichTextBlock : public URichTextBlock
	{
	public:
		void OnGlobalColorChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineStaticMeshComponent
	 * Size -> 0x0008 (FullSize[0x0510] - InheritedSize[0x0508])
	 */
	class UMaineStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		class UStaticMesh*                                         SeparatedMesh;                                           // 0x0508(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineTelemetryHelper
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMaineTelemetryHelper : public UTelemetryHelper
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineTriggerBase
	 * Size -> 0x0068 (FullSize[0x0298] - InheritedSize[0x0230])
	 */
	class AMaineTriggerBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_X5NL[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTriggered;                                             // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    MaxTriggerCount;                                         // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P4RC[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPlayersOnly;                                            // 0x0258(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ETriggerType                                               TriggerType;                                             // 0x0259(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S0BO[0x6];                                   // 0x025A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGlobalVariableReferemceConditional>         GlobalVariableConditionals;                              // 0x0260(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LZGH[0x10];                                  // 0x0270(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UShapeComponent*                                     CollisionComponent;                                      // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0290(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ResetTriggerCount();
		void ReceiveTrigger(class AActor* OtherActor);
		void OnGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* ActorInstigator);
		int32_t GetTriggerCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineTriggerBox
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class AMaineTriggerBox : public AMaineTriggerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaineTriggerSphere
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class AMaineTriggerSphere : public AMaineTriggerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainMenuButtonWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class UMainMenuButtonWidget : public UGameButtonWidget
	{
	public:
		class UButton*                                             Button_MainMenuInner;                                    // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          ButtonTextElement;                                       // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MainMenuWidget
	 * Size -> 0x0080 (FullSize[0x0328] - InheritedSize[0x02A8])
	 */
	class UMainMenuWidget : public UWindowWidget
	{
	public:
		class UTextBlock*                                          PressAnyKeyText;                                         // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMainMenuButtonWidget*                               ButtonNewGame;                                           // 0x02B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMainMenuButtonWidget*                               ButtonContinue;                                          // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        MainMenuButtons;                                         // 0x02C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        NewContinueButtonOptions;                                // 0x02C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        HostJoinButtonOptions;                                   // 0x02D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          NewString;                                               // 0x02D8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          ContinueString;                                          // 0x02E8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          LobbyString;                                             // 0x02F8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          LoadString;                                              // 0x0308(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDOE[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (PADDING)

	public:
		void TransitionToMainMenuState(EMainMenuState FromState, EMainMenuState ToState, EMainMenuStateTransitionType TransitionType);
		void StartNewSinglePlayerGame();
		void SetFocusForCurrentState();
		void PushMainMenuState(EMainMenuState NewState, bool ReplacePriorState);
		void PopToState(EMainMenuState NewState);
		void PopMainMenuState();
		void OnSinglePlayerNewGameClicked();
		void OnSinglePlayerContinueClicked();
		void OnSinglePlayerClicked();
		void OnMultiplayerNewGameClicked();
		void OnMultiplayerHostClicked();
		void OnMultiplayerContinueClicked();
		void OnMultiplayerConnectionError();
		void OnMultiplayerClicked();
		void OnLoadUserGameSettingsComplete();
		void OnButtonExitClicked();
		void OnBackInput();
		void OnActiveUserChanged(EActiveUserChangeType ChangeType);
		void HostMultiplayerLobby(bool bPasswordProtected);
		void HandleShowPressAnyKeyPromptBegin();
		void HandlePlayerInput(int32_t UserIndex);
		EMainMenuState GetMainMenuState();
		void CreateSinglePlayerLobby();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ManagedRenderTargetObject
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UManagedRenderTargetObject : public UObject
	{
	public:
		class FName                                                Name;                                                    // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           Size;                                                    // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UMapComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_0968[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUnlockedPuzzlePieceZone;                               // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnlockedMapsChanged;                                   // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<EPuzzlePieceZone>                                   UnlockedPuzzlePieceZones;                                // 0x00E0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1CYR[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WorldMapXMin;                                            // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WorldMapXMax;                                            // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WorldMapYMin;                                            // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WorldMapYMax;                                            // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnlockPuzzlePieceZone(class ASurvivalPlayerState* Unlocker, const struct FDataTableRowHandle& PuzzlePieceRegion);
		void OnRep_UnlockedMaps();
		void MulticastNotifyPuzzlePieceZoneUnlocked(class ASurvivalPlayerState* Unlocker, const struct FDataTableRowHandle& UnlockedPuzzlePieceZone);
		bool IsPuzzlePieceZoneUnlocked(const struct FDataTableRowHandle& PuzzlePieceRegion);
		bool HasSeenMapUnlocked(EPuzzlePieceZone MapData);
		struct FVector2D GetWorldMapPosition(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapLegendEntryWidget
	 * Size -> 0x00E8 (FullSize[0x0360] - InheritedSize[0x0278])
	 */
	class UMapLegendEntryWidget : public UGameUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEntrySelectedDelegate;                                 // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPreviousEntrySelectedDelegate;                         // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNextEntrySelectedDelegate;                             // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEntryFocused;                                          // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UButton*                                             PreviousButton;                                          // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton*                                             NextButton;                                              // 0x02C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              Image;                                                   // 0x02C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextElement;                                             // 0x02D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          NumberTextElement;                                       // 0x02D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          LocString;                                               // 0x02E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlphaWhenHidden;                                         // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EntryIndex;                                              // 0x02F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U9N0[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBaseMapEntryWidget*>                         EntryWidgets;                                            // 0x0300(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<EMapEntryType, class UTexture2D*>                     LegendIconMap;                                           // 0x0310(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateVisibilityControls(bool Show, bool State);
		void UpdateVisibility(class UBaseMapEntryWidget* EntryWidget);
		void UpdateCurrentEntryVisibility();
		void ToggleCurrentEntryVisibility(bool IsVisible);
		void ShowSingleElementControls();
		void ShowArrowControls(bool Show);
		void SetCustomPlayerVisuals(EPlayerCharacterIdentity Identity);
		void RefreshNumberText();
		void RefreshEntry();
		void OnPreviousButtonClicked();
		void OnNextButtonClicked();
		void GotoPreviousEntry();
		void GotoNextEntry();
		void GotoEntry(class UBaseMapEntryWidget* EntryWidget);
		void GotoCurrentEntry();
		int32_t GetNumEntries();
		EMapEntryType GetMapEntryType();
		TArray<class UBaseMapEntryWidget*> GetEntryWidgets();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapMarkerWidget
	 * Size -> 0x0010 (FullSize[0x02B0] - InheritedSize[0x02A0])
	 */
	class UMapMarkerWidget : public UBaseMapEntryWidget
	{
	public:
		class UMapPanelWidget*                                     MapOwner;                                                // 0x02A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDMarkerData*                                      HUDMarkerData;                                           // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void HandleHUDMarkerDataChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPanelWidget
	 * Size -> 0x0198 (FullSize[0x0410] - InheritedSize[0x0278])
	 */
	class UMapPanelWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_8ENG[0x20];                                  // 0x0278(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMapPanelPanned;                                        // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFocusedEntryChanged;                                   // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UImage*                                              GridEffect;                                              // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        OuterCanvas;                                             // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        POICanvas;                                               // 0x02C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        MapMarkerCanvas;                                         // 0x02D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        PlayerCanvas;                                            // 0x02D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        PlayerWaypointCanvas;                                    // 0x02E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        ResourceWaypointCanvas;                                  // 0x02E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        ImageCanvas;                                             // 0x02F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapResourceSurveyWidget*                            ResourceSurveyOverlay;                                   // 0x02F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox*                                            MapSizeBox;                                              // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScaleBox*                                           ImageScaleBox;                                           // 0x0308(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBorder*                                             MapBorder;                                               // 0x0310(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapPuzzleContainerWidget*                           PuzzleContainer;                                         // 0x0318(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PlayerEntryClass;                                        // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PointOfInterestClass;                                    // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              HUDMarkerClass;                                          // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PlayerWaypointMarkerClass;                               // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ResourceWaypointClass;                                   // 0x0340(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           MaxBounds;                                               // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           MinBounds;                                               // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           TextureSize;                                             // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           MousePanSensitivity;                                     // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GamepadPanSensitivity;                                   // 0x0368(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           GamepadPanDeadzone;                                      // 0x036C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MapVisibleOrientationOffset;                             // 0x0374(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistanceToFocusMarker;                                // 0x0378(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y5L4[0x34];                                  // 0x037C(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMapPuzzleUpdate>                            PendingMapUpdates;                                       // 0x03B0(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FMapPuzzleUpdate                                    CurrentMapUpdate;                                        // 0x03C0(0x0010) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TUCH[0x14];                                  // 0x03D0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PanDuration;                                             // 0x03E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PanEaseExponent;                                         // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J110[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              ZoomLevels;                                              // 0x03F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CurrentZoomLevel;                                        // 0x0400(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8FG2[0xC];                                   // 0x0404(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetOwnerScreen(class UWidget* Owner);
		void PopulateAll();
		void OnZoomChange(int32_t ZoomLevel);
		void OnUnlockedMapsChanged(class UMapComponent* Sender);
		void OnPlayerWaypointRemoved(class UHUDMarkerData* MarkerData);
		void OnPlayerWaypointAdded(class UHUDMarkerData* MarkerData);
		void OnPlayerMarkerRemoved(class UHUDMarkerData* MarkerData);
		void OnPlayerMarkerAdded(class UHUDMarkerData* MarkerData);
		void OnMarkerRemoved(class UHUDMarkerData* MarkerData);
		void OnMarkerAdded(class UHUDMarkerData* MarkerData);
		void OnMapEntryMouseUnHovered(class UBaseMapEntryWidget* EntryWidget);
		void OnMapEntryMouseHovered(class UBaseMapEntryWidget* EntryWidget);
		struct FEventReply OnBorderMouseDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
		void HandleMapEntryFocusLost_Internal(bool ViaMouseHover);
		void HandleMapEntryFocusLost(bool ViaMouseHover);
		void HandleMapEntryFocused_Internal(class UBaseMapEntryWidget* MapEntry, EMapEntryType EntryType, bool ViaMouseHover);
		void HandleMapEntryFocused(class UBaseMapEntryWidget* MapEntry, EMapEntryType EntryType, bool ViaMouseHover);
		struct FVector2D GetWorldPosition(const struct FVector2D& MapPosition, bool bIncludeRotation);
		struct FVector2D GetViewCenterPosition();
		struct FVector2D GetMapPosition(const struct FVector& WorldLocation, bool bIncludeRotation);
		class UBaseMapEntryWidget* GetEntryUnderCursor();
		class UBaseMapEntryWidget* FindClosestValidMapEntryToMapCursor();
		void CycleZoomValue();
		void CenterMapOnPlayer();
		void AdjustZoomLevel(int32_t ChangeInZoom);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPlayerWaypointWidget
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class UMapPlayerWaypointWidget : public UMapMarkerWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPlayerWidget
	 * Size -> 0x0008 (FullSize[0x02A8] - InheritedSize[0x02A0])
	 */
	class UMapPlayerWidget : public UBaseMapEntryWidget
	{
	public:
		class UHUDMarkerData*                                      HUDMarkerData;                                           // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetPlayerRotation(float Angle);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPOIWidget
	 * Size -> 0x0008 (FullSize[0x02A8] - InheritedSize[0x02A0])
	 */
	class UMapPOIWidget : public UBaseMapEntryWidget
	{
	public:
		class UPointOfInterestDataAsset*                           POIData;                                                 // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPuzzleContainerWidget
	 * Size -> 0x0078 (FullSize[0x02F0] - InheritedSize[0x0278])
	 */
	class UMapPuzzleContainerWidget : public UGameUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasContainer;                                         // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapPuzzlePieceTextureData*                          PuzzlePieceTextureData;                                  // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3591[0x68];                                  // 0x0288(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPuzzlePieceTextureData
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UMapPuzzlePieceTextureData : public UDataAsset
	{
	public:
		TMap<EPuzzlePieceZone, struct FPuzzlePieceTextureEntry>    PuzzlePieceTextures;                                     // 0x0030(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapPuzzlePieceWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UMapPuzzlePieceWidget : public UGameUserWidget
	{
	public:
		class UImage*                                              MapPiece;                                                // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           OverrideTextureDrawSize;                                 // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          AlignmentTexture;                                        // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPuzzlePieceZone                                           PuzzlePieceZone;                                         // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XKUV[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapResourceSurveyWidget
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class UMapResourceSurveyWidget : public UBaseMapEntryWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapResourceWaypointWidget
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class UMapResourceWaypointWidget : public UMapMarkerWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapStation
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class AMapStation : public AActor
	{
	public:
		unsigned char                                              UnknownData_DY2O[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          DownloadInteractString;                                  // 0x0238(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 PuzzlePieceRegion;                                       // 0x0248(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bEnabled;                                                // 0x0258(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PMAB[0x7];                                   // 0x0259(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnMapDownloaded(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MapWidget
	 * Size -> 0x00C8 (FullSize[0x0340] - InheritedSize[0x0278])
	 */
	class UMapWidget : public UGameUserWidget
	{
	public:
		class UUserWidget*                                         CloseButton;                                             // 0x0278(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         HeaderText;                                              // 0x0280(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapPanelWidget*                                     MapPanel;                                                // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        PlayerContainer;                                         // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        PlacesContainer;                                         // 0x0298(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               Player1LegendEntry;                                      // 0x02A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               POIEntry;                                                // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               TrailMarkerEntry;                                        // 0x02B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               RespawnPointEntry;                                       // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               LabEntry;                                                // 0x02C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               FieldStationsEntry;                                      // 0x02C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               OtherEntry;                                              // 0x02D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               PlayerWaypointEntry;                                     // 0x02D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMapLegendEntryWidget*                               ResourceSurveyEntry;                                     // 0x02E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LegendEntryClass;                                        // 0x02E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, EMapEntryType>                   PointOfInterestTypeMappings;                             // 0x02F0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void ToggleMapMarkerOnFocusedMapEntry();
		void PopulatePlayerWaypointLegend();
		void PopulateEntriesForMap();
		void OnPlayerWaypointRemoved(class UHUDMarkerData* MarkerData);
		void OnPlayerWaypointAdded(class UHUDMarkerData* MarkerData);
		void OnLegendEntrySelected(class UBaseMapEntryWidget* EntryWidget, EMapEntryType MapEntryType);
		void OnLegendEntryFocused(class UMapLegendEntryWidget* Sender);
		void K2_OnLegendEntryFocused(class UMapLegendEntryWidget* Widget);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MaterialSwapComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UMaterialSwapComponent : public UActorComponent
	{
	public:
		TMap<struct FActorMaterialKey, struct FMaterialInterfaceArray> MaterialStacks;                                          // 0x00B0(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SetMaterial(EMaterialSwapLayer Layer, class UMeshComponent* Component, int32_t MaterialIndex, class UMaterialInterface* Material);
		class UMaterialInterface* GetMaterial(EMaterialSwapLayer Layer, class UMeshComponent* Component, int32_t MaterialIndex);
		void ClearMaterials(EMaterialSwapLayer Layer, class UMeshComponent* Component);
		void ClearMaterial(EMaterialSwapLayer Layer, class UMeshComponent* Component, int32_t MaterialIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MenuGameMode
	 * Size -> 0x0008 (FullSize[0x02D8] - InheritedSize[0x02D0])
	 */
	class AMenuGameMode : public AMaineGameModeBase
	{
	public:
		unsigned char                                              UnknownData_QL0P[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MetaBuildingDataLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMetaBuildingDataLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int32_t GetMetaBuildingUnlockedSubBuildingNum(class UObject* WorldContextObject, const struct FDataTableRowHandle& MetaBuilding);
		struct FDataTableRowHandle GetMetaBuildingUiSubBuilding(class UObject* WorldContextObject, const struct FMetaBuildingData& Data, TArray<struct FDataTableRowHandle> Variants);
		int32_t GetMetaBuildingSubBuildingIndex(class UObject* WorldContextObject, const struct FMetaBuildingIdentifier& Identifier);
		bool GetMetaBuildingHasMultipleUnlockedSubBuildings(class UObject* WorldContextObject, const struct FDataTableRowHandle& MetaBuilding);
		int32_t GetMetaBuildingCurrentSubBuildingIndex(class UObject* WorldContextObject, const struct FDataTableRowHandle& MetabuildingRow);
		int32_t FindInMetaBuildings(TArray<struct FDataTableRowHandle> MetaBuildings, const struct FDataTableRowHandle& Needle);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveLoadManager
	 * Size -> 0x0208 (FullSize[0x0230] - InheritedSize[0x0028])
	 */
	class USaveLoadManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_D2IP[0x58];                                  // 0x0028(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USaveGameHeaderData*                                 SaveInProgressSaveGameHeaderData;                        // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveBegin;                                             // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveComplete;                                          // 0x0098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveUserChanged;                                     // 0x00A8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadComplete;                                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeleteComplete;                                        // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveGameHeadersLoadedComplete;                         // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckIfNeedsSaveConversionComplete;                    // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConvertOldSavesComplete;                               // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUserGameSettingsLoadComplete;                          // 0x0108(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		TArray<class USaveGameHeaderData*>                         SaveGameHeaderDatas;                                     // 0x0118(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B7F2[0x60];                                  // 0x0128(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USaveGameHeaderData*                                 SaveDataToLoad;                                          // 0x0188(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XF2B[0x30];                                  // 0x0190(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              ScreenshotRenderTarget;                                  // 0x01C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OKR9[0x58];                                  // 0x01C8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaineGameUserSettings*                              MaineSettings;                                           // 0x0220(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UGlobalSaveLoadData*                                 GlobalSaveLoadData;                                      // 0x0228(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UnpauseSave();
		bool ShouldRestorePersistence();
		void SetSaveGameHeaderDatasRequireLoad();
		void SaveUserGameSettings(bool bSettingsPotentiallyChanged);
		void Save(ESaveGameType SaveGameType);
		EPlayerRestoreResult RestoreNewPlayerFromController(class APlayerController* PlayerController);
		void RequestAutoSave();
		void PauseSave();
		void LoadUserGameSettings();
		void LoadSaveGameHeaderDatas();
		void Load(class USaveGameHeaderData* SaveGameHeader);
		bool IsLoading();
		bool HasEnoughStorageForNewSave();
		void HandleSaveConversion();
		void HandleCheckIfNeedsSaveConversion();
		class USaveGameHeaderData* GetSaveDataToLoad();
		float GetSaveConvertPercentage();
		int64_t GetRemainingStorage();
		class FString ExportSave(class USaveGameHeaderData* HeaderData);
		bool EnsureSignIn();
		bool DoSaveGameHeaderDatasRequireLoad();
		bool DidLoadFromSaveGame();
		void Delete(class USaveGameHeaderData* SaveGameHeader);
		ESaveLoadRestriction CanSaveGame();
		bool CanSave();
		bool CanLoad();
		bool CanDelete();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MicrosoftSaveLoadManager
	 * Size -> 0x0090 (FullSize[0x02C0] - InheritedSize[0x0230])
	 */
	class UMicrosoftSaveLoadManager : public USaveLoadManager
	{
	public:
		unsigned char                                              UnknownData_ATUO[0x90];                                  // 0x0230(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ModelViewerCapture
	 * Size -> 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
	 */
	class AModelViewerCapture : public AActor
	{
	public:
		unsigned char                                              bAutoRotate : 1;                                         // 0x0230(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAllowRotationY : 1;                                     // 0x0230(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IQXY[0x3];                                   // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartingRotationX;                                       // 0x0234(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartingRotationY;                                       // 0x0238(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MDZK[0x14];                                  // 0x023C(0x0014) MISSED OFFSET (PADDING)

	public:
		void ViewStaticMesh(class UStaticMesh* Mesh, TArray<class UMaterialInterface*> Materials, float Scale, const struct FVector& Offset);
		void ViewSkeletalMesh(class USkeletalMesh* Mesh, TArray<class UMaterialInterface*> Materials, float Scale, const struct FVector& Offset);
		void ViewBlueprint(class UClass* BlueprintClass, float Scale, const struct FVector& Offset);
		void ViewArmorMesh(class USkeletalMesh* Mesh, TArray<class UMaterialInterface*> Materials, float Scale, const struct FVector& Offset, EEquipmentSlot Slot, bool bUsePet);
		void View2DTexture(class UTexture* Texture);
		void SetShowSkyLight(bool bShow);
		void SetShowOverheadSpot(bool bShow);
		void SetInspectionStaticMesh(class UStaticMesh* Mesh);
		void SetInspectionItemData(const struct FDataTableRowHandle& ItemDataHandle);
		void SetInspectionBuildingData(const struct FDataTableRowHandle& BuildingDataHandle);
		void InitializeRotation(bool bInAutoRotate, bool bInAllowRotationY, float InStartingRotationX, float InStartingRotationY);
		void Cleanup();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MusicManager
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UMusicManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_NVND[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMusicTrackData*                                     CurrentTrack;                                            // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     CurrentOverlayTrack;                                     // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     ScriptedTrack;                                           // 0x0058(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicSettings*                                      DefaultMusicSettings;                                    // 0x0060(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicSettings*                                      LevelMusicSettings;                                      // 0x0068(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicSettings*                                      OverrideMusicSettings;                                   // 0x0070(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     MusicComponent;                                          // 0x0078(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     OverlayMusicComponent;                                   // 0x0080(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetScriptedTrack(class UMusicTrackData* TrackData);
		void ClearScriptedTrack();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MusicTrackData
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UMusicTrackData : public UDataAsset
	{
	public:
		unsigned char                                              Track[0x28];                                             // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      FadeInTime;                                              // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FadeOutTime;                                             // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<float>                                              SeekTimes;                                               // 0x0060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.MusicSettings
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UMusicSettings : public UDataAsset
	{
	public:
		class UMusicTrackData*                                     DefaultTrack;                                            // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FConditionalMusicTrack>                      ConditionalTracks;                                       // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     NightTrack;                                              // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FConditionalMusicTrack>                      ConditionalNightTracks;                                  // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     CombatTrack;                                             // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FConditionalMusicTrack>                      ConditionalCombatTracks;                                 // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bOverlayCombatMusic;                                     // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCQZ[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.NotificationLogBase
	 * Size -> 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
	 */
	class UNotificationLogBase : public UUserWidget
	{
	public:
		TArray<class UUINotificationBase*>                         TempNotifications;                                       // 0x0268(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ObjectiveInterfaceWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UObjectiveInterfaceWidget : public UGameUserWidget
	{
	public:
		class UImage*                                              BigPin;                                                  // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UBaseQuest>                           SelectedQuest;                                           // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UQuestManagerComponent>               QuestManager;                                            // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASurvivalPlayerState>                 PlayerState;                                             // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ObjectiveNotificationWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class UObjectiveNotificationWidget : public UGameUserWidget
	{
	public:
		bool                                                       bIsPlayingNotification;                                  // 0x0278(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4AOR[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		void ProcessQueuedQuestNotification();
		bool HasQueuedQuestNotifications();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OCLComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UOCLComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_2OZ7[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLockedChanged;                                         // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOpenStateChanged;                                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateVisualState;                                     // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              bStartLocked : 1;                                        // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bUnlockAlsoOpens : 1;                                    // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bConsumeKey : 1;                                         // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsLocked : 1;                                           // 0x00F8(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsOpen : 1;                                             // 0x00F8(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAllowInteractToOpen : 1;                                // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJCR[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          OverrideLockedText;                                      // 0x00FC(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FXWP[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 KeyItemData;                                             // 0x0110(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    KeyCount;                                                // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W3Z5[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (PADDING)

	public:
		void Unlock(class AActor* InstigatedBy);
		void ToggleOpen(class AActor* InstigatedBy);
		void ToggleLock(class AActor* InstigatedBy);
		void Open(class AActor* InstigatedBy);
		void OnRep_IsOpen(bool bWasOpen);
		void OnRep_IsLocked();
		void MulticastNotifyOpenStateChanged(bool bOpen, class AActor* InstigatedBy);
		void Lock(class AActor* InstigatedBy);
		bool IsOpen();
		bool IsLocked();
		bool HasKeyToUnlock(class AActor* InstigatedBy);
		void Close(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OnOffToggleWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class UOnOffToggleWidget : public UGameUserWidget
	{
	public:
		class UTextBlock*                                          Label;                                                   // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox*                                           ToggleBtn;                                               // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnToggleStateChanged(bool bIsToggled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OnyxFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UOnyxFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FIntVector SubtractIntVectors(const struct FIntVector& A, const struct FIntVector& B);
		struct FRotator RInterpCappedTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float Alpha, float MaxSpeed);
		bool RangeContains(const struct FFloatRange& Range, float Value);
		struct FDataTableRowHandle RandomElementRowHandle(TArray<struct FDataTableRowHandle> Array);
		struct FLocString RandomElementLocString(TArray<struct FLocString> Array);
		int32_t RandomElementInt(TArray<int32_t> Array);
		float RandomElementFloat(TArray<float> Array);
		int32_t KeyToNumberZeroBased(const struct FKey& Key);
		int32_t KeyToNumberOneBased(const struct FKey& Key);
		struct FInputChord KeyMappingToChord(const struct FInputActionKeyMapping& Mapping);
		class FString JoinStringsRemoveEmpty(const class FString& A, const class FString& B, const class FString& Separator);
		bool IsHandled(const struct FEventReply& Reply);
		bool IsAxisPressKey(const struct FKey& Key);
		struct FTransform GetStaticMeshSocketTransform(class AActor* Actor, const class FName& SocketName, ERelativeTransformSpace TransformSpace);
		class AActor* GetSelfOrOuterActor(class UObject* Object);
		struct FInputChord GetPointerEventChord(const struct FPointerEvent& Event);
		struct FInputChord GetKeyEventChord(const struct FKeyEvent& Event);
		class UActorComponent* GetComponentByClassSafe(class AActor* Actor, class UClass* ComponentClass);
		class FText FormatIntToFit(int32_t Value, int32_t MaxCharacters);
		float FindDeltaAngleRadians(float A1, float A2);
		float FindDeltaAngleDegrees(float A1, float A2);
		class UClass* CoalesceClass(class UClass* A, class UClass* B);
		struct FIntVector AddIntVectors(const struct FIntVector& A, const struct FIntVector& B);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OptionsDropdownBaseAsset
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UOptionsDropdownBaseAsset : public UDataAsset
	{
	public:
		TArray<struct FLocString>                                  DisplayStrings;                                          // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    DefaultSelectedIndex;                                    // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MLDF[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OptionsKeybindingListItem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UOptionsKeybindingListItem : public UObject
	{
	public:
		struct FAnyControlMappingKey                               MappingKey;                                              // 0x0028(0x0010) BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGamepadControls;                                        // 0x0038(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2VKV[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OptionsKeybindingsPopulator
	 * Size -> 0x0050 (FullSize[0x0340] - InheritedSize[0x02F0])
	 */
	class UOptionsKeybindingsPopulator : public UBaseSettingsWidget
	{
	public:
		class UListView*                                           ControlListView;                                         // 0x02F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBindableControlCategory                                   Category;                                                // 0x02F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGamepadControls;                                        // 0x02F9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8Q0E[0x46];                                  // 0x02FA(0x0046) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OptionsMenuWidget
	 * Size -> 0x0398 (FullSize[0x0640] - InheritedSize[0x02A8])
	 */
	class UOptionsMenuWidget : public UWindowWidget
	{
	public:
		class UWidgetSwitcher*                                     OptionTabs;                                              // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScrollBox*                                          ScrollBoxSettings;                                       // 0x02B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        DisplayList;                                             // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        KeyboardList;                                            // 0x02C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        ControllerList;                                          // 0x02C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        SoundList;                                               // 0x02D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        HDRList;                                                 // 0x02D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        AccessibilityList;                                       // 0x02E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        GameList;                                                // 0x02E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULocalizedTextBlock*                                 SettingsTitle;                                           // 0x02F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             KeybindControlsParent;                                   // 0x02F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             ArachnophobiaPreview;                                    // 0x0300(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULocalizedTextBlock*                                 SettingsDesc;                                            // 0x0308(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 ApplyButton;                                             // 0x0310(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 RevertButton;                                            // 0x0318(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 CloseButton;                                             // 0x0320(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBottomButtonWidget*                                 DefaultsButton;                                          // 0x0328(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 AutosaveIntervalSlider;                                  // 0x0330(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 AutosavesNumberSlider;                                   // 0x0338(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ShowTutorialToggle;                                      // 0x0340(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              InteractHighlightLevelDD;                                // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ExtraWideInteractToggle;                                 // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              LanguageDD;                                              // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ShowPlayerDistanceToggle;                                // 0x0360(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              WindowModeDD;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              ResolutionDD;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              QualitySettingsDD;                                       // 0x0378(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              FSRQualityDD;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              FramerateLimitDD;                                        // 0x0388(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      VSyncToggle;                                             // 0x0390(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 GammaSlider;                                             // 0x0398(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 MotionBlurSlider;                                        // 0x03A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ChromaticAberrationToggle;                               // 0x03A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 FOVSlider;                                               // 0x03B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 ResolutionSlider;                                        // 0x03B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 HDRMaxBrightnessSlider;                                  // 0x03C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 HDRContrastSlider;                                       // 0x03C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 HDRUIBrightnessSlider;                                   // 0x03D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 HDRUIContrastSlider;                                     // 0x03D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      InvertXToggle;                                           // 0x03E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      InvertYToggle;                                           // 0x03E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      CrouchToggle;                                            // 0x03F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      SprintToggle;                                            // 0x03F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      KeyboardLevelViewOnSprintToggle;                         // 0x0400(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ControllerLevelViewOnSprintToggle;                       // 0x0408(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 MouseSensXSlider;                                        // 0x0410(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 MouseSensYSlider;                                        // 0x0418(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ControllerInvertLookXToggle;                             // 0x0420(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ControllerInvertLookYToggle;                             // 0x0428(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ControllerInvertMoveXToggle;                             // 0x0430(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ControllerInvertMoveYToggle;                             // 0x0438(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      GamepadCrouchToggle;                                     // 0x0440(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      GamepadSprintToggle;                                     // 0x0448(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      RumbleToggle;                                            // 0x0450(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 GamepadSensXSlider;                                      // 0x0458(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 GamepadSensYSlider;                                      // 0x0460(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 LeftJoystickInnerDeadZone;                               // 0x0468(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 LeftJoystickOuterDeadZone;                               // 0x0470(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 RightJoystickInnerDeadZone;                              // 0x0478(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 RightJoystickOuterDeadZone;                              // 0x0480(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        DefaultKeyboardBindings;                                 // 0x0488(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        HotPouchKeyboardBindings;                                // 0x0490(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        ConstructionKeyboardBindings;                            // 0x0498(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        UIKeyboardBindings;                                      // 0x04A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        PhotoModeKeyboardBindings;                               // 0x04A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        DefaultControllerBindings;                               // 0x04B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        HotPouchControllerBindings;                              // 0x04B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        ConstructionControllerBindings;                          // 0x04C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        UIControllerBindings;                                    // 0x04C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsKeybindingsPopulator*                        PhotoModeControllerBindings;                             // 0x04D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 MasterSoundSlider;                                       // 0x04D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 EffectsSoundSlider;                                      // 0x04E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 AmbienceSoundSlider;                                     // 0x04E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 MusicSoundSlider;                                        // 0x04F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 UISoundSlider;                                           // 0x04F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 NarrationSoundSlider;                                    // 0x0500(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 VoiceSoundSlider;                                        // 0x0508(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 VoiceChatSoundSlider;                                    // 0x0510(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              VoiceChatActivationDropdown;                             // 0x0518(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           VoiceChatActivationAsset;                                // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              ColorBlindDD;                                            // 0x0528(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              SubtitleDD;                                              // 0x0530(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledDropdownWidget*                              SubtitleSizeDD;                                          // 0x0538(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ReadToMeToggle;                                          // 0x0540(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 ReadToMeSpeedSlider;                                     // 0x0548(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      LargeTextToggle;                                         // 0x0550(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ChatTextToSpeechToggle;                                  // 0x0558(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ChatSpeechToTextToggle;                                  // 0x0560(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabledSliderWidget*                                 ArachnophobiaSlider;                                     // 0x0568(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      ChatBackgroundToggle;                                    // 0x0570(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULabeledToggle*                                      SubtitleBackgroundToggle;                                // 0x0578(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           WindowModeAsset;                                         // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           FramerateLimitAsset;                                     // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           QualitySettingsAsset;                                    // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           FSRSettingsAsset;                                        // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           ColorBlindSettingsAsset;                                 // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           SubtitleAsset;                                           // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           SubtitleSizeAsset;                                       // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           InteractHighlightLevelAsset;                             // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOptionsDropdownBaseAsset*                           LanguageSettingAsset;                                    // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WFF5[0x78];                                  // 0x05C8(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetAllToDefaults();
		void RevertPageSettings();
		void RevertCachedAndUnconfirmedSettings();
		void RemoveControlMappings(TArray<struct FAnyControlMapping> Value);
		void RemoveAxisMappings(TArray<struct FInputAxisKeyMapping> Value);
		void RemoveActionMappings(TArray<struct FInputActionKeyMapping> Value);
		bool PageHasUnsavedChanges();
		void OnPrevTab();
		void OnNextTab();
		void OnFSRQualitySelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnCategoryChanged(int32_t Index);
		void OnCategoryButtonPressed(int32_t Index);
		void NativeClampQualitySelectionToSafeValue();
		bool HasAnyUnsavedChanges();
		void HandleUnsafeQualitySelection();
		TArray<struct FAnyControlMapping> FindConflicts(const struct FAnyControlMapping& Mapping);
		void ApplyPageSettings();
		void ApplyAllSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ParticleAttachmentBlockingVolume
	 * Size -> 0x0028 (FullSize[0x0290] - InheritedSize[0x0268])
	 */
	class AParticleAttachmentBlockingVolume : public AVolume
	{
	public:
		class FName                                                Tag;                                                     // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    InnerBlockingVolume;                                     // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    OuterBlockingVolume;                                     // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       KillVolume;                                              // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EParticleBlockingVolumeType                                Type;                                                    // 0x0288(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VAMX[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ParticleAttachmentVolume
	 * Size -> 0x0088 (FullSize[0x02B8] - InheritedSize[0x0230])
	 */
	class AParticleAttachmentVolume : public AActor
	{
	public:
		class UNiagaraComponent*                                   NiagaraParticleSystem;                                   // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialParameterCollection*                        MaterialParameterCollection;                             // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ParticleSystemActiveMPCName;                             // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                EmitterLocationMPCName;                                  // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ExtinctionVolumeLerpMPCName;                             // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SurfaceDistanceLerpMPCName;                              // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ForwardOffsetMPCName;                                    // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                EnabledPhysMatMPCName;                                   // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OffsetFromActorForward;                                  // 0x0270(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceToSurfaceLerp;                                   // 0x0274(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       LerpWhenInside;                                          // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseXYDistance;                                           // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AlignParticleSystemWithPlayer;                           // 0x027A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       LimitToSurfaceMaterial;                                  // 0x027B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NPPE[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EPhysicalSurface>                                   EnabledPhysMatSurfaceTypes;                              // 0x0280(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		class UBoxComponent*                                       ParticleVolume;                                          // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                BlockersTag;                                             // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      Blockers;                                                // 0x02A0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       WasLastPhysMatEnabledMat;                                // 0x02B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5T88[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnBeginPlay();
		bool IsVolumeReachableByPhotoMode();
		bool IsNiagaraActivationAllowed();
		bool IsLocalPlayerInVolume();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ParticleSystemSpawnComponent
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class UParticleSystemSpawnComponent : public USceneComponent
	{
	public:
		TArray<class UVisualEffect*>                               Particles;                                               // 0x0228(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6DAR[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnParticleSystem();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PartyComponent
	 * Size -> 0x0338 (FullSize[0x03E8] - InheritedSize[0x00B0])
	 */
	class UPartyComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DLNC[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGameRest;                                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyRestStatusChanged;                                // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyItemObtainedDelegate;                               // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewResourceKnownDelegate;                              // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceResearchedDelegate;                            // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpgradePointsAquiredDelegate;                          // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewRecipeKnownDelegate;                                // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewRecipesKnownDelegate;                               // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTechTreeUnlockedDelegate;                              // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTechChipRedeemed;                                      // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTechUnlockDataUnlockedDelegate;                        // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTechTreeNodeSpendDelegate;                             // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPointOfInterestDiscovered;                             // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnColorThemeDiscovered;                                  // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecipeChangedDelegate;                                 // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemKnowledgeChangedDelegate;                          // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemStacksChanged;                                     // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemStackUpgradeChanged;                               // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnScienceFoundChangedDelegate;                           // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResearchPointsChangedDelegate;                         // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecipeCrafted;                                         // 0x0208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemCrafted;                                           // 0x0218(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCozinessLevelAchieved;                                 // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCreatureKilled;                                        // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerIdentitiesChangedDelegate;                       // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              bCheatDisableIntegrity : 1;                              // 0x0258(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseAlternateRecipeMode : 1;                             // 0x0258(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BK3Q[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DefaultRestDuration;                                     // 0x025C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSpeakingRange;                                        // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAddCraftingIngredientsAsKnownResources;                 // 0x0264(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RY0V[0x3];                                   // 0x0265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASurvivalPlayerCharacter*>                    PartyMembers;                                            // 0x0268(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class ASurvivalPlayerCharacter*>                    RestingPartyMembers;                                     // 0x0278(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     RestingSequencePath;                                     // 0x0288(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LastRestTime;                                            // 0x02A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   RestCooldown;                                            // 0x02A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ULevelSequencePlayer*                                ActiveRestSequencePlayer;                                // 0x02A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ScienceFound;                                            // 0x02B0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ResearchPoints;                                          // 0x02B4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4XAX[0x4];                                   // 0x02B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PartyUpgradePoints;                                      // 0x02BC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PersonalUpgradePoints;                                   // 0x02C0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CCMU[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItem*>                                       OwnedKeyItems;                                           // 0x02C8(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<struct FRecipeKnowledge>                            KnownCraftingRecipes;                                    // 0x02D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FRecipeKnowledge>                            KnownBuildingRecipes;                                    // 0x02E8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FItemKnowledge>                              AllItemKnowledge;                                        // 0x02F8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FTechUnlockData>                             TechUnlockDatas;                                         // 0x0308(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_509G[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle_NetCrc>                  UnlockedTechTrees;                                       // 0x0328(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class UPointOfInterestDataAsset*>                   DiscoveredPointsOfInterest;                              // 0x0338(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      DiscoveredColorThemes;                                   // 0x0348(0x0010) Net, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<struct FDataTableRowHandle_NetCrc>                  UnlockedSignSetData;                                     // 0x0358(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<struct FDataTableRowHandle>                         PartyStatusEffects;                                      // 0x0368(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FGameplayTag>                                UnlockedTransmitterTypes;                                // 0x0378(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BC8P[0x30];                                  // 0x0388(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FUniqueNetIdRepl>                            PlayerIdentities;                                        // 0x03B8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FUniqueNetIdRepl>                            RandomPlayerIdentities;                                  // 0x03C8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FItemStackUpgrade>                           ItemStackUpgrades;                                       // 0x03D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate

	public:
		void UpdateResearchPointData(int32_t PreviousAmount);
		void SetPlayerIdentityViaPlayerState(class APlayerState* PlayerState, EPlayerCharacterIdentity PlayerIdentity);
		void ServerViewTutorial(const struct FDataTableRowHandle& TutorialRowHandle);
		void ServerUseTechTreeKeyItem(class UItem* Item, class ASurvivalPlayerController* Instigator);
		void ServerUnlockTechTree(const struct FDataTableRowHandle& TechTreeRowHandle, class ASurvivalPlayerController* Instigator);
		void ServerUnlockItemStackUpgradeTier(const struct FGameplayTag& ItemStackTag, class ASurvivalPlayerState* AquirerPlayerState, bool bIgnoreCost);
		void ServerSpendPointsOnTechTreeUnlock(const struct FDataTableRowHandle& TechTreeRecipeRowHandle, int32_t Points, class ASurvivalPlayerController* Instigator);
		void ServerSetTutorialComplete(const struct FDataTableRowHandle& TutorialRowHandle);
		void ServerRemoveScience(int32_t ScienceAmount);
		void ServerRemoveKeyItem(const struct FDataTableRowHandle& ItemRowHandle);
		void ServerPurchaseRecipe(const struct FDataTableRowHandle& TechTreeRecipeRowHandle, class ASurvivalPlayerController* Instigator);
		void ServerCreateAndAddKeyItem(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerCharacter* Acquirer, bool bHideNotification);
		void ServerAddScienceFound(int32_t ScienceAmount);
		void ServerAddKeyItem(class UItem* Item, class ASurvivalPlayerCharacter* Acquirer, bool bHideNotification);
		void RestParty();
		void ResetPlayerIdentities();
		void RecipeCraftedCallback(class UInventoryComponent* Sender, const struct FDataTableRowHandle& RecipeRow);
		void OnRep_TechUnlockDatas();
		void OnRep_ScienceFound(int32_t PreviousScienceFound);
		void OnRep_RestingPartyMembers();
		void OnRep_ResearchPointsAdded(int32_t PreviousAmount);
		void OnRep_KnownRecipesChanged();
		void OnRep_ItemStackUpgrades();
		void OnRep_ItemKnowledge();
		void OnRep_AssignedPlayerIdentities();
		void NotifyCreatureKillCredit(class ASurvivalCharacter* Creature, class ASurvivalPlayerState* Killer);
		void MulticastUpgradePointsAdded(bool IsPartyUpgradePoints, int32_t Amount, class ASurvivalPlayerState* AquirerPlayerState);
		void MulticastTechUnlockDataUnlocked(const struct FDataTableRowHandle& TechUnlockDataRowHandle, class ASurvivalPlayerState* UnlockerPlayerState);
		void MulticastTechTreeUnlocked(const struct FDataTableRowHandle& TechTreeRowHandle, class ASurvivalPlayerState* UnlockerPlayerState);
		void MulticastStartRestParty();
		void MulticastPointOfInterestDiscovered(class UPointOfInterestDataAsset* ColorTheme, class ASurvivalPlayerState* UnlockerPlayerState);
		void MulticastNotifyResourceResearched(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerState* AcquirerPlayerState, TArray<struct FDataTableRowHandle> RecipesLearned);
		void MulticastNotifyNewResourceKnown(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerState* AcquirerPlayerState, TArray<struct FDataTableRowHandle> RecipesLearned);
		void MulticastNotifyNewRecipesKnownCoziness(TArray<struct FDataTableRowHandle> RecipeRowHandles, class ASurvivalPlayerState* AcquirerPlayerState, int32_t CozinessLevel);
		void MulticastNotifyNewRecipesKnown(TArray<struct FDataTableRowHandle> RecipeRowHandles, class ASurvivalPlayerState* AcquirerPlayerState, ERecipeUnlockSource RecipeUnlockSource, const struct FLocString& DisplayName);
		void MulticastNotifyNewRecipeKnown(const struct FDataTableRowHandle& RecipeRowHandle, class ASurvivalPlayerState* AcquirerPlayerState);
		void MulticastNotifyKeyItemCollected(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerState* AcquirerPlayerState, TArray<struct FDataTableRowHandle> RecipesLearned);
		void MulticastItemStackUpgradeChanged(const struct FGameplayTag& ItemStackTag, class ASurvivalPlayerState* AquirerPlayerState);
		void MulticastColorThemeDiscovered(class UClass* PointOfInterest, class ASurvivalPlayerState* UnlockerPlayerState);
		bool KnowsResourceName(const class FName& ItemName);
		bool KnowsResource(const struct FDataTableRowHandle& ItemRowHandle);
		bool KnowsRecipeForIngredient(const struct FDataTableRowHandle& ItemRowHandle);
		bool KnowsRecipe(const struct FDataTableRowHandle& RecipeRowHandle, bool bIncludeHidden);
		bool KnowsOtherRecipeThatContainsIngredientRecipe(const struct FDataTableRowHandle& RecipeRowHandle);
		bool KnowsOtherRecipeThatContainsIngredient(const struct FDataTableRowHandle& IngredientRowHandle);
		bool KnowsOfRecipeIngredient(const struct FDataTableRowHandle& IngredientRowHandle);
		bool KnowsCraftingRecipeForIngredient(const struct FDataTableRowHandle& IngredientRowHandle);
		bool KnowsCraftingRecipe(const struct FDataTableRowHandle& RecipeRowHandle, bool bIncludeHidden);
		bool KnowsBuildingRecipeForIngredient(const struct FDataTableRowHandle& IngredientRowHandle);
		bool KnowsBuildingRecipe(const struct FDataTableRowHandle& RecipeRowHandle, bool bIncludeHidden);
		bool IsTechTreeRecipeUnlocked(const struct FDataTableRowHandle& TechTreeRecipeRowHandle);
		bool IsRestOnCooldown();
		bool IsAnyPartyMemberInRange(const struct FVector& Location, float Range);
		bool HasResearchedResourceName(const class FName& ItemRowName);
		bool HasResearchedResource(const struct FDataTableRowHandle& ItemRowHandle);
		bool HasKeyItemSubcategory(const struct FGameplayTag& KeyItemCategory, const struct FGameplayTag& KeyItemSubCategory);
		bool HasKeyItemCategory(const struct FGameplayTag& KeyItemCategory);
		bool HasKeyItem(const struct FDataTableRowHandle& ItemRowHandle);
		TArray<struct FDataTableRowHandle_NetCrc> GetUnlockedTechTrees();
		TArray<struct FDataTableRowHandle_NetCrc> GetUnlockedSignSets();
		TArray<class UPointOfInterestDataAsset*> GetUnlockedPOIs();
		TArray<class UClass*> GetUnlockedColorThemes();
		int32_t GetTotalPersonalUpgradePoints();
		int32_t GetTotalPartyUpgradePoints();
		class UItem* GetTechTreeKeyItem(bool bCheckUnlocked);
		int32_t GetTeamReputation(const struct FDataTableRowHandle& TeamRowHandle);
		int32_t GetScienceFound();
		float GetRestCooldownRemaining();
		int32_t GetResearchPoints();
		int32_t GetResearchLevel();
		int32_t GetReputation(const struct FGameplayTag& FactionTag);
		int32_t GetRemainingPartyUpgradePoints();
		TArray<struct FDataTableRowHandle> GetRecipesUnlockedForResearchLevel(int32_t ResearchLevel);
		struct FDataTableRowHandle GetRecipeForItems(TArray<struct FDataTableRowHandle> Items, const struct FGameplayTag& CraftingBuildingTag);
		struct FDataTableRowHandle GetRecipeForIngredients(TArray<struct FRecipeRequirements> Requirements, const struct FGameplayTag& CraftingBuildingTag);
		float GetProgressTowardsNextResearchLevel(int32_t Points);
		int32_t GetPointsSpentOnTechUnlock(const struct FDataTableRowHandle& TechUnlockRowHandle);
		int32_t GetPointsRequiredForResearchLevel(int32_t Level);
		int32_t GetPointsRequiredForNextResearchLevel(int32_t Points);
		class ASurvivalPlayerState* GetPlayerStateMatchingIdentity(EPlayerCharacterIdentity Identity);
		EPlayerCharacterIdentity GetPlayerIdentityViaPlayerState(class ASurvivalPlayerState* PlayerState);
		EPlayerCharacterIdentity GetPlayerIdentityViaController(class APlayerController* PlayerController);
		EPlayerCharacterIdentity GetPlayerIdentity(const struct FUniqueNetIdRepl& UniqueId);
		TArray<class ASurvivalPlayerCharacter*> GetPartyMembers();
		int32_t GetNumTechTreeUnlocksPurchased();
		int32_t GetNumTechDatasUnlockedForTreeRowHandle(const struct FDataTableRowHandle& TechTreeRowHandle);
		int32_t GetNumResearchedResources();
		int32_t GetNumPartyMembers();
		float GetMaxSpeakingRangeSq();
		float GetMaxSpeakingRange();
		float GetLastRestTime();
		TArray<struct FDataTableRowHandle> GetKnownResources(const struct FGameplayTag& ItemTag);
		TArray<class UItem*> GetKeyItems();
		class UItem* GetKeyItem(const struct FDataTableRowHandle& ItemRowHandle);
		int32_t GetItemStackUpgradeTier(const struct FGameplayTag& ItemStackTag);
		int32_t GetItemStackUpgradeCost(const struct FGameplayTag& ItemStackTag);
		int32_t GetItemStackUpgradeBonus(const struct FGameplayTag& ItemStackTag);
		int32_t GetItemResearchPoints(const struct FGameplayTag& RarityTag);
		struct FGameplayTag GetHighestReputation();
		class ASurvivalPlayerCharacter* GetFirstPartyMemberByIdentity(EPlayerCharacterIdentity Identity);
		TArray<class ABuilding*> GetEssentialBuildings();
		int32_t GetCurrentResearchLevelForPointTotal(int32_t Points);
		TArray<struct FDataTableRowHandle> GetCraftingRecipesWithIngredient(const struct FDataTableRowHandle& IngredientRowHandle, bool OnlyIncludeKnownRecipes);
		class ASurvivalPlayerCharacter* GetClosestPlayer(const struct FVector& Location);
		float GetClosestPartyMemberDistanceSquared(const struct FVector& Location);
		TArray<struct FDataTableRowHandle> GetBuildingRecipesWithIngredient(const struct FDataTableRowHandle& IngredientRowHandle, bool OnlyIncludeKnownRecipes);
		int32_t GetBonusScienceForResearchLevel(int32_t ResearchLevel);
		float GetBestiaryHealth(const struct FDataTableRowHandle& BestiaryRowHandle);
		TArray<ESurvivalDamageTypeFlags> GetBestiaryDamageWeaknesses(const struct FDataTableRowHandle& BestiaryRowHandle);
		TArray<ESurvivalDamageTypeFlags> GetBestiaryDamageResistances(const struct FDataTableRowHandle& BestiaryRowHandle);
		void FreePlayerIdentityViaPlayerController(class APlayerController* PlayerController);
		void FinishRestSequence();
		bool DiscoverPointOfInterestData(class UPointOfInterestDataAsset* PointOfInterestData, class ASurvivalPlayerController* Instigator);
		bool DiscoverPointOfInterest(class UPointOfInterestComponent* PointOfInterest, class ASurvivalPlayerController* Instigator);
		bool DiscoveredResourceName(const class FName& ItemName);
		bool DiscoveredResource(const struct FDataTableRowHandle& ItemRowHandle);
		bool DiscoverColorTheme(class UClass* Theme, class ASurvivalPlayerController* Instigator);
		void ClearTeamReputation(const struct FDataTableRowHandle& TeamRowHandle);
		void ClearReputation(const struct FGameplayTag& FactionTag);
		bool CanUpgradeItemStack(const struct FGameplayTag& ItemStackTag, bool bIgnoreCost);
		void AddUnlockedSignSet(const struct FDataTableRowHandle& SignSetDataHandle);
		void AddTeamReputation(const struct FDataTableRowHandle& TeamRowHandle, int32_t Value);
		void AddScience(int32_t ScienceAmount);
		void AddResearchedResource(const struct FDataTableRowHandle& ItemRowHandle, class ASurvivalPlayerState* AquirerPlayerState);
		void AddReputation(const struct FGameplayTag& FactionTag, int32_t Value);
		void AddPersonalUpgradePoints(int32_t Amount, class ASurvivalPlayerState* AquirerPlayerState);
		void AddPartyUpgadePoints(int32_t Amount, class ASurvivalPlayerState* AquirerPlayerState);
		bool AddKnownRecipe(const struct FDataTableRowHandle& RecipeRowHandle, class ASurvivalPlayerState* AquirerPlayerState, bool bMulticastNewRecipeUnlocked);
		bool AddKnownCraftingRecipeByName(const class FName& RecipeName, class ASurvivalPlayerState* AquirerPlayerState, bool bMulticastNewRecipeUnlocked);
		bool AddKnownCraftingRecipe(const struct FDataTableRowHandle& RecipeRowHandle, class ASurvivalPlayerState* AquirerPlayerState, bool bMulticastNewRecipeUnlocked);
		bool AddKnownBuildingRecipeByName(const class FName& RecipeName, class ASurvivalPlayerState* AquirerPlayerState, bool bMulticastNewRecipeUnlocked);
		bool AddKnownBuildingRecipe(const struct FDataTableRowHandle& RecipeRowHandle, class ASurvivalPlayerState* AquirerPlayerState, bool bMulticastNewRecipeUnlocked);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PerkComponent
	 * Size -> 0x0100 (FullSize[0x01B0] - InheritedSize[0x00B0])
	 */
	class UPerkComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_00CC[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPerksChanged;                                          // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkUnlocked;                                          // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    MaxEquippedPerks;                                        // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QAJD[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPerkStatus>                                 Perks;                                                   // 0x00E8(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I6F5[0xB8];                                  // 0x00F8(0x00B8) MISSED OFFSET (PADDING)

	public:
		void UnlockPerkTier(const struct FDataTableRowHandle& PerkRowHandle, int32_t Tier);
		void ServerUnequipPerk(const class FName& PerkName);
		void ServerEquipPerk(const class FName& PerkName);
		void OnRep_Perks();
		void OnPlayerStatChanged(class UPlayerStatConfig* PlayerStat, int32_t Value);
		void OnGlobalVariableChanged(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		bool IsPerkEquipped(const struct FDataTableRowHandle& PerkRowHandle);
		bool HasAvailablePerkEquip();
		TArray<struct FPerkStatus> GetPerks();
		int32_t GetNumEquippedPerks();
		int32_t GetMaxEquippedPerks();
		int32_t GetDefaultMaxEquippedPerks();
		void ClientNotifyUnlockPerk(const struct FPerkStatus& Perk);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PerlinNoiseFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPerlinNoiseFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetPerlinNoiseSeed(struct FPerlinNoise* Noise, int32_t NewSeed);
		float SamplePerlinNoise1D(struct FPerlinNoise* Noise, float Value);
		int32_t GetPerlinNoiseSeed(struct FPerlinNoise* Noise);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PersistenceComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UPersistenceComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_NSPU[0x1];                                   // 0x00B0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bNeverSpawnAsDynamicActor;                               // 0x00B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIgnoreTransformRestore;                                 // 0x00B2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FR95[0x5];                                   // 0x00B3(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PersistentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPersistentInterface : public UInterface
	{
	public:
		bool SkippedLoadOfActor();
		bool ShouldSave();
		bool ShouldLoad();
		void Save(class USaveWriter* Writer);
		void ProcessLoadData();
		void PrepareSave();
		void LoadAll(class USaveReader* Reader, int32_t Version);
		void Load(class USaveReader* Reader, int32_t Version);
		int32_t GetSaveVersion();
		int32_t GetProcessLoadDataOrder();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveWriter
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USaveWriter : public UObject
	{
	public:
		unsigned char                                              UnknownData_IRXW[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveReader
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USaveReader : public UObject
	{
	public:
		unsigned char                                              UnknownData_RTER[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PersistentUtilsStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPersistentUtilsStatics : public UBlueprintFunctionLibrary
	{
	public:
		void BlueprintWritePersistentInt(class USaveWriter* Writer, int32_t Value);
		void BlueprintWritePersistentBool(class USaveWriter* Writer, bool Value);
		int32_t BlueprintReadPersistentInt(class USaveReader* Reader);
		bool BlueprintReadPersistentBool(class USaveReader* Reader);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PetHomeBuilding
	 * Size -> 0x0020 (FullSize[0x0648] - InheritedSize[0x0628])
	 */
	class APetHomeBuilding : public AWidgetBuilding
	{
	public:
		class FScriptMulticastDelegate                             OnStoredPetChanged;                                      // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UCreatureLODActor>                    StoredPet;                                               // 0x0638(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASurvivalCreature*                                   StoredPetFull;                                           // 0x0640(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_StoredPetFull();
		void HandleStoredPetLODActorConvertedToProxyActor(class UBaseLODActor* LODActor);
		void HandleStoredPetLODActorConvertedToFullActor(class UBaseLODActor* LODActor);
		class UTamedCreatureData* GetStoredTameData();
		class ASurvivalCreature* GetStoredPetFull();
		class UCreatureLODActor* GetStoredPet();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PheromoneBroadcasterBuilding
	 * Size -> 0x00C8 (FullSize[0x06F0] - InheritedSize[0x0628])
	 */
	class APheromoneBroadcasterBuilding : public AWidgetBuilding
	{
	public:
		float                                                      InfluenceRange;                                          // 0x0628(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PheromoneCapacity;                                       // 0x062C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ConsumptionRate;                                         // 0x0630(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K4K5[0x4];                                   // 0x0634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPowerReservoir                                     PowerReservoir;                                          // 0x0638(0x0028) BlueprintVisible, Net, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M4XI[0x90];                                  // 0x0660(0x0090) MISSED OFFSET (PADDING)

	public:
		void TurnOff();
		void TickConsume(float DeltaTime);
		void SetGatheringEnabled(bool bState);
		void SetBuildingEnabled(bool bState);
		bool IsAcceptablePowerItem(class UItem* Item);
		void HandleBuildingUnderConstruction(class UBuildingManagerComponent* Sender, class ABuilding* Building);
		void HandleBuildingNotUnderConstruction(class UBuildingManagerComponent* Sender, class ABuilding* Building);
		bool GetGatheringEnabled();
		bool GetBuildingEnabled();
		bool CanStart();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhobiaControllerComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UPhobiaControllerComponent : public UActorComponent
	{
	public:
		TArray<struct FPhobiaMeshData>                             MeshData;                                                // 0x00B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UMaterialSwapComponent*                              MaterialSwapComponent;                                   // 0x00C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSafeMode(int32_t Setting);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhotoModeCheckBox
	 * Size -> 0x0008 (FullSize[0x0AC8] - InheritedSize[0x0AC0])
	 */
	class UPhotoModeCheckBox : public UPhotoModeCheckBoxBase
	{
	public:
		class USoundBase*                                          HoverFocusReceivedSound;                                 // 0x0AC0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhotoModeComboBox
	 * Size -> 0x0008 (FullSize[0x0FD0] - InheritedSize[0x0FC8])
	 */
	class UPhotoModeComboBox : public UPhotoModeComboBoxBase
	{
	public:
		class USoundBase*                                          HoverFocusReceivedSound;                                 // 0x0FC8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhotoModeHUD
	 * Size -> 0x01F8 (FullSize[0x04A0] - InheritedSize[0x02A8])
	 */
	class UPhotoModeHUD : public UWindowWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMainePhotoModeSettings*                             NewSettings;                                             // 0x02B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          UIToggledVisibleSound;                                   // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          UIToggledHiddenSound;                                    // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          ButtonDownActionSound;                                   // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FPhotoModeValues                                    PhotoModeDefaults;                                       // 0x02D0(0x01C0) BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       AreSettingsActive;                                       // 0x0490(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsCurrentlyVisible;                                      // 0x0491(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T2OY[0xE];                                   // 0x0492(0x000E) MISSED OFFSET (PADDING)

	public:
		void ToggleUIVisibility();
		void TogglePhotoModeSettings();
		void TakePhotoOverride(class APhotoPawn* PhotoPawn);
		void ShowUI();
		void RestoreDefaults();
		void OpenPhotoModeSettings();
		void OnSettingsOpened();
		void OnSettingsClosed();
		void OnPhotoTaken();
		void OnPhotoModePreExit();
		bool IsHUDVisible();
		void HideUI();
		void HandleGenericMessage(const class FString& Message, class UTexture2D* MessageIcon);
		void ExitPhotoMode();
		void ClosePhotoModeSettings();
		bool AreSettingsOpen();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhotoModeSettingsSlider
	 * Size -> 0x0020 (FullSize[0x05B8] - InheritedSize[0x0598])
	 */
	class UPhotoModeSettingsSlider : public UPhotoModeSliderBase
	{
	public:
		class USoundBase*                                          HoverFocusReceivedSound;                                 // 0x0598(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          CaptureReceivedSound;                                    // 0x05A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          CaptureLostSound;                                        // 0x05A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          ValueChangedSound;                                       // 0x05B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PhysicsStateManager
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UPhysicsStateManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_KXKE[0xB0];                                  // 0x0028(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyPlayerCharacterActor
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class UProxyPlayerCharacterActor : public UProxyCharacterActor
	{
	public:
		TWeakObjectPtr<class UCreatureLODActor>                    CurrentPet;                                              // 0x0310(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HMLH[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerCharacterLODActor
	 * Size -> 0x0000 (FullSize[0x0190] - InheritedSize[0x0190])
	 */
	class UPlayerCharacterLODActor : public UCharacterLODActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerListWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UPlayerListWidget : public UWindowWidget
	{
	public:
		void KickPlayer(class APlayerController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerNameplateWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class UPlayerNameplateWidget : public UGameUserWidget
	{
	public:
		TWeakObjectPtr<class UHUDMarkerData>                       MarkerData;                                              // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        ContentCanvas;                                           // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox*                                            KnockedOutHolder;                                        // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GXIB[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateNameplatePosition();
		void UpdateInfoForMarker();
		void OnMarkerDataSet();
		void OnIncapacitationRatioChanged(float NewRatio);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerScalingReceiverComponent
	 * Size -> 0x0008 (FullSize[0x00E8] - InheritedSize[0x00E0])
	 */
	class UPlayerScalingReceiverComponent : public UAuraReceiverComponent
	{
	public:
		class UDefenseScalingData*                                 ScalingTable;                                            // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnCombatChanged(class ASurvivalCharacter* Character, bool bState);
		float GetStunDurationMultiplier();
		float GetMaxStunMultiplier();
		float GetMaxHealthMultiplier();
		float GetDamageResistanceMultiplier();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerSFXComponent
	 * Size -> 0x0090 (FullSize[0x0140] - InheritedSize[0x00B0])
	 */
	class UPlayerSFXComponent : public UActorComponent
	{
	public:
		class USoundMix*                                           DrowningTimerSFX;                                        // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundMix*                                           CriticalDrowningTimerSFX;                                // 0x00B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DrowningTimerBreathLeft;                                 // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CriticalDrowningTimerBreathLeft;                         // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwimHeartbeatTimeThreshold;                              // 0x00C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WL90[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          HeartbeatSFX;                                            // 0x00D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         HeartbeatVolumeCurve;                                    // 0x00D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         HeartbeatPitchCurve;                                     // 0x00E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundMix*                                           StarvationMix;                                           // 0x00E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          StarvingSFX;                                             // 0x00F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UReverbEffect*                                       StarvingReverbEffect;                                    // 0x00F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         StarvationReverbSendLevelCurve;                          // 0x0100(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StarvationReverbName;                                    // 0x0108(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StarvationTimerStart;                                    // 0x0110(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_53TQ[0x2C];                                  // 0x0114(0x002C) MISSED OFFSET (PADDING)

	public:
		void TriggerStarvationSFXUpdate();
		void StopSFX();
		void SetSurvivalComponent(class USurvivalComponent* InComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerStatConfig
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UPlayerStatConfig : public UDataAsset
	{
	public:
		struct FLocString                                          DisplayString;                                           // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ME1Z[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatKillConfig
	 * Size -> 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
	 */
	class UStatKillConfig : public UPlayerStatConfig
	{
	public:
		class UClass*                                              TargetClass;                                             // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               TargetTags;                                              // 0x0050(0x0020) Edit, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               AttackTags;                                              // 0x0070(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatItemConfig
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class UStatItemConfig : public UPlayerStatConfig
	{
	public:
		struct FDataTableRowHandle                                 TargetItem;                                              // 0x0048(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               Tags;                                                    // 0x0058(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatCraftConfig
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UStatCraftConfig : public UStatItemConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatPickupConfig
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UStatPickupConfig : public UStatItemConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatReviveConfig
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UStatReviveConfig : public UPlayerStatConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatDiscoverConfig
	 * Size -> 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
	 */
	class UStatDiscoverConfig : public UPlayerStatConfig
	{
	public:
		class UPointOfInterestDataAsset*                           PointOfInterestData;                                     // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               Tags;                                                    // 0x0050(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatStaminaConfig
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UStatStaminaConfig : public UPlayerStatConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatBasketballShotConfig
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UStatBasketballShotConfig : public UPlayerStatConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatTamePetConfig
	 * Size -> 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
	 */
	class UStatTamePetConfig : public UPlayerStatConfig
	{
	public:
		class UClass*                                              TargetClass;                                             // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               TargetTags;                                              // 0x0050(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatProcessItemConfig
	 * Size -> 0x0050 (FullSize[0x0098] - InheritedSize[0x0048])
	 */
	class UStatProcessItemConfig : public UPlayerStatConfig
	{
	public:
		struct FGameplayTagContainer                               TargetProcessingBuildingTypes;                           // 0x0048(0x0020) Edit, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 TargetItem;                                              // 0x0068(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               ItemTags;                                                // 0x0078(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatZiplineDistanceConfig
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UStatZiplineDistanceConfig : public UPlayerStatConfig
	{
	public:
		bool                                                       bTrackMaxDistanceOnly;                                   // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0D4I[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatUseItemConfig
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UStatUseItemConfig : public UStatItemConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatBlockConfig
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UStatBlockConfig : public UPlayerStatConfig
	{
	public:
		EBlockType                                                 BlockType;                                               // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackCurrentInARowOnly;                                 // 0x0049(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X5M0[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatScriptedConfig
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UStatScriptedConfig : public UPlayerStatConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatPhotoConfig
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UStatPhotoConfig : public UPlayerStatConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatRangedAttackConfig
	 * Size -> 0x0050 (FullSize[0x0098] - InheritedSize[0x0048])
	 */
	class UStatRangedAttackConfig : public UPlayerStatConfig
	{
	public:
		class UClass*                                              TargetHitCharacterClass;                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               TargetCharacterTags;                                     // 0x0050(0x0020) Edit, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               TargetTags;                                              // 0x0070(0x0020) Edit, NativeAccessSpecifierPublic
		bool                                                       bRequiresKillingBlow;                                    // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackMaxDistance;                                       // 0x0091(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TZ53[0x6];                                   // 0x0092(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerStatsComponent
	 * Size -> 0x0080 (FullSize[0x0130] - InheritedSize[0x00B0])
	 */
	class UPlayerStatsComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_A2TM[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerStatChanged;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UPlayerStatConfig*>                           PlayerStatConfigs;                                       // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class UPlayerStatConfig*, int32_t>                    PlayerStats;                                             // 0x00E0(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void SetPlayerStatIfLarger(class UPlayerStatConfig* PlayerStat, int32_t NewValue);
		void OnStaminaDepleted(float StaminaRatio);
		void OnReviveTarget(class AActor* RevivedActor);
		void OnPointOfInterestDiscovered(class UPointOfInterestDataAsset* PointOfInterest);
		void OnPhotoTaken();
		void OnPetTamed(class ASurvivalCreature* Pet);
		void OnKill(class AActor* KilledActor, const struct FDamageInfo& DamageInfo);
		void OnItemUsed(class ASurvivalCharacter* User, const struct FDataTableRowHandle& ItemRowHandle);
		void OnItemCrafted(class UInventoryComponent* Sender, const struct FDataTableRowHandle& RecipeHandle);
		void OnItemAdded(class UInventoryComponent* InventoryComponent, const struct FDataTableRowHandle& ItemHandle, bool IsNewItem, int32_t Count, int32_t TotalCount);
		void IncrementPlayerStat(class UPlayerStatConfig* PlayerStat, int32_t ValueToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerStatusWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UPlayerStatusWidget : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PlayerUpgradeComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UPlayerUpgradeComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LXTG[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerUpgradesChanged;                                 // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FPlayerUpgrade>                              PlayerUpgrades;                                          // 0x00D0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DDR9[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerUnlockUpgradeTier(const struct FDataTableRowHandle& UpgradeRowHandle, bool bIgnoreCost);
		void OnRep_PlayerUpgrades();
		int32_t GetUpgradeTier(const struct FDataTableRowHandle& UpgradeRowHandle);
		int32_t GetUpgradeCost(const struct FDataTableRowHandle& UpgradeRowHandle);
		int32_t GetTotalSpentPoints();
		int32_t GetRemainingUpgradePoints();
		int32_t GetPerkCountBonus();
		int32_t GetMaxUpgradeTier(const struct FDataTableRowHandle& UpgradeRowHandle);
		bool CanUpgradeTier(const struct FDataTableRowHandle& UpgradeRowHandle, bool bIgnoreCost);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PointOfInterestComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UPointOfInterestComponent : public UActorComponent
	{
	public:
		class UPointOfInterestDataAsset*                           PointOfInterestData;                                     // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZ6Y[0x4];                                   // 0x00B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSubscribeAutomatically;                                 // 0x00BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P83C[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               ActorInstigator;                                         // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayBanter();
		void OnLookTriggered(class ULookTriggerComponent* Sender, const struct FLookTriggeredParams& Params);
		class UPointOfInterestDataAsset* GetPointOfInterestData();
		void Discover(class ASurvivalPlayerController* Instigator);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PointOfInterestDataAsset
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class UPointOfInterestDataAsset : public UDataAsset
	{
	public:
		struct FGameplayTag                                        CategoryTag;                                             // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               Tags;                                                    // 0x0038(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FLocString                                          DisplayName;                                             // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateBrush                                         NotificationIcon;                                        // 0x0068(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FConversationReference                              BanterConversation;                                      // 0x00F0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BanterStartNode;                                         // 0x0108(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IZJM[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              OnDiscoveredSFX[0x28];                                   // 0x0110(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FDataTableRowHandle                                 ItemReward;                                              // 0x0138(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PopulationMonitorComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UPopulationMonitorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DOS0[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnHourChanged(int32_t DayHour, int32_t Day);
		void DumpSamplesToFile();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PossessableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPossessableInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PoweredBuilding
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPoweredBuilding : public UInterface
	{
	public:
		bool IsSwitchActive();
		bool IsSwitch();
		bool IsPowerSource();
		bool IsPowerReceiver();
		bool HasValidPowerId();
		float GetPowerValue();
		EBuildingPowerState GetPowerState();
		struct FBuildingPowerId GetBuildingPowerId();
		bool CanJoinPowerNetwork();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PoweredBuildingConnection
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPoweredBuildingConnection : public UInterface
	{
	public:
		void SetEdgeInfo(int32_t InNodeA, int32_t InNodeB, int32_t InNetworkIdA, int32_t InNetworkIdB);
		class USplineMeshComponent* GetSplineMeshComponent();
		void GetEdgeInfo(int32_t* OutNodeA, int32_t* OutNodeB, int32_t* OutNetworkIdA, int32_t* OutNetworkIdB);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PowerGenerator
	 * Size -> 0x0098 (FullSize[0x06B8] - InheritedSize[0x0620])
	 */
	class APowerGenerator : public ABuilding
	{
	public:
		unsigned char                                              UnknownData_IIEM[0x38];                                  // 0x0620(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPowerReservoir                                     PowerReservoir;                                          // 0x0658(0x0028) Net, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxPowerCapacity;                                        // 0x0680(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        PowerType;                                               // 0x0684(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HoursPerTick;                                            // 0x068C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U625[0x4];                                   // 0x0690(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          ItemChargeText;                                          // 0x0694(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          UseText;                                                 // 0x06A4(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OVD7[0x4];                                   // 0x06B4(0x0004) MISSED OFFSET (PADDING)

	public:
		void TickUpdatePower(float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PowerNetworkManagerComponent
	 * Size -> 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
	 */
	class UPowerNetworkManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_TAS7[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPowerConnectionRemoved;                                // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNetworksCoalesced;                                     // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNodeChangedNetwork;                                    // 0x00E0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNodeRemoved;                                           // 0x00F0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNetworkPowerChanged;                                   // 0x0100(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuildingRelocated;                                     // 0x0110(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		int32_t                                                    NextNodeId;                                              // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    NextNetworkId;                                           // 0x0124(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FBuildingPowerNetwork>                       Networks;                                                // 0x0128(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		float GetTotalPowerForNetwork(int32_t NetworkId);
		class ABuilding* GetPoweredBuilding(const struct FBuildingPowerId& ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PowerReservoirLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPowerReservoirLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool UsesPowerType(const struct FPowerReservoir& Reservoir, const struct FGameplayTag& PowerType);
		bool RemoveCharges(struct FPowerReservoir* Reservoir, float Count);
		bool IsValid(const struct FPowerReservoir& Reservoir);
		bool IsFull(const struct FPowerReservoir& Reservoir);
		bool IsEmpty(const struct FPowerReservoir& Reservoir);
		float GetPowerPercentage(const struct FPowerReservoir& Reservoir);
		float GetEmptySpace(const struct FPowerReservoir& Reservoir);
		struct FGameplayTag GetCurrentPowerType(const struct FPowerReservoir& Reservoir);
		float GetCurrentCharges(const struct FPowerReservoir& Reservoir);
		float GetCapacity(const struct FPowerReservoir& Reservoir);
		struct FGameplayTag GetAllowedPowerType(const struct FPowerReservoir& Reservoir);
		bool CanAcceptPowerType(const struct FPowerReservoir& Reservoir, const struct FGameplayTag& PowerType);
		bool AddCharges(struct FPowerReservoir* Reservoir, const struct FGameplayTag& PowerTag, float Count);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PowerStorageBuilding
	 * Size -> 0x0078 (FullSize[0x0698] - InheritedSize[0x0620])
	 */
	class APowerStorageBuilding : public ABuilding
	{
	public:
		class FScriptMulticastDelegate                             OnPowerStoredChangedDelegate;                            // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FPowerReservoir                                     PowerReservoir;                                          // 0x0630(0x0028) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      PowerCapacity;                                           // 0x0658(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        PowerType;                                               // 0x065C(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractAnimType                                          ItemDepostAnimType;                                      // 0x0664(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractAnimType                                          ItemChargeAnimType;                                      // 0x0665(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractAnimType                                          ManualInteractAnimType;                                  // 0x0666(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IX3P[0x1];                                   // 0x0667(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          ManualActionString;                                      // 0x0668(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          DepositActionString;                                     // 0x0678(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          WithdrawActionString;                                    // 0x0688(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnWithdrawSucceeded();
		void OnWithdrawFailed();
		void OnRep_PowerReservoir(const struct FPowerReservoir& OldValue);
		void OnMixError();
		void OnErrorWithdrawFromEmpty();
		void OnErrorDepositToFull();
		void OnErrorDepositFromEmpty();
		void OnDepositSucceeded();
		bool IsPowerFull();
		bool IsPowerEmpty();
		void InteractManualDrink(class AActor* InstigatedBy);
		struct FPowerReservoir GetPowerReservoir();
		float GetCurrentPower();
		bool ConsumeUnit(struct FGameplayTag* PreviousPowerType);
		bool AddCharges(const struct FGameplayTag& PowerType, int32_t Charges);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProceduralAnimationComponent
	 * Size -> 0x0078 (FullSize[0x02A0] - InheritedSize[0x0228])
	 */
	class UProceduralAnimationComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_Q2EC[0x8];                                   // 0x0228(0x0008) Fix Super Size
		unsigned char                                              UnknownData_R9B6[0x70];                                  // 0x0230(0x0070) MISSED OFFSET (PADDING)

	public:
		void StopAnimation(struct FProceduralAnimationHandle* Handle);
		void SetAdditiveRotationQuat(class UObject* Source, const struct FQuat& Rotation);
		void SetAdditiveRotation(class UObject* Source, const struct FRotator& Rotation);
		struct FProceduralAnimationHandle PlayWiggle(class UObject* Source, class UCurveFloat* InStrengthCurve, float Frequency, float Delay, bool bLoop);
		struct FProceduralAnimationHandle PlayScaleAnimation(class UObject* Source, class UCurveFloat* InStrengthXCurve, class UCurveFloat* InStrengthYCurve, class UCurveFloat* InStrengthZCurve, float Delay, bool bLoop);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProductionBuilding
	 * Size -> 0x00F0 (FullSize[0x0720] - InheritedSize[0x0630])
	 */
	class AProductionBuilding : public ACraftingBuilding
	{
	public:
		class FScriptMulticastDelegate                             OnProductionItemsChanged;                                // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FF0X[0x38];                                  // 0x0640(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxIngredients;                                          // 0x0678(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanProduceNonRecipeItems;                               // 0x067C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O932[0x3];                                   // 0x067D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 DefaultItemResult;                                       // 0x0680(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FRecipeMod>                                  DefaultModItemResults;                                   // 0x0690(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        RecipeModTag;                                            // 0x06A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRequiresModItem;                                        // 0x06A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6HYB[0x3];                                   // 0x06A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProductionTime;                                          // 0x06AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxProductionItems;                                      // 0x06B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSimulateousItems;                                     // 0x06B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          FlavorText;                                              // 0x06B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          IngredientFlavorText;                                    // 0x06C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          ModifierFlavorText;                                      // 0x06D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          QueueText;                                               // 0x06E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          FlavorImage;                                             // 0x06F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FRecipeProducitonItem>                       ProductionItems;                                         // 0x0700(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x0710(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialBillboardComponent*                         MaterialBillboardComponent;                              // 0x0718(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TickVisuals(float DeltaSeconds);
		void TickProduction(float DeltaTime);
		void ReceiveProcductionTick(float DeltaSeconds);
		bool ProductionCapacityIsFull();
		void OnRep_ProductionItemsChanged();
		void NotifyProductionItemStarted();
		void MulticastNotifyProductionItemStarted();
		bool IsItemFinished(class UItem* Item);
		bool HasItemsInProduction();
		class UItem* GetRecipeModItem();
		TArray<class UItem*> GetRecipeItems();
		float GetProductionTime();
		TArray<struct FRecipeProducitonItem> GetProductionItems();
		float GetItemProgress(class UItem* Item);
		struct FDataTableRowHandle GetDefaultItemResult();
		struct FDataTableRowHandle FindBestRecipe();
		bool CanCraft();
		bool CanAddItem(class UItem* Item);
		bool AreIngredientsFull();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Projectile
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class AProjectile : public AActor
	{
	public:
		unsigned char                                              UnknownData_NQGM[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProjectileMovementComponent*                        ProjectileMovementComponent;                             // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    CollisionComponent;                                      // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ParticleTrailComponent;                                  // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyOnImpact;                                        // 0x0250(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I73L[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 ItemRowHandle;                                           // 0x0258(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BIP6[0x20];                                  // 0x0268(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnStop(const struct FHitResult& ImpactResult);
		void OnParticleSystemFinished(class UParticleSystemComponent* ParticleSystemComponent);
		void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void DestroyProjectile(bool bForceDestroy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.PropManagerComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UPropManagerComponent : public UActorComponent
	{
	public:
		TArray<class UClass*>                                      ClassesToManage;                                         // 0x00B0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SNLJ[0x18];                                  // 0x00C0(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProximityInventoryComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UProximityInventoryComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_3W2F[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnProximityInventoriesChanged;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      Radius;                                                  // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z4EL[0x14];                                  // 0x00CC(0x0014) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* Item, int32_t Count);
		void OnInventoryChanged();
		int32_t GetNumNearbyInventories();
		TArray<class UItem*> GetItems();
		void ClearInventories();
		void CacheInventories();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyStandInActor
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class AProxyStandInActor : public AActor
	{
	public:
		class UBaseLODActor*                                       LODOwner;                                                // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                MeshComponent;                                           // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyCharacterStandInActor
	 * Size -> 0x1078 (FullSize[0x12B8] - InheritedSize[0x0240])
	 */
	class AProxyCharacterStandInActor : public AProxyStandInActor
	{
	public:
		unsigned char                                              UnknownData_S6FY[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFlySwimCharacterWiggle                             WiggleData;                                              // 0x0250(0x1020) Net, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XGD8[0x48];                                  // 0x1270(0x0048) MISSED OFFSET (PADDING)

	public:
		void OnLocalPlayerSpyGlassStateChanged(bool Enabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.QuadAudioBedSounds
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UQuadAudioBedSounds : public UDataAsset
	{
	public:
		struct FQuadAudioBedSoundData                              DaySounds;                                               // 0x0030(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FQuadAudioBedSoundData                              NightSounds;                                             // 0x0050(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FQuadAudioBedSoundData                              SubmergedSounds;                                         // 0x0070(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.QuadAudioBedComponent
	 * Size -> 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
	 */
	class UQuadAudioBedComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_3632[0x8];                                   // 0x0228(0x0008) Fix Super Size
		unsigned char                                              UnknownData_27NE[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EQuadAudioSatelliteType, class UQuadAudioSatelliteComponent*> SatelliteComponentsMap;                                  // 0x0240(0x0050) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void OnUpdateZoneAmbience(const struct FDataTableRowHandle& ZoneAudioDataTableRowHandle, bool bIsSubmerged);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.QuadAudioSatelliteComponent
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class UQuadAudioSatelliteComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_H08F[0x8];                                   // 0x0228(0x0008) Fix Super Size
		class UAudioComponent*                                     CurrentAudioComponent;                                   // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAudioComponent*>                             FadingAudioComponents;                                   // 0x0238(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G4TV[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Objective
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UObjective : public UBaseObjective
	{
	public:
		unsigned char                                              UnknownData_W5YB[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle_NetCrc                          QuestDataRowHandle;                                      // 0x0048(0x0030) Net, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    ObjectiveIndex;                                          // 0x0078(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bActive : 1;                                             // 0x007C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCompleted : 1;                                          // 0x007C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GJ1X[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_ObjectiveChanged();
		bool IsValidForGamePackage();
		bool IsTutorialObjective();
		struct FDataTableRowHandle GetQuestDataRowHandle();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Quest
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UQuest : public UBaseQuest
	{
	public:
		unsigned char                                              UnknownData_U5AC[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle_NetCrc                          QuestDataRowHandle;                                      // 0x0038(0x0030) Net, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F0BW[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Started;                                                 // 0x0070(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Completed;                                               // 0x0071(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NTWW[0x6];                                   // 0x0072(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObjective*>                                  Objectives;                                              // 0x0078(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic
		TArray<class UBaseObjective*>                              BaseObjectives;                                          // 0x0088(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate

	public:
		void OnRep_QuestChanged();
		bool IsValidForGamePackage();
		bool IsTutorialQuest();
		struct FDataTableRowHandle GetQuestDataRowHandle();
		class FString GetObjectiveName(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.QuestManagerComponent
	 * Size -> 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
	 */
	class UQuestManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EYQC[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnQuestStarted;                                          // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnQuestComplete;                                         // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnQuestReplicationUpdated;                               // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveActivated;                                    // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveComplete;                                     // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UQuest*>                                      PartyQuests;                                             // 0x0110(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<class UQuest*>                                      DummyClientQuestList;                                    // 0x0120(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F64J[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartQuest(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState, class AActor* Instigator);
		void ResetQuest(const struct FDataTableRowHandle& QuestRowHandle);
		void OnRep_PartyQuests();
		void OnGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		void MulticastStartQuest(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState);
		void MulticastCompleteQuest(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState);
		void MulticastCompleteObjective(const struct FDataTableRowHandle& QuestRowHandle, int32_t QuestIndex, class ASurvivalPlayerState* PlayerState);
		void MulticastActivateObjective(const struct FDataTableRowHandle& QuestRowHandle, int32_t QuestIndex, class ASurvivalPlayerState* PlayerState);
		bool IsQuestStarted(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState);
		bool IsQuestCompleted(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState);
		TArray<class UQuest*> GetQuests();
		TArray<class UQuest*> GetPartyQuests();
		TArray<class UQuest*> GetClientQuests(class ASurvivalPlayerState* PlayerState);
		TArray<class UQuest*> GetActiveTutorialQuests();
		void CompleteQuest(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState, class AActor* Instigator);
		void CompleteObjective(const struct FDataTableRowHandle& QuestRowHandle, int32_t QuestIndex, class ASurvivalPlayerState* PlayerState, class AActor* Instigator);
		bool AreAllObjectivesActiveAndComplete(const struct FDataTableRowHandle& QuestRowHandle, class ASurvivalPlayerState* PlayerState);
		void ActivateObjective(const struct FDataTableRowHandle& QuestRowHandle, int32_t QuestIndex, class ASurvivalPlayerState* PlayerState, class AActor* Instigator);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RandomAnimEffect
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class URandomAnimEffect : public UBaseAnimEffect
	{
	public:
		TArray<class UAnimMontage*>                                Anims;                                                   // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ReactionComponent
	 * Size -> 0x0090 (FullSize[0x0140] - InheritedSize[0x00B0])
	 */
	class UReactionComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPlayReaction;                                          // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      CurrentStunValue;                                        // 0x00C0(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxStunValue;                                            // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StunDecayRate;                                           // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StunDuration;                                            // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StunCooldown;                                            // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyStunFromBlocks;                                     // 0x00D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyStunWhileFlying;                                    // 0x00D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFlinchOnTakeDamageDuringStun;                           // 0x00D6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0H0J[0x2];                                   // 0x00D7(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EStunState                                                 StunState;                                               // 0x00D9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4CO[0x6];                                   // 0x00DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StaggerThreshold;                                        // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0KPM[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBaseAnimEffect*                                     FlinchAnim;                                              // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBaseAnimEffect*                                     StunAnim;                                                // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBaseAnimEffect*                                     StaggerAnim;                                             // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBaseAnimEffect*                                     Capture;                                                 // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVisualEffect*                                       StunEffect;                                              // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UVZX[0x30];                                  // 0x0110(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnRep_StunState(EStunState PrevStunState);
		void OnHit(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnHealthStateChanged(EHealthState NewHealthState);
		void OnCharacterMovementChanged(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		bool IsStunned();
		EStunState GetStunState();
		float GetStunRatio();
		float GetStunDuration();
		float GetMaxStun();
		bool CanBeStunned();
		void BeginStun();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RelevanceOptimizationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URelevanceOptimizationInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RemoteInteractionActor
	 * Size -> 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
	 */
	class ARemoteInteractionActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_FXTZ[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HoldToUse;                                               // 0x0238(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OIBL[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGuid>                                       InteractedByList;                                        // 0x0240(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         ItemsToGrantOnUse;                                       // 0x0250(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        OverrideInteractAnim;                                    // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Use(class AActor* InstigatedBy);
		void OnRep_InteractedByList();
		void HandleRemoteInteractionState(bool bIsRemoteInteracted);
		class FText GetUseText(class AActor* InstigatedBy);
		EInteractionType GetUseInteractionType(class AActor* InstigatedBy);
		bool CanUse(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RenderTargetManagerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class URenderTargetManagerComponent : public UActorComponent
	{
	public:
		TArray<struct FManagedRenderTarget>                        ManagedRenderTargets;                                    // 0x00B0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RenderTargetPublisher
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URenderTargetPublisher : public UInterface
	{
	public:
		void UnregisterAsRenderTargetPublisher(class UManagedRenderTargetObject* ManagedRTO);
		void RegisterAsRenderTargetPublisher(class UManagedRenderTargetObject* ManagedRTO);
		void OnPublisherRenderTargetWillBeDestroyed(class UManagedRenderTargetObject* ManagedRTO, class UTextureRenderTarget2D* RenderTarget);
		void OnPublisherRenderTargetCreated(class UManagedRenderTargetObject* ManagedRTO, class UTextureRenderTarget2D* RenderTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RenderTargetSubscriber
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URenderTargetSubscriber : public UInterface
	{
	public:
		void UnregisterAsRenderTargetSubscriber(class UManagedRenderTargetObject* ManagedRTO);
		void RegisterAsRenderTargetSubscriber(class UManagedRenderTargetObject* ManagedRTO);
		void OnSubscribedRenderTargetWillBeUnavailable(class UManagedRenderTargetObject* ManagedRTO, class UTextureRenderTarget2D* RenderTarget);
		void OnSubscribedRenderTargetAvailable(class UManagedRenderTargetObject* ManagedRTO, class UTextureRenderTarget2D* RenderTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ReplicationGraphNode_AlwaysRelevant_ForConnection_Maine
	 * Size -> 0x0040 (FullSize[0x0138] - InheritedSize[0x00F8])
	 */
	class UReplicationGraphNode_AlwaysRelevant_ForConnection_Maine : public UReplicationGraphNode_ActorList
	{
	public:
		unsigned char                                              UnknownData_BMZ5[0x30];                                  // 0x00F8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMaineAlwaysRelevantActorInfo>               PastRelevantActors;                                      // 0x0128(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ResourceAnalyzer
	 * Size -> 0x0090 (FullSize[0x06B8] - InheritedSize[0x0628])
	 */
	class AResourceAnalyzer : public AWidgetBuilding
	{
	public:
		unsigned char                                              UnknownData_CYHI[0x38];                                  // 0x0628(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChargesChanged;                                        // 0x0660(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FPowerReservoir                                     PowerReservoir;                                          // 0x0670(0x0028) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxPowerCapacity;                                        // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InitialCharges;                                          // 0x069C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        PowerType;                                               // 0x06A0(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HoursPerCharge;                                          // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastUpdateTime;                                          // 0x06AC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        AnalyzeAnim;                                             // 0x06B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_PowerReservoir();
		void MulticastPlayAnimMontage(class UAnimMontage* AnimMontage);
		bool IsFullyCharged();
		bool IsCharging();
		bool HasCharges();
		float GetNextChargeTime();
		int32_t GetChargeCount();
		int32_t GetChargeCapacity();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ResourceScannerBuilding
	 * Size -> 0x0000 (FullSize[0x0628] - InheritedSize[0x0628])
	 */
	class AResourceScannerBuilding : public AWidgetBuilding
	{
	public:
		void HandleSingleUseInteractingActorChanged(class UWidgetInteractComponent* Sender, class AActor* InteractingActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ResourceSurveyComponent
	 * Size -> 0x0120 (FullSize[0x01D0] - InheritedSize[0x00B0])
	 */
	class UResourceSurveyComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FOUN[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSurveyedResourceChanged;                               // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRescan;                                                // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              SurveyWindow[0x28];                                      // 0x00E0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FDataTableRowHandle                                 SurveyedResource;                                        // 0x0108(0x0010) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      BucketSize;                                              // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BucketColorCap;                                          // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              EmptyBucketColor;                                        // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EI1T[0x4C];                                  // 0x0124(0x004C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          HeatmapTexture;                                          // 0x0170(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          RegionsTexture;                                          // 0x0178(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FHJF[0x10];                                  // 0x0180(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastScanRealTime;                                        // 0x0190(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastScanWorldHours;                                      // 0x0194(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              LastScanPlayerName;                                      // 0x0198(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScanInterval;                                            // 0x01A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4QZZ[0x24];                                  // 0x01AC(0x0024) MISSED OFFSET (PADDING)

	public:
		void UnregisterManualSource(class UObject* Source);
		void ToggleScanEverything();
		void ShowSurveyingInterface();
		void RegisterManualSource(class UObject* Source);
		void OnRep_SurveyedResource();
		void MulticastReplicateDataChunk(int32_t StartIndex, TArray<unsigned char> Buffer);
		struct FDataTableRowHandle GetSurveyedResource();
		class UTexture2D* GetSurveyedRegionTexture();
		float GetLastScanWorldHours();
		class FString GetLastScanPlayerName();
		class UTexture2D* GetHeatmapTexture();
		void ActivateAllSurveyors();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ResourceSurveyOriginComponent
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class UResourceSurveyOriginComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_ERIX[0x8];                                   // 0x0228(0x0008) Fix Super Size
		unsigned char                                              UnknownData_YNYG[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScanRadius;                                              // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XCUC[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RespawnableInstancedMeshGroup
	 * Size -> 0x00D0 (FullSize[0x0300] - InheritedSize[0x0230])
	 */
	class ARespawnableInstancedMeshGroup : public AActor
	{
	public:
		unsigned char                                              UnknownData_3CHG[0x28];                                  // 0x0230(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemSpawnGroupData;                                      // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERespawnableMeshPlacementType                              PlacementType;                                           // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LA3I[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SocketTag;                                               // 0x0268(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHierarchicalInstancedStaticMeshComponent*           InstancedMeshComponent;                                  // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FRespawnableInstancedMeshData>               InstanceData;                                            // 0x0290(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      DespawnRandomDelay;                                      // 0x02A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCAB[0x5C];                                  // 0x02A4(0x005C) MISSED OFFSET (PADDING)

	public:
		class UBaseLODActor* Spawn(const struct FItemSpawnPointData& SpawnPoint);
		void OnFoliageDamaged(class AActor* Sender, float Damage, const struct FDamageEvent& DamageEvent, const struct FDamageInfo& DamageInfo);
		void GetSpawnPoints(TArray<struct FItemSpawnPointData>* SpawnPoints);
		class UClass* GetItemSpawnGroupData();
		bool DoesSpawnActors();
		void Despawn(const struct FItemSpawnPointData& SpawnPoint);
		void BuildInstances();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.RestingSpot
	 * Size -> 0x0020 (FullSize[0x0648] - InheritedSize[0x0628])
	 */
	class ARestingSpot : public AWidgetBuilding
	{
	public:
		unsigned char                                              UnknownData_AGWO[0x10];                                  // 0x0628(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         RestStatusEffects;                                       // 0x0638(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveGameSlotWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USaveGameSlotWidget : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveGameHeaderData
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class USaveGameHeaderData : public UObject
	{
	public:
		class FString                                              BuildNumberString;                                       // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SaveGameVersion;                                         // 0x0038(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESaveGameType                                              SaveGameType;                                            // 0x003C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UBD7[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AutoSaveIndex;                                           // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGuid                                               PlaythroughGuid;                                         // 0x0044(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S7BM[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           TimeOfSave;                                              // 0x0058(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameDay;                                                 // 0x0060(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameHour;                                                // 0x0064(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameMinute;                                              // 0x0068(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IHRK[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LevelName;                                               // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 ZoneRowHandle;                                           // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		EGameMode                                                  GameMode;                                                // 0x0090(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EGamePackageType                                           GamePackageType;                                         // 0x0091(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EGameContentType                                           GameContentType;                                         // 0x0092(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESaveGamePlayerCountType                                   LastSavePlayerCountType;                                 // 0x0093(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4LMO[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SaveName;                                                // 0x0098(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SaveFilePath;                                            // 0x00A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SaveFolderName;                                          // 0x00B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      ScreenshotBufferData;                                    // 0x00C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		ESaveGameHeaderDataValidity                                SaveGameValidity;                                        // 0x00D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LUTS[0xF];                                   // 0x00D9(0x000F) MISSED OFFSET (PADDING)

	public:
		class FString GetSaveGameScreenshotPath();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ActorHeaderData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UActorHeaderData : public UObject
	{
	public:
		unsigned char                                              UnknownData_1WU2[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ComponentHeaderData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UComponentHeaderData : public UObject
	{
	public:
		unsigned char                                              UnknownData_E47B[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SaveLoadWidget
	 * Size -> 0x0008 (FullSize[0x02B0] - InheritedSize[0x02A8])
	 */
	class USaveLoadWidget : public UWindowWidget
	{
	public:
		ESaveLoadMenuMode                                          SaveLoadMenuMode;                                        // 0x02A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30MN[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetMenuMode(ESaveLoadMenuMode MenuMode);
		void OnMenuModeSet();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ScanSwitch
	 * Size -> 0x0078 (FullSize[0x02A8] - InheritedSize[0x0230])
	 */
	class AScanSwitch : public AActor
	{
	public:
		unsigned char                                              UnknownData_IWX9[0x20];                                  // 0x0230(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLocString                                          DisplayName;                                             // 0x0250(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLocString                                          InteractionText;                                         // 0x0260(0x0010) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScanTime;                                                // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                InteractLocationSocket;                                  // 0x0274(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bScanned : 1;                                            // 0x027C(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8VSF[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               CurrentUser;                                             // 0x0280(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FRVN[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOCLComponent*                                       OCLComponent;                                            // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnStopScan(bool bInteractSuccess);
		void OnStartScan();
		void OnRep_CurrentUser();
		void MulticastStopScan(bool bInteractSuccess);
		void MulticastStartScan();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ScienceCollectable
	 * Size -> 0x0070 (FullSize[0x02A0] - InheritedSize[0x0230])
	 */
	class AScienceCollectable : public AActor
	{
	public:
		unsigned char                                              UnknownData_XLDI[0x28];                                  // 0x0230(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCollected;                                             // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                DisplayName;                                             // 0x0268(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ScienceAmount;                                           // 0x0280(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P0CL[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     SceneRootComponent;                                      // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    SphereComponent;                                         // 0x0290(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetScienceAmount(int32_t Amount);
		void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ScreenEffectComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UScreenEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_96P4[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnStatusEffectRemoved(class AActor* Owner, class UStatusEffect* StatusEffect);
		void OnStatusEffectAdded(class AActor* Owner, class UStatusEffect* StatusEffect);
		void EndScreenEffect(class UScreenEffectData* ScreenEffectData);
		void BeginScreenEffectWithDirection(class UScreenEffectData* ScreenEffectData, const struct FVector& Direction);
		void BeginScreenEffect(class UScreenEffectData* ScreenEffectData);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ScreenEffectData
	 * Size -> 0x00A8 (FullSize[0x00D8] - InheritedSize[0x0030])
	 */
	class UScreenEffectData : public UDataAsset
	{
	public:
		class UMaterialParameterCollection*                        MaterialParameterCollection;                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObject*                                             PostProcessMaterial;                                     // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EScreenEffectType                                          DisplayType;                                             // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_44EC[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  IntensityCurve;                                          // 0x0048(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      MaterialParameterIntensityScalar;                        // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChromaticAberrationIntensityScalar;                      // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Scripts
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UScripts : public UScriptLibrary
	{
	public:
		void OpenUpgradesUIForConversationOwner();
		void OpenScienceStoreUIForConversationOwner();
		void OpenBurgleQuestUIForConversationOwner();
		void LogObject(const struct FGuid& Object);
		void GiveSpeakerTechChip();
		void EndEarlyAccessContent();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SecurityCamera
	 * Size -> 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
	 */
	class ASecurityCamera : public AActor
	{
	public:
		unsigned char                                              UnknownData_1PC2[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SecurityMonitor
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class ASecurityMonitor : public AActor
	{
	public:
		unsigned char                                              UnknownData_5L45[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RenderTargetInfo;                                        // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SignBuilding
	 * Size -> 0x0040 (FullSize[0x0668] - InheritedSize[0x0628])
	 */
	class ASignBuilding : public AWidgetBuilding
	{
	public:
		unsigned char                                              UnknownData_SPU1[0x10];                                  // 0x0628(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        SignTag;                                                 // 0x0638(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SelectedSignDataHandle;                                  // 0x0640(0x0010) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FString                                              MeshName;                                                // 0x0650(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaterialIndex;                                           // 0x0660(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F3PF[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentSignDataHandle();
		TArray<struct FDataTableRowHandle> GetValidSignData();
		struct FDataTableRowHandle GetSelectedSignData();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SimpleSpeaker
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ASimpleSpeaker : public AActor
	{
	public:
		unsigned char                                              UnknownData_PXS7[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpeakerInfo                                        SpeakerInfo;                                             // 0x0238(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLocString                                          CharacterName;                                           // 0x0268(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YCJ1[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		struct FSpeakerReference GetSpeaker();
		struct FLocString GetCharacterName();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnAssociatedActor
	 * Size -> 0x0060 (FullSize[0x0290] - InheritedSize[0x0230])
	 */
	class ASpawnAssociatedActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_NHW4[0x20];                                  // 0x0230(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEnableChanged;                                         // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NFLN[0x18];                                  // 0x0260(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsEnabled;                                              // 0x0278(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VLT6[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_IsEnabled();
		void OnRegisteredActorDestroyed(class UBaseLODActor* LODActor);
		bool IsEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedEffectActor
	 * Size -> 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
	 */
	class ASpawnedEffectActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_57I6[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         StatusEffects;                                           // 0x0238(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MDPP[0x20];                                  // 0x0248(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnDeath(const struct FDamageInfo& DamageInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedItemDroplet
	 * Size -> 0x0130 (FullSize[0x0550] - InheritedSize[0x0420])
	 */
	class ASpawnedItemDroplet : public ASpawnedItem
	{
	public:
		bool                                                       bIsFrozen;                                               // 0x0420(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L7DP[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              UnfrozenReplacement;                                     // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ServingVolume;                                           // 0x0430(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultRadius;                                           // 0x0434(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BufferVolumeRatio;                                       // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxServings;                                             // 0x043C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EjectForce;                                              // 0x0440(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InteractLinearDampening;                                 // 0x0444(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     SplashVFX;                                               // 0x0448(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ScaleAnimCurve;                                          // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         WobbleStrengthCurve;                                     // 0x0458(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDropletMergeIn;                                        // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbsorbActor;                                           // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTag                                        PowerTag;                                                // 0x0480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            MIDDroplet;                                              // 0x0488(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NativeWobbleStrength;                                    // 0x0490(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I68D[0x6C];                                  // 0x0494(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Servings;                                                // 0x0500(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_STSX[0x4];                                   // 0x0504(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       ActorsContained;                                         // 0x0508(0x0010) Net, ZeroConstructor, Transient, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class AActor>>                       OldActorsContained;                                      // 0x0518(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7FDF[0x28];                                  // 0x0528(0x0028) MISSED OFFSET (PADDING)

	public:
		void Unfreeze(class AController* InstigatorController, class AActor* Actor);
		void SetServings(int32_t Servings);
		void ServerDrink(class AActor* InstigatedBy);
		void PlayContactWobble();
		void PlayContactEffects(const struct FVector& Offset);
		void OnRep_Servings();
		void OnRep_ActorsContained();
		void OnDropletUnfrozen(class AController* InstigatorController, class AActor* Actor);
		float GetVolume();
		int32_t GetServings();
		float GetRadius();
		float GetOccupiedVolume();
		int32_t GetNumActorContained();
		float GetAvailableVolume();
		class AActor* GetActorContained(int32_t Index);
		void EjectRandomActor();
		void EjectAllActors();
		void EjectActor(class AActor* Actor);
		void AdjustServings(int32_t Delta);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxySpawnedItemActor
	 * Size -> 0x0028 (FullSize[0x0120] - InheritedSize[0x00F8])
	 */
	class UProxySpawnedItemActor : public UProxyActor
	{
	public:
		unsigned char                                              UnknownData_MDQG[0x8];                                   // 0x00F8(0x0008) Fix Super Size
		class UItem*                                               Item;                                                    // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UBaseLODActor>                        DroppedBy;                                               // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8OX0[0x4];                                   // 0x0110(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        GoapRegionTag;                                           // 0x0114(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9IHR[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* InItem, int32_t Count);
		TArray<class UItem*> GetItems();
		struct FTransform GetDropItemTransform(class UItem* InItem, const struct FVector& Offset);
		bool CanAddItems(TArray<class UItem*> InItems);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* InItem);
		void AddItem(class UItem* InItem, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxySpawnedItemDropletActor
	 * Size -> 0x0010 (FullSize[0x0130] - InheritedSize[0x0120])
	 */
	class UProxySpawnedItemDropletActor : public UProxySpawnedItemActor
	{
	public:
		unsigned char                                              UnknownData_3847[0x10];                                  // 0x0120(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedItemLODActor
	 * Size -> 0x0018 (FullSize[0x0128] - InheritedSize[0x0110])
	 */
	class USpawnedItemLODActor : public UBaseLODActor
	{
	public:
		unsigned char                                              UnknownData_Z2OZ[0x18];                                  // 0x0110(0x0018) MISSED OFFSET (PADDING)

	public:
		int32_t RemoveItem(class UItem* InItem, int32_t Count);
		TArray<class UItem*> GetItems();
		class UItem* GetItem();
		struct FTransform GetDropItemTransform(class UItem* InItem, const struct FVector& Offset);
		bool CanAddItems(TArray<class UItem*> InItems);
		bool CanAddItemRowHandles(TArray<struct FDataTableRowHandle> ItemRowHandles);
		bool CanAddItemRowHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanAddItem(class UItem* InItem);
		void AddItem(class UItem* InItem, bool bIsNewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedItemDropletLODActor
	 * Size -> 0x0000 (FullSize[0x0128] - InheritedSize[0x0128])
	 */
	class USpawnedItemDropletLODActor : public USpawnedItemLODActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnPointProviderInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpawnPointProviderInterface : public UInterface
	{
	public:
		class UBaseLODActor* Spawn(const struct FItemSpawnPointData& SpawnPoint);
		void GetSpawnPoints(TArray<struct FItemSpawnPointData>* SpawnPoints);
		struct FGuid GetProviderID();
		class UClass* GetItemSpawnGroupData();
		bool DoesSpawnActors();
		void Despawn(const struct FItemSpawnPointData& SpawnPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpeakerFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpeakerFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FString GetSpeakerBundleVOPrefix(const struct FSpeakerBundle& Bundle);
		class FString GetSpeakerBundleObjectName(const struct FSpeakerBundle& Bundle);
		bool GetSpeakerBundleIsUniqueNPC(const struct FSpeakerBundle& Bundle);
		struct FGuid GetSpeakerBundleID(const struct FSpeakerBundle& Bundle);
		EOEIGender GetSpeakerBundleGender(const struct FSpeakerBundle& Bundle);
		struct FLocString GetSpeakerBundleDisplayName(const struct FSpeakerBundle& Bundle);
		struct FGuid GetSpeakerBundleChatterFileID(const struct FSpeakerBundle& Bundle);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StaminaComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UStaminaComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_XEKJ[0x30];                                  // 0x00B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentStamina;                                          // 0x00E0(0x0004) Edit, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxStamina;                                              // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RegenDelay;                                              // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RegenRate;                                               // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PR71[0x4];                                   // 0x00F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaminaToHungerRatio;                                    // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7GN7[0x20];                                  // 0x00F8(0x0020) MISSED OFFSET (PADDING)

	public:
		void Restore();
		void OnStatusEffectChanged();
		void OnRest(float RestDuration);
		void OnRep_CurrentStamina(float PrevStamina);
		bool IsStaminaCapped();
		bool IsEmpty();
		float GetStaminaRatio();
		float GetMaxStaminaCapped();
		float GetMaxStamina();
		float GetEnergyRatio();
		float GetCurrentStamina();
		void ConsumeStamina(float AmountToConsume);
		bool CanRegenerate();
		void AddStamina(float AmountToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StaminaReadoutWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UStaminaReadoutWidget : public UGameUserWidget
	{
	public:
		float                                                      LastStamina;                                             // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDisplayedStamina;                                 // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1SXT[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaminaRatio;                                            // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8R67[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateStaminaAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatusEffect
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UStatusEffect : public UObject
	{
	public:
		unsigned char                                              UnknownData_C3QP[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 StatusEffectRowHandle;                                   // 0x0038(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_49JV[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeElapsed;                                             // 0x0050(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5DE5[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnabled;                                                // 0x0058(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D1ZX[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ResetTime;                                               // 0x005C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GXFZ[0x18];                                  // 0x0060(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EStatusEffectOriginType                                    OriginType;                                              // 0x0078(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W0J5[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStatusEffectTimerReset;                                // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		bool ShowInUI();
		void OnRep_StatusEffectRowHandle(const struct FDataTableRowHandle& PreviousHandle);
		void OnRep_ResetTime();
		float GetTimeRemaining();
		float GetTimeElapsed();
		EStatusEffectType GetStatusEffectType();
		EStatusEffectOriginType GetOriginType();
		struct FGameplayTagContainer GetEffectTags();
		EStatusEffectDurationType GetDurationType();
		float GetDuration();
		struct FDataTableRowHandle GetDataHandle();
		EStatusEffectApplyType GetApplicationType();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatusEffectComponent
	 * Size -> 0x0118 (FullSize[0x01C8] - InheritedSize[0x00B0])
	 */
	class UStatusEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_23A5[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStatusEffectsChanged;                                  // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatusEffectAdded;                                     // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatusEffectRemoved;                                   // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         DefaultStatusEffects;                                    // 0x00F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               ImmunityTags;                                            // 0x0100(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UStatusEffect*>                               StatusEffects;                                           // 0x0120(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XOQL[0x98];                                  // 0x0130(0x0098) MISSED OFFSET (PADDING)

	public:
		void RemoveEffect(class UStatusEffect* StatusEffect, bool bBroadcastChangedEvent);
		void OnRest(float RestDuration);
		void OnRep_StatusEffects(TArray<class UStatusEffect*> PreviousStatusEffects);
		void OnHealthStateChange(EHealthState NewHealthState);
		void OnDayNightChange(bool bbIsDayTime);
		void OnCombatChange(class ASurvivalCharacter* Character, bool bInCombat);
		bool HasStatusEffectTag(const struct FGameplayTag& EffectTag);
		bool HasStatusEffectOfType(EStatusEffectType StatType);
		bool HasStatusEffectOfDamageType(EStatusEffectType StatType, class UClass* DamageType);
		bool HasAnyStatusEffectTag(const struct FGameplayTagContainer& EffectTags);
		float GetValueForStatWithExtraData(EStatusEffectType StatType, const struct FDataTableRowHandle& ExtraData);
		float GetValueForStatForDamageTypeFlags(EStatusEffectType StatType, int32_t Flags);
		float GetValueForStatForDamageInfo(EStatusEffectType StatType, const struct FDamageInfo& DammageInfo);
		float GetValueForStat(EStatusEffectType StatType);
		TArray<class UStatusEffect*> GetStatusEffects();
		int32_t GetNumStatusEffectOfType(EStatusEffectType StatType);
		TArray<struct FDataTableRowHandle> GetDefaultStatusEffects();
		class UStatusEffect* CreateAndAddEffect(const struct FDataTableRowHandle& StatusEffectRowHandle);
		bool CanAddEffect(const struct FDataTableRowHandle& StatusEffectRowHandle);
		void AddEffect(class UStatusEffect* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StatusEffectOrigin
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStatusEffectOrigin : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.StencilStandInActor
	 * Size -> 0x0040 (FullSize[0x0270] - InheritedSize[0x0230])
	 */
	class AStencilStandInActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_W2NS[0x30];                                  // 0x0230(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J9E4[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Storage
	 * Size -> 0x0008 (FullSize[0x0630] - InheritedSize[0x0628])
	 */
	class AStorage : public AWidgetBuilding
	{
	public:
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x0628(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SubtitleWindow
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class USubtitleWindow : public UWindowWidget
	{
	public:
		void HandleShowSubtitlesChanged(bool bShowSubtitles);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurfaceEffectData
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USurfaceEffectData : public UDataAsset
	{
	public:
		struct FSurfaceEffect                                      DefaultEffect;                                           // 0x0030(0x0018) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSurfaceEffect>                              OverrideEffects;                                         // 0x0048(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalAIController
	 * Size -> 0x0250 (FullSize[0x05A0] - InheritedSize[0x0350])
	 */
	class ASurvivalAIController : public AAIController
	{
	public:
		EBTNodeResult                                              ManualMoveResult;                                        // 0x0350(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0X17[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnvQuery*                                           WanderDestinationQuery;                                  // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WSEI[0x1C];                                  // 0x0360(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatRange                                         PetFidgetInterval;                                       // 0x037C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I5ZW[0xC];                                   // 0x038C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAITargettingComponent*                              TargettingComponent;                                     // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIDetectionComponent*                               DetectionComponent;                                      // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInterestComponent*                                  InterestComponent;                                       // 0x03A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTrackingComponent*                                  TrackingComponent;                                       // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBehaviorTree*                                       BehaviorTree;                                            // 0x03B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStaionary;                                            // 0x03C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YFB1[0x3];                                   // 0x03C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TetherRange;                                             // 0x03C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WanderRange;                                             // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ActivePetWanderRange;                                    // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InactivePetWanderRange;                                  // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PreferredMinimumHeight;                                  // 0x03D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFocusOnInterest;                                        // 0x03D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ISBC[0x3];                                   // 0x03D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SearchRadius;                                            // 0x03DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EObjectTypeQuery>                                   ObjectTypes;                                             // 0x03E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              TargetClass;                                             // 0x03F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           ConeWanderRange;                                         // 0x03F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExploreMinAltitude;                                      // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExploreMaxAltitude;                                      // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDefaultBehaviorType                                       DefaultBehaviorType;                                     // 0x0408(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9SQ4[0x7];                                   // 0x0409(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EBehaviorType, struct FBehaviorMovementConfig>        MoveToConfig;                                            // 0x0410(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class ASurvivalCharacter*                                  AICharacter;                                             // 0x0460(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASurvivalCreature*                                   AICreature;                                              // 0x0468(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASwimmingSurvivalCharacter*                          AISwimmingCharacter;                                     // 0x0470(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MTYV[0x50];                                  // 0x0478(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScoutTime;                                               // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VXH6[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TokenCooldown;                                           // 0x04D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TokenRandomDeviation;                                    // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3KE[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAdditionnalTokenDeviation>                  AdditionnalstokenDeviation;                              // 0x04E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    UsesPerToken;                                            // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NGAB[0x4];                                   // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIgnoreTargetTokenLimit;                                 // 0x04F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bClearThreatAfterAttack;                                 // 0x04F9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0MMV[0x2];                                   // 0x04FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FleeRange;                                               // 0x04FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeverFlee;                                              // 0x0500(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBurrowAfterFlee;                                        // 0x0501(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanStrafeWhileInCombatIdle;                             // 0x0502(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPutsPlayersInCombat;                                    // 0x0503(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIngnoreWander;                                          // 0x0504(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AQFG[0x4B];                                  // 0x0505(0x004B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ActorsToIgnore;                                          // 0x0550(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ETraceTypeQuery                                            TraceType;                                               // 0x0560(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J8G7[0x3];                                   // 0x0561(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttachmentTag;                                           // 0x0564(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TerrainTraceDistance;                                    // 0x056C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WanderBlockOffset;                                       // 0x0570(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HorizontalWanderAngle;                                   // 0x0574(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           VerticalWanderAngle;                                     // 0x057C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DrawDebugLines : 1;                                      // 0x0584(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PrintTiredness : 1;                                      // 0x0584(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bUseWanderBounds : 1;                                    // 0x0584(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWaitAfterWander;                                        // 0x0585(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4YLK[0x2];                                   // 0x0586(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbility*                                            NextWantedAbility;                                       // 0x0588(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbility*                                            LastAbilitySelectedCombatAction;                         // 0x0590(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWaveCreatureComponent*                              WaveCreatureComponent;                                   // 0x0598(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateHomeLocation();
		bool ShouldWaitAfterWander();
		bool ShouldStrafeInCombat();
		bool ShouldBurrowAfterFlee();
		void SetTarget(class AActor* Target);
		void SetNextWaypoint(class AWaypoint* NextWaypoint);
		void SetHomeLocation(const struct FVector& Location);
		void SetDisabled(bool bDisabled);
		void SetDesiredCombatAction(class AActor* Target, class UAttack* Attack, class UAnimMontage* AnimMontage);
		void OnRevived();
		void OnHealthStateChanged(EHealthState HealthState);
		void OnDamaged(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnAttack(class UAttack* Attack);
		void OnActorCollision(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		bool IsScriptedBpConditionValid(const struct FDataTableRowHandle& AbilityData);
		bool IsInCombat();
		bool IsClimbing();
		bool HasPatrol();
		bool HasAbilityUsableOfPriority(int32_t MinPriority);
		bool HasAbilityUsable();
		struct FVector GetWaveDestination();
		float GetWanderRange(class UWorld* World);
		bool GetUsePathFollower();
		float GetTetherRange();
		struct FVector GetSearchOrigin();
		float GetPreferredMinimumHeight();
		struct FVector GetHomeLocation();
		bool GetGoalLocation(struct FVector* OutLocation);
		class AActor* GetGoalActor();
		float GetFleeRange();
		EBehaviorType GetDesiredBehavior();
		class AActor* GetDesiredAttackTarget();
		class UAttack* GetDesiredAttack();
		class AWaypoint* GetCurrentWaypoint();
		struct FVector2D GetConeWanderRange();
		struct FVector GetBlackboardTargetLocation();
		class AActor* GetBlackboardTargetActor();
		void FinishMoveManual(EBTNodeResult ResultType);
		struct FVector FindClosestAttachPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalAutoPlayer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USurvivalAutoPlayer : public UObject
	{
	public:
		void StopAutoPlayer();
		void StartAutoPlayer();
		void OnAsyncSaveComplete(ESaveGameResult Result, ESaveGameType SaveType);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalAutoPlayerTestSettings
	 * Size -> 0x01A0 (FullSize[0x01D8] - InheritedSize[0x0038])
	 */
	class USurvivalAutoPlayerTestSettings : public UDeveloperSettings
	{
	public:
		bool                                                       bUseFixedRandomSeed;                                     // 0x0038(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C4HN[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FixedRandomSeed;                                         // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsedFixedPlaythroughID;                                 // 0x0040(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JHCE[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               FixedPlaythroughGuid;                                    // 0x0044(0x0010) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DeltaTimeCap;                                            // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableTimeCapIfLowFramerate;                           // 0x0058(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4UQL[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DisableTimeCapFrameCount;                                // 0x005C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              TestLevels[0x10];                                        // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       bEnableTraveling;                                        // 0x0070(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O26Y[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinTravelTime;                                           // 0x0074(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTravelTime;                                           // 0x0078(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowTravelingToCurrentMap;                             // 0x007C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanReturnToMainMenu;                                    // 0x007D(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9T1C[0x2];                                   // 0x007E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceToReturnToMenu;                                    // 0x0080(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MainMenuSoakTime;                                        // 0x0084(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableQuickSave;                                        // 0x0088(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableQuickSaveLoad;                                    // 0x0089(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyLoadQuickSavesMadeOnCurrentMap;                     // 0x008A(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J29F[0x1];                                   // 0x008B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinQuickSaveWaitTime;                                    // 0x008C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxQuickSaveWaitTime;                                    // 0x0090(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinQuickLoadWaitTime;                                    // 0x0094(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxQuickLoadWaitTime;                                    // 0x0098(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGhost;                                                  // 0x009C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRandomPathing;                                    // 0x009D(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RMKC[0x2];                                   // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PathingNewLocationRadius;                                // 0x00A0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathingNewLocationHeightVariance;                        // 0x00A4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFaceAlongPath;                                          // 0x00A8(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTeleportIfStuckPathing;                                 // 0x00A9(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1I3B[0x2];                                   // 0x00AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PathingStuckTeleportRadius;                              // 0x00AC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathingVisitedTileSize;                                  // 0x00B0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathingGoalProjectionExtents;                            // 0x00B4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathingVisitingRadius;                                   // 0x00B8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowControlRotationSnapping;                           // 0x00BC(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PL06[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinSnapRotationWaitTime;                                 // 0x00C0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSnapRotationWaitTime;                                 // 0x00C4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SnapRotationAxis;                                        // 0x00C8(0x000C) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSnapRotationAmount;                                   // 0x00D4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSnapRotationAmount;                                   // 0x00D8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableTeleporting;                                      // 0x00DC(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTeleportPlaceOnGround;                                  // 0x00DD(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3CBK[0x2];                                   // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TeleportHeight;                                          // 0x00E0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TeleportNewLocationDistance;                             // 0x00E4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinTeleportWaitTime;                                     // 0x00E8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTeleportWaitTime;                                     // 0x00EC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGodMode;                                                // 0x00F0(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bResurrect;                                              // 0x00F1(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAttackAI;                                               // 0x00F2(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZAO[0x1];                                   // 0x00F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaximumAttackDistance;                                   // 0x00F4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyAttackEnemies;                                      // 0x00F8(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2LNM[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinAttackWaitTime;                                       // 0x00FC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxAttackWaitTime;                                       // 0x0100(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableWeaponSwapping;                                   // 0x0104(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LML5[0x3];                                   // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinWeaponSwapWaitTime;                                   // 0x0108(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxWeaponSwapWaitTime;                                   // 0x010C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableArmorSwapping;                                    // 0x0110(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7YA4[0x3];                                   // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinArmorSwapWaitTime;                                    // 0x0114(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxArmorSwapWaitTime;                                    // 0x0118(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableScreenshots;                                      // 0x011C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B5OH[0x3];                                   // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScreenshotRate;                                          // 0x0120(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfScreenshotsToKeep;                               // 0x0124(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDirectoryPath                                      ScreenshotDirectoryOverride;                             // 0x0128(0x0010) Edit, Config, NativeAccessSpecifierPublic
		bool                                                       bEnableMemoryInfoLogging;                                // 0x0138(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N6SU[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MemoryInfoLogRate;                                       // 0x013C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLogMemoryInfoOnMapLoad;                                 // 0x0140(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bConsoleCommandsEnabled;                                 // 0x0141(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HN9Y[0x6];                                   // 0x0142(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAutoConsoleCommandProperties>               ConsoleCommandProperties;                                // 0x0148(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		bool                                                       bInfoTrackingEnabled;                                    // 0x0158(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O25L[0x3];                                   // 0x0159(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InfoTrackingRate;                                        // 0x015C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddReportTimeColumn;                                    // 0x0160(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddEngineRuntimeColumn;                                 // 0x0161(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddTestRuntimeColumn;                                   // 0x0162(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddCurrentMapColumn;                                    // 0x0163(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddReportTimeAndMapColumn;                              // 0x0164(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddEngineRuntimeAndMapColumn;                           // 0x0165(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddRuntimeAndMapColumn;                                 // 0x0166(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddPlayerLocationColumn;                                // 0x0167(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackRenderTargetPoolUsage;                             // 0x0168(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackAudioMemoryUsage;                                  // 0x0169(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackMemoryUsageInformation;                            // 0x016A(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackMemoryStatInformation;                             // 0x016B(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTrackTextureStreamingInformation;                       // 0x016C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTryToFilterStatErrors;                                  // 0x016D(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P3FO[0x2];                                   // 0x016E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      StatsToTrack;                                            // 0x0170(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		bool                                                       bGenerateMemoryReports;                                  // 0x0180(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IUIJ[0x7];                                   // 0x0181(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      MemoryReportCommands;                                    // 0x0188(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		float                                                      MemoryPeakIncreaseReportThreshold;                       // 0x0198(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MemoryUtilizationReportThreshold;                        // 0x019C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtraMemoryUtilizationReportAmount;                      // 0x01A0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TexturePoolUtilizationReportThreadhold;                  // 0x01A4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtraTexturePoolUtilizationReportAmount;                 // 0x01A8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UtilizationReportThresholdResetTime;                     // 0x01AC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TexturePoolOverBudgetReportRate;                         // 0x01B0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInputEnabled;                                           // 0x01B4(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7RQ4[0x3];                                   // 0x01B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAutoRandomInputProperties>                  RandomInputKeyProperties;                                // 0x01B8(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		TArray<struct FAutoEquipmentProperties>                    EquipmentProperties;                                     // 0x01C8(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalCharacterDataFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USurvivalCharacterDataFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool GetCharacterDataFilterMatches(const struct FSurvivalCharacterData& CharacterData, class FString* FilterText);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalCheatManager
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class USurvivalCheatManager : public UCheatManager
	{
	public:
		void UnlockPlayerUpgrade(const class FName& UpgradeName);
		void UnlockItemStackUpgrade(const struct FGameplayTag& ItemStackTag);
		void UnlockAllTechTrees();
		void UnlockAllTechTreeRecipes();
		void UnlockAllRecipes(ERecipeUnlockMode Mode);
		void UnlockAllPerks();
		void UnlockAllKeyItems();
		void UnlockAllColorThemes();
		void TryKill();
		void TryDamage(float DamageAmount);
		void ToggleSubtitles();
		void ToggleSpawnPointDebug();
		void TogglePlayerSpectatorMode();
		void ToggleHUD();
		void ToggleCameraShake();
		void ToggleAlternateRecipeMode();
		void TimeSpeed(float Multiplier);
		void TeleportPartyToMe();
		void TameNearest();
		void SuperStructures();
		void Stamina(bool Enabled);
		void SpawnBird();
		void ShowWaveStats();
		void SetTickLODProxies(bool bShouldTick);
		void SetOverrideLevelName(const class FString& LevelName);
		void SetHungerThirstKill(bool bShouldKill);
		void SetGlobalValue(const class FString& Global, int32_t Value);
		void SetCompletedBurgleQuestCount(int32_t Count);
		void SetBonusEnhancementLevel(const struct FGameplayTag& EnhancementTag, int32_t BonusEnhancementLevel);
		void SetBaseEnhancementLevel(int32_t BaseEnhancementLevel);
		void Revive();
		void ResearchAllItems();
		void RepairAllItems();
		void RemoveAchievement(const class FName& AchievementName);
		void RecoverBackpacks();
		void PopulationMonitorDump();
		void LogActorAndFoliageCount();
		void InfiniteDamage();
		void GiveItem(const class FName& ItemName, int32_t Quantity);
		void FullRestore();
		void FreezePlayerSizzle(bool Freeze);
		void ForceSpawnWave(const struct FGameplayTag& TeamName, int32_t Heat);
		void ForceRegenerateBurgleQuests();
		void Fish();
		void Fireproof();
		void FillPheromoneBroadcasters(const struct FGameplayTag& PheromoneTag);
		void EquipItem(const class FName& ItemName);
		void DumpOnlyRelevantToOwnerClasses();
		void DumpMobileReplicatedActors();
		void DumpAlwaysReplicatedClasses();
		void DestroyCreaturesHalf();
		void BuildAllBuildings();
		void BreakAllItems();
		void AwardAchievement(const class FName& AchievementName);
		void AlmostBreakAllItems();
		void AdvanceTimeToHour(int32_t Hour);
		void AdvanceTimeByHours(float Hours);
		void AddStatusEffect(const class FName& StatusEffectName);
		void AddScience(int32_t Amount);
		void AddPersonalUpgradePoints(int32_t Amount);
		void AddPartyUpgradePoints(int32_t Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalComponent
	 * Size -> 0x0300 (FullSize[0x03B0] - InheritedSize[0x00B0])
	 */
	class USurvivalComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_7GAO[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFoodChanged;                                           // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaterChanged;                                          // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CZI6[0x48];                                  // 0x00E0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSurvivalTraitSettings                              HungerSettings;                                          // 0x0128(0x0048) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSurvivalTraitSettings                              ThirstSettings;                                          // 0x0170(0x0048) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FBreathSettings                                     BreathSettings;                                          // 0x01B8(0x00B0) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      CurrentFood;                                             // 0x0268(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentWater;                                            // 0x026C(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentBreath;                                           // 0x0270(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumRestPercentage;                                   // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RestRateMultiplier;                                      // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bKillOnEmptyFoodOrWater;                                 // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PZN9[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathDelayTime;                                          // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathTimer;                                              // 0x0284(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  DeathVignetteIntensityCurve;                             // 0x0288(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnRest;                                                  // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UOverTimeEffect*                                     PassiveHungerEffect;                                     // 0x0320(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UOverTimeEffect*                                     PassiveThirstEffect;                                     // 0x0328(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStatusEffect*                                       HungerDamageEffect;                                      // 0x0330(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStatusEffect*                                       HungerBonusEffect;                                       // 0x0338(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStatusEffect*                                       ThirstDamageEffect;                                      // 0x0340(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStatusEffect*                                       ThirstBonusEffect;                                       // 0x0348(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStatusEffect*                                       BreathDamageEffect;                                      // 0x0350(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I8MY[0x58];                                  // 0x0358(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetCurrentWater(float NewWaterLevel);
		void SetCurrentSizzle(float NewSizzle);
		void SetCurrentFood(float NewFoodLevel);
		void SetCurrentBreath(float NewBreath);
		void RestoreBreath(float BreathAmount);
		void Rest(float RestDuration);
		void OnStatusEffectsChanged();
		void OnRep_CurrentWater(float PrevWater);
		void OnRep_CurrentFood(float PrevFood);
		bool IsFullBreath();
		bool IsFoodOrWaterEmpty();
		float GetThirstRatio();
		float GetHungerRatio();
		float GetDeathSecondsTimerRatio();
		int32_t GetDeathSecondsLeft();
		float GetCurrentSizzleRatio();
		int32_t GetBreathSecondsLeft();
		float GetBreathRatio();
		int32_t GetBreathAlertTime();
		float GetBreathAdjustmentRate();
		bool CanBreathe();
		void AddWater(float WaterAmount);
		void AddFood(float FoodAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalDamageType
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USurvivalDamageType : public UDamageType
	{
	public:
		struct FLocString                                          LocalizedDisplayName;                                    // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObject*                                             Icon;                                                    // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   DamageTypeFlags;                                         // 0x0058(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBlock;                                               // 0x005C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBlockWithWeapon;                                     // 0x005D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanApplyDamageReduction;                                // 0x005E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanPlayHitReaction;                                     // 0x005F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDamageDurability;                                       // 0x0060(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanKill;                                                // 0x0061(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanRepair;                                              // 0x0062(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5L58[0x5];                                   // 0x0063(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 DeathNotification;                                       // 0x0068(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		bool HasDamageTypeFlag(ESurvivalDamageTypeFlags flag);
		bool HasAnyDamageTypeFlag(int32_t flag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameInstance
	 * Size -> 0x05F8 (FullSize[0x07C0] - InheritedSize[0x01C8])
	 */
	class USurvivalGameInstance : public UGameInstance
	{
	public:
		unsigned char                                              UnknownData_UYXJ[0x38];                                  // 0x01C8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUsingGamepadChanged;                                   // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameInputTypeChanged;                                  // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnyKeyPressed;                                         // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHostGameFailure;                                       // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoinGameFailure;                                       // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAcceptOnlineInvite;                                    // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoinOnlineInvite;                                      // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceiveOnlineInvite;                                   // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProfileLoggedOut;                                      // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsUsingGamepadControls;                                 // 0x0290(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EGameInputType                                             CurrentGameInputType;                                    // 0x0291(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9Q2E[0x6];                                   // 0x0292(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameOptions*                                        GameOptions;                                             // 0x0298(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetManager*                                      WidgetManager;                                           // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInterfaceNarrationConfig*                           NarrationConfig;                                         // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalBuildingData*                                 GlobalBuildingData;                                      // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalCombatData*                                   GlobalCombatData;                                        // 0x02B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalItemData*                                     GlobalItemData;                                          // 0x02C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalUIData*                                       GlobalUIData;                                            // 0x02C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalAIData*                                       GlobalAIData;                                            // 0x02D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalAudioData*                                    GlobalAudioData;                                         // 0x02D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalControlsData*                                 GlobalControlsData;                                      // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalFoliageData*                                  GlobalFoliageData;                                       // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGlobalTableData*                                    GlobalTableData;                                         // 0x02F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UStaticMesh*, struct FFoliageMapping>           FoliageMappings;                                         // 0x02F8(0x0050) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              CompanyIntroLevel[0x28];                                 // 0x0348(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MainMenuLevel[0x28];                                     // 0x0370(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LobbyLevel[0x28];                                        // 0x0398(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FString                                              GameLevelDevelopmentName;                                // 0x03C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              GameLevelReleaseName;                                    // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B6I5[0x10];                                  // 0x03E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DroppedScience;                                          // 0x03F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 GenericDeathNotificationDataHandle;                      // 0x03F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 PvpDeathNotificationDataHandle;                          // 0x0408(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FColor>                                      PlayerColors;                                            // 0x0418(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      SelectableCharacters;                                    // 0x0428(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TMap<EGameMode, class UClass*>                             DefaultGameModes;                                        // 0x0438(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CABS[0x24];                                  // 0x0488(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RestCancelDistance;                                      // 0x04AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RestCancelTimeout;                                       // 0x04B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4TOG[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USaveLoadManager*                                    SaveLoadManager;                                         // 0x04B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInterfaceNarrationManager*                          InterfaceNarrationManager;                               // 0x04C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaineAnalyticsManager*                              AnalyticsManager;                                        // 0x04C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMusicManager*                                       MusicManager;                                            // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionCacheData*                                GoapActionCacheData;                                     // 0x04D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGoapActionCache*                                    GoapActionCache;                                         // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9YK7[0x10];                                  // 0x04E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsSinglePlayer;                                          // 0x04F8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PasswordProtectedGameSelected;                           // 0x04F9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasVisitedMenuLevel;                                     // 0x04FA(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EGameMode                                                  SelectedGameMode;                                        // 0x04FB(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCustomGameModeSettings                             CustomGameModeSettings;                                  // 0x04FC(0x0004) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MFB2[0x1A0];                                 // 0x0500(0x01A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CurrentUITheme;                                          // 0x06A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CurrentNightUITheme;                                     // 0x06A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZZOR[0x8];                                   // 0x06B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlackboardData*                                     DefaultBlackboard;                                       // 0x06B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FDDW[0x18];                                  // 0x06C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UStaticMesh*, float>                            CachedMeshVolumes;                                       // 0x06D8(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CJL3[0x18];                                  // 0x0728(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USurvivalAutoPlayer*                                 AutoPlayer;                                              // 0x0740(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USurvivalMemoryReport*                               MemoryReport;                                            // 0x0748(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UPhysicsStateManager*                                PhysicsStateManager;                                     // 0x0750(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6R86[0x2];                                   // 0x0758(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EGameContentType                                           EditorOverrideContentType;                               // 0x075A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EGamePackageType                                           EditorOverridePackageType;                               // 0x075B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_38R5[0x3C];                                  // 0x075C(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhotoModeConfiguration*                             PhotoModeConfiguration;                                  // 0x0798(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9CBH[0x8];                                   // 0x07A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AStencilStandInActor*>                        StencilStandIns;                                         // 0x07A8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		int32_t                                                    StencilStandInsPoolSize;                                 // 0x07B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_85CT[0x4];                                   // 0x07BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void ValidateColorTheme();
		bool UserLoggedIntoValidProfile();
		void SetUIThemeByIndex(int32_t Index);
		void SetUITheme(class UClass* Theme);
		void SetSelectedGameMode(EGameMode GameMode);
		void SetOnlineGamePassword(const class FString& Password);
		void SetNightUIThemeByIndex(int32_t Index);
		void SetNightUITheme(class UClass* Theme);
		void SetCustomGameSettings(const struct FCustomGameModeSettings& CustomSettings);
		void ServerTravelToGameLevel();
		void ResetGameState();
		void QuitToDesktop(class UObject* WorldContextObject, class APlayerController* SpecificPlayer);
		void OpenLevel(const class FName& LevelName);
		void LoadMainMenuLevel();
		void LoadLobbyLevel();
		void JoinOnlineSession(const struct FBlueprintSessionResult& SessionResult);
		bool IsUsingGamepadControls();
		bool IsGroundFoliage(class UStaticMesh* StaticMesh);
		bool IsCurrentLevelMenuLevel();
		bool IsCurrentLevelGameOrLobby();
		bool HostSession(bool bIsLAN, bool bIsPresence, bool bPasswordProtected, int32_t MaxNumPlayers);
		void HandleVOIPVolumeChanged(float Value);
		void HandleVoiceVolumeChanged(float Value);
		void HandleUIVolumeChanged(float Value);
		void HandleSetIsSinglePlayer(bool SinglePlayer);
		void HandleReadToMeSpeedChanged(float Speed);
		void HandleReadToMeChanged(bool bReadToMe);
		void HandleNarrationVolumeChanged(float Value);
		void HandleMusicVolumeChanged(float Value);
		void HandleMasterVolumeChanged(float Value);
		void HandleEffectsVolumeChanged(float Value);
		void HandleChatTextToSpeechChanged(bool bEnabled);
		void HandleChatSpeechToTextChanged(bool bEnabled);
		void HandleAmbienceVolumeChanged(float Value);
		bool GetUseBuildingIntegrity();
		TArray<class UClass*> GetUnlockedUIThemes();
		class UClass* GetUITheme();
		float GetSubmergedVolume(class UStaticMesh* Mesh, const struct FTransform& Transform, float ZPlane, struct FVector* CenterOfMass);
		float GetSubmergedCollisionVolume(class UStaticMesh* Mesh, const struct FTransform& Transform, float ZPlane, struct FVector* CenterOfMass);
		class AStencilStandInActor* GetStencilStandInActorWithKey(const struct FFoliageKey& FoliageKey, const struct FBuildingGridBuildingId& BuildingKey);
		class AStencilStandInActor* GetStencilStandInActor();
		float GetStaticMeshVolume(class UStaticMesh* Mesh);
		class UClass* GetSelectedGameModeClass();
		bool GetPowerTypeData(const struct FGameplayTag& Tag, struct FPowerTypeData* Data);
		class UClass* GetNightUITheme();
		class UClass* GetInstancedBlueprintFromHitResult(const struct FHitResult& HitResult);
		class FText GetGameVersionStringWithTags();
		class FString GetGameVersionString();
		TArray<class UStaticMesh*> GetFoliageMeshesFromItemHandle(const struct FDataTableRowHandle& ItemRowHandle);
		bool GetFoliageIsClimbable(class UStaticMesh* StaticMesh, const struct FGameplayTag& ClimberTag);
		bool GetFoliageHasClimbRole(class UStaticMesh* StaticMesh, const struct FGameplayTag& RoleTag);
		TArray<class UActorComponent*> GetFoliageClimbableSplines(class UStaticMesh* StaticMesh);
		class UClass* GetFoliageBlueprintFromStaticMesh(class UStaticMesh* StaticMesh);
		class UClass* GetFoliageBlueprintFromKey(const struct FFoliageKey& Key);
		class UClass* GetFoliageBlueprintFromFoliageType(class UFoliageType* FoliageType);
		struct FCustomGameModeSettings GetCustomGameSettings();
		EGameInputType GetCurrentGameInputType();
		TMap<class UAttractionComponent*, struct FAttractionCDOData> GetCDOAttractionData(class UStaticMesh* StaticMesh);
		TArray<class UActorComponent*> GetActorClimbableSplines(class AActor* Actor);
		bool ExitOnlineSession();
		void EndLoadingScreen(class UWorld* InLoadedWorld);
		void DismissInvite(const struct FBlueprintSessionResult& DismissedInvite);
		void DisableOtherStencilStandInActors(class AStencilStandInActor* ActiveStandIn);
		bool ConsumeProfileLoggedOutDuringPlay();
		bool ConsumeLocalPlayerKicked(class FText* OutKickReason);
		bool ConsumeConnectionLostDuringPlay();
		void CheckForCloudSavePrivilegeAndFetch();
		bool CanSwapFoliageWithAttacks(class UStaticMesh* StaticMesh);
		bool CanSwapFoliageWithAttack(class UStaticMesh* StaticMesh, const struct FDamageData& DamageData, int32_t Tier);
		bool CanDisplaceFoliage(class UStaticMesh* StaticMesh, EFoliageSwapLevel DisplaceLevel);
		void BeginLoadingScreen(const class FString& InMapName);
		void AcceptInvite(const struct FBlueprintSessionResult& AcceptedInvite);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameManager
	 * Size -> 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
	 */
	class ASurvivalGameManager : public AInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameMode
	 * Size -> 0x0068 (FullSize[0x0338] - InheritedSize[0x02D0])
	 */
	class ASurvivalGameMode : public AMaineGameModeBase
	{
	public:
		unsigned char                                              DefaultPlayerPawnList[0x50];                             // 0x02D0(0x0050) UNKNOWN PROPERTY: MapProperty
		class UEnvQuery*                                           PlayerSpawnEQS;                                          // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6ZJW[0x10];                                  // 0x0328(0x0010) MISSED OFFSET (PADDING)

	public:
		void RestartGame();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameModeSettings
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USurvivalGameModeSettings : public UObject
	{
	public:
		struct FLocString                                          DisplayName;                                             // 0x0028(0x0010) Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUnlockAllRecipes;                                       // 0x0038(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoCompleteBuildings;                                  // 0x0039(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableBuildingIntegrity;                                // 0x003A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRecipesRequireIngredients;                              // 0x003B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEncountersEnabled;                                      // 0x003C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCreaturesIgnorePlayers;                                 // 0x003D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHungerAndThirstEnabled;                                 // 0x003E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStaminaEnabled;                                         // 0x003F(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDamageEnabled;                                          // 0x0040(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFriendlyFire;                                           // 0x0041(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSizzleEnabled;                                          // 0x0042(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpoilingEnabled;                                        // 0x0043(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMenusPauseGame;                                         // 0x0044(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bQuestsEnabled;                                          // 0x0045(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPetInvincible;                                          // 0x0046(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U7E6[0x1];                                   // 0x0047(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HungerAndThirstMultiplier;                               // 0x0048(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerDamageMultiplier;                                  // 0x004C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyDamageMultiplier;                                   // 0x0050(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BuildingHealthMultiplier;                                // 0x0054(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeatMultiplier;                                          // 0x0058(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItemSpoilageMultiplier;                                  // 0x005C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItemDurabilityMultiplier;                                // 0x0060(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItemDurabilityPenaltyOnDeathPercentage;                  // 0x0064(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SizzleMultiplier;                                        // 0x0068(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPlayerDeathBehavior                                       DeathBehavior;                                           // 0x006C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R64G[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (PADDING)

	public:
		struct FCustomGameModeSettings CreateCustomSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameplayStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USurvivalGameplayStatics : public UBlueprintFunctionLibrary
	{
	public:
		void UnregisterStencilMaskRenderer(class AActor* Actor, int32_t StencilMaskValue);
		void TestChatter(class ASurvivalCharacter* Instigator);
		void StartFieldConversation(class UObject* WorldContextObject, class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationPlayPriority Priority);
		void StartConversation(class UObject* WorldContextObject, class AActor* OwnerActor, const struct FGuid& ConversationID, int32_t NodeId, EConversationPlayPriority Priority);
		class AActor* SpawnAI(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, class AActor* InteractionObject);
		void SetNearClipPlane(float ClipPlane);
		void SetLightChannel(class UPrimitiveComponent* PrimitiveComponent, int32_t LightChannel, bool ChannelActive);
		void SetInteractHighlight(class AActor* Actor, bool bEnabled);
		void SetFragilityHighlight(class AActor* Actor, int32_t Level);
		void SetFoliageOverrideViewDistanceScale(float ViewDistanceScale);
		void ServerTravel(class UObject* WorldContextObject, const class FString& LevelName);
		void ResetStaticMesh(class UStaticMeshComponent* StaticMeshComponent, class UStaticMesh* StaticMesh, bool ResetMaterials);
		void ResetCreatureLocations(class UObject* WorldContextObject);
		void RerunConstructionScript(class AActor* Actor);
		void RegisterStencilMaskRenderer(class AActor* Actor, int32_t StencilMaskValue);
		void RecoverPlayerBackpacks(class UObject* WorldContextObject);
		void PlayOneShotAtRandomLocationAroundPlayer(class UObject* WorldContextObject, int32_t PlayerIndex, class USoundBase* SoundToPlay, float MinSpawnDistance, float MaxSpawnDistance);
		void PlayCharacterSoundAttached(class ASurvivalCharacter* Character, const struct FGameplayTag& SoundTag, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
		void PlayCharacterSoundAtLocation(class ASurvivalCharacter* Character, const struct FGameplayTag& SoundTag, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
		class UAttack* NewAttack(const struct FDataTableRowHandle& AttackRowHandle, class AActor* Owner, class UObject* Outer);
		void MarkPrimitiveRenderStatesDirty(class AActor* Actor);
		bool LoadGameInProgress(class UObject* WorldContextObject);
		struct FTransform LerpTransforms(const struct FTransform& A, const struct FTransform& B, float Alpha);
		bool KnowsRecipe(class UObject* WorldContextObject, const struct FDataTableRowHandle& ItemRowHandle);
		class UMaineGameUserSettings* K2_GetMaineGameUserSettings();
		bool IsWinterHoliday();
		bool IsUsingGamepadControls(class UObject* WorldContextObject);
		bool IsStaticObstacle(class UObject* Object);
		bool IsSinglePlayer(class UObject* WorldContextObject);
		bool IsRecipeRowHandle(const struct FDataTableRowHandle& DataTableRowHandle);
		bool IsPublicTestBuild(class UObject* WorldContextObject);
		bool IsPasswordProtectedGame(const struct FBlueprintSessionResult& SessionResult);
		bool IsOverlappingWaterVolume(class AActor* Actor);
		bool IsNightTime(class UObject* WorldContextObject);
		bool IsNaturalResource(const struct FDataTableRowHandle& ItemRow);
		bool IsLODActorStaticObstacle(class UBaseLODActor* Actor);
		bool IsLocalPlayerInRange(class UObject* WorldContextObject, const struct FVector& Location, float Range);
		bool IsLoadingSave(class UObject* WorldContextObject);
		bool IsInCutscene(class UObject* WorldContextObject);
		bool IsHourNightTime(class UObject* WorldContextObject, float Hour);
		bool IsHourDayTime(class UObject* WorldContextObject, float Hour);
		bool IsHaulingItems(class AActor* Actor);
		bool IsHalloweenHoliday();
		bool IsGamepadAttached();
		bool IsFlightBuild(class UObject* WorldContextObject);
		bool IsDemoMode(class UObject* WorldContextObject);
		bool IsDayTime(class UObject* WorldContextObject);
		bool IsCurrentLevelMenuLevel(class UObject* WorldContextObject);
		bool IsCraftingRecipeFromDataTableRowHandle(const struct FDataTableRowHandle& DataTableRowHandle);
		bool IsConversationPlaying(class UObject* WorldContextObject);
		bool IsControlBound(const class FName& ControlName, bool bUsingGamepad);
		bool IsBuildingRecipeFromDataTableRowHandle(const struct FDataTableRowHandle& DataTableRowHandle);
		bool IsAnyPartyMemberInRange(class UObject* WorldContextObject, const struct FVector& Location, float Range);
		bool IsActorStaticObstacle(class AActor* Actor);
		void InvalidateLightingCache(class ULightComponent* LightComponent);
		class UItem* InteractShouldProvidePower(class AActor* InstigatedBy, const struct FGameplayTag& PowerType);
		bool HasUnlockedTechTreeRecipe(class UObject* WorldContextObject, const struct FDataTableRowHandle& TechTreeRecipeRowHandle);
		bool HasKeyItem(class AActor* SourceActor, const struct FDataTableRowHandle& KeyItemRowHandle);
		TArray<struct FDataTableRowHandle> HandleRecipeUnlockFromItem(class UObject* WorldContextObject, class APlayerState* PlayerState, const struct FDataTableRowHandle& ItemRowHandle, ERecipeUnlockType RecipeUnlockType);
		void HandleNewResourceNotify(class UObject* WorldContextObject, class APlayerState* PlayerState, const struct FDataTableRowHandle& ItemRowHandle);
		class UZoneManagerComponent* GetZoneManager(class UObject* WorldContextObject);
		class UWorldTraceManagerComponent* GetWorldTraceManager(class UObject* WorldContextObject);
		class UWidgetManager* GetWidgetManager(class UObject* WorldContextObject);
		class UWaveManagerComponent* GetWaveManager(class UObject* WorldContextObject);
		float GetWaterSurfaceZ(class AActor* Actor);
		class UWaterManagerComponent* GetWaterManager(class UObject* WorldContextObject);
		float GetTotalGameHoursPassed(class UObject* WorldContextObject);
		class UClass* GetThirstDamageType(class UObject* WorldContextObject);
		class ASurvivalWorldSettings* GetSurvivalWorldSettingsFrom(class UObject* WorldContextObject);
		class ASurvivalWorldSettings* GetSurvivalWorldSettings(class UObject* WorldContextObject);
		class ASurvivalPlayerController* GetSurvivalPlayerController(class APawn* Pawn);
		class ASurvivalGameState* GetSurvivalGameStateWorldSafe(class UObject* WorldContextObject);
		class ASurvivalGameState* GetSurvivalGameStateFrom(class UObject* WorldContextObject);
		class ASurvivalGameState* GetSurvivalGameState(class UObject* WorldContextObject);
		class USurvivalModeManagerComponent* GetSurvivalGameModeManager(class UObject* WorldContextObject);
		class USurvivalGameInstance* GetSurvivalGameInstanceFrom(class UObject* WorldContextObject);
		class USurvivalGameInstance* GetSurvivalGameInstance(class UObject* WorldContextObject);
		class ASurvivalAIController* GetSurvivalController(class APawn* Pawn);
		EPhysicalSurface GetSurfaceMaterial(class UObject* WorldContextObject, struct FHitResult* OutHit, const struct FVector& Point);
		float GetStatusEffectBaseValue(EStatusEffectType StatusEffectType);
		class USaveLoadManager* GetSaveLoadManager(class UObject* WorldContextObject);
		class UResourceSurveyComponent* GetResourceSurveyComponent(class UObject* WorldContextObject);
		class URenderTargetManagerComponent* GetRenderTargetManager(class UObject* WorldContextObject);
		struct FVector GetRandomLocationAroundPlayer(class UObject* WorldContextObject, int32_t PlayerIndex, float MinSpawnDistance, float MaxSpawnDistance);
		class UQuestManagerComponent* GetQuestManager(class UObject* WorldContextObject);
		class UPropManagerComponent* GetPropManager(class UObject* WorldContextObject);
		struct FMatrix GetProjectionMatrix(const struct FMinimalViewInfo& MinimalViewInfo);
		class UPowerNetworkManagerComponent* GetPowerNetwork(class UObject* WorldContextObject);
		class ASurvivalPlayerState* GetPlayerStateMatchingUniqueID(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueId);
		class ASurvivalPlayerState* GetPlayerStateMatchingPlayerGuid(class UObject* WorldContextObject, const struct FGuid& PlayerGuid);
		class ASurvivalPlayerState* GetPlayerStateMatchingCharacter(class ACharacter* Character);
		class ASurvivalPlayerController* GetPlayerControllerMatchingPlayerState(class UObject* WorldContextObject, class APlayerState* PlayerState);
		class UPhysicalMaterial* GetPhysicalMaterialFromHit(const struct FHitResult& Hit);
		class UPartyComponent* GetPartyComponent(class UObject* WorldContextObject);
		float GetNearClipPlane();
		class UMusicManager* GetMusicManager(class UObject* WorldContextObject);
		bool GetMetaBuildingsFeatureEnabled();
		class UMapComponent* GetMapComponent(class UObject* WorldContextObject);
		class ULODActorManagerComponent* GetLODActorManager(class UObject* WorldContextObject);
		struct FTransform GetLocalSurvivalPlayerTransform(class UObject* WorldContextObject);
		class ASurvivalPlayerState* GetLocalSurvivalPlayerState(class UObject* WorldContextObject);
		class ASurvivalPlayerController* GetLocalSurvivalPlayerController(class UObject* WorldContextObject);
		class ASurvivalPlayerCharacter* GetLocalSurvivalPlayerCharacter(class UObject* WorldContextObject);
		class UCapsuleComponent* GetLocalSurvivalPlayerCapsule(class UObject* WorldContextObject);
		class AItemSpawnManager* GetItemSpawnManager(class UObject* WorldContextObject);
		class UInterfaceNarrationManager* GetInterfaceNarrationManager(class UObject* WorldContextObject);
		class UInterestManagerComponent* GetInterestManager(class UObject* WorldContextObject);
		class UObject* GetIcon(const struct FDataTableRowHandle& DataRow);
		class UClass* GetHungerDamageType(class UObject* WorldContextObject);
		class UHUDMarkerManagerComponent* GetHUDMarkerManager(class UObject* WorldContextObject);
		class UGlobalUIData* GetGlobalUIData();
		class UGlobalTamingData* GetGlobalTamingData();
		class UGlobalTableData* GetGlobalTableData();
		class UGlobalItemData* GetGlobalItemData();
		class UGlobalControlsData* GetGlobalControlsData();
		class UGlobalCombatData* GetGlobalCombatData();
		class UGlobalBuildingData* GetGlobalBuildingData();
		class UGlobalAIData* GetGlobalAIData();
		class UClass* GetGenericDamageType(class UObject* WorldContextObject);
		EGamePlatform GetGamePlatform();
		EGamePackageType GetGamePackageType(class UObject* WorldContextObject);
		EGameContentType GetGameContentType(class UObject* WorldContextObject);
		class UFoliageManagerComponent* GetFoliageManagerComponent(class UObject* WorldContextObject);
		class UMeshComponent* GetEquipmentMeshComponent(class AActor* Actor);
		class UClass* GetEnvironmentalDamageType(class UObject* WorldContextObject);
		class UObject* GetDefaultObject(class UClass* ObjectClass);
		class UActorComponent* GetDefaultComponent(class UActorComponent* Component);
		class UCutsceneComponent* GetCutsceneComponent(class UObject* WorldContextObject);
		EGameInputType GetCurrentGameInputType(class UObject* WorldContextObject);
		struct FDataTableRowHandle GetCraftingResultFromCraftingRecipe(const struct FDataTableRowHandle& CraftingRecipe);
		struct FDataTableRowHandle GetCraftingResultFromBuildingRecipe(const struct FDataTableRowHandle& BuildingRecipe);
		struct FDataTableRowHandle GetCraftingRecipeForItem(class UObject* WorldContextObject, const struct FDataTableRowHandle& ItemRowHandle);
		EColorBlindModeSettings GetColorblindSetting();
		class UColonyManagerComponent* GetColonyManager(class UObject* WorldContextObject);
		float GetClosestPartyMemberDistanceSquared(class UObject* WorldContextObject, const struct FVector& Location);
		struct FLocString GetCharacterTypeNameByTag(const struct FGameplayTag& TypeTag);
		int32_t GetCancelNearbyBlueprintsCount(class AActor* Instigator, float Range);
		class UCalendarComponent* GetCalendarComponent(class UObject* WorldContextObject);
		class UBurgleQuestManagerComponent* GetBurgleQuestManager(class UObject* WorldContextObject);
		void GetBuildingShoppingList(class UObject* WorldContextObject, TArray<struct FRecipeRequirements>* Results);
		class UBuildingManagerComponent* GetBuildingManager(class UObject* WorldContextObject);
		EBuildConfigationType GetBuildConfigationType(class UObject* WorldContextObject);
		struct FBox GetBroadphaseBounds(class UWorld* World);
		bool GetBigHeadsState(class UObject* WorldContextObject);
		class UBestiaryComponent* GetBestiaryComponent(class UObject* WorldContextObject);
		class UBaseManagerComponent* GetBaseManager(class UObject* WorldContextObject);
		class UClass* GetBadFoodDamageType(class UObject* WorldContextObject);
		class USkeletalMeshComponent* GetArmorMeshComponent(class AActor* Actor, EEquipmentSlot ArmorSlot);
		int32_t GetArachnophobiaSafeSetting();
		class UMaineAnalyticsManager* GetAnalyticsManager(class UObject* WorldContextObject);
		bool GenerateRandomPhysicsVolumeLocation(class UObject* WorldContextObject, class APhysicsVolume* PhysicsVolume, const struct FVector& Origin, float Range, struct FVector* Result);
		bool GenerateRandomNavLocation(class UObject* WorldContextObject, const struct FVector& Origin, float Range, const struct FNavAgentProperties& NavAgentProperties, struct FVector* Result);
		void FlushPrestreamTextures(class UObject* WorldContextObject);
		float FloatPositiveInfinity();
		float FloatNegativeInfinity();
		class UBaseLODActor* FindLODActorForObject(class UObject* Object);
		class UBaseLODActor* FindLODActorForComponent(class UActorComponent* Component);
		class UBaseLODActor* FindLODActorForAny(class UObject* Object);
		class UBaseLODActor* FindLODActorForActor(class AActor* Actor);
		TArray<class UActorComponent*> FindDefaultComponentsByClass(class AActor* Actor, class UClass* ComponentClass);
		class UActorComponent* FindDefaultComponentByName(class AActor* Actor, const class FName& ComponentName);
		class UActorComponent* FindDefaultComponentByClass(class AActor* Actor, class UClass* ComponentClass);
		struct FVector FastForwardPhysics(class UPrimitiveComponent* Primitive);
		void EnableForegroundDOF(float MaxRadius);
		void DisableForegroundDOF();
		void DefragItemList(TArray<class UItem*> ItemList, bool SingleItem);
		void DealDamage(class AActor* TargetActor, const struct FDamageData& DamageData, class AController* InstigatedBy, class AActor* DamageCauser);
		class UItem* CreateItem(class UObject* WorldContextObject, const struct FDataTableRowHandle& ItemType);
		bool ConsumableHasPositiveSurvivalStat(const struct FDataTableRowHandle& ConsumableDataHandle, EStatusEffectType Stat);
		bool ConsumableHasNegativeEffect(const struct FDataTableRowHandle& ConsumableDataHandle);
		bool CanItemBeAnalyzed(const struct FDataTableRowHandle& ItemRowHandle);
		bool CanDefragItemList(TArray<class UItem*> ItemList);
		bool CanCraftIngredientViaRecipe(const struct FDataTableRowHandle& IngredientRowHandle);
		void CancelNearbyBlueprints(class AActor* Instigator, float Range);
		void ApplyConsumableEffects(class AActor* InstigatedBy, TArray<struct FDataTableRowHandle> ConsumableData, bool PlayChatter);
		void ApplyConsumableEffect(class AActor* InstigatedBy, const struct FDataTableRowHandle& ConsumableDataHandle, bool PlayChatter);
		void ApplyBuoyantForceWithSurface(class UStaticMeshComponent* Mesh, float SurfaceWorldZ);
		void ApplyBuoyantForceToMesh(class UStaticMeshComponent* Mesh);
		void ApplyBuoyantForce(class UStaticMeshComponent* Mesh, class AActor* WaterVolume);
		bool AnyConsumableHasPositiveSurvivalStat(TArray<struct FDataTableRowHandle> ConsumableData, EStatusEffectType Stat);
		bool AnyConsumableHasNegativeEffect(TArray<struct FDataTableRowHandle> ConsumableData);
		void AddObjectiveToItem(class UObject* WorldContextObject, const struct FDataTableRowHandle& ItemRowHandle, const struct FVector& Location, float Radius);
		bool ActorHasGameplayTag(class AActor* Actor, const struct FGameplayTagContainer& Tags);
		void AbortAllConversations(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameSession
	 * Size -> 0x0000 (FullSize[0x0248] - InheritedSize[0x0248])
	 */
	class ASurvivalGameSession : public AGameSession
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalGameState
	 * Size -> 0x02A0 (FullSize[0x0520] - InheritedSize[0x0280])
	 */
	class ASurvivalGameState : public AGameStateBase
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerStateAdded;                                      // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateRemoved;                                    // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ULODActorManagerComponent*                           LODActorManagerComponent;                                // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCalendarComponent*                                  CalendarComponent;                                       // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPartyComponent*                                     PartyComponent;                                          // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMapComponent*                                       MapComponent;                                            // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHUDMarkerManagerComponent*                          HUDMarkerManagerComponent;                               // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemManagerComponent*                               ItemManagerComponent;                                    // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFoliageManagerComponent*                            FoliageManagerComponent;                                 // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UQuestManagerComponent*                              QuestManagerComponent;                                   // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBreadcrumbManagerComponent*                         BreadcrumbManagerComponent;                              // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAttractionManagerComponent*                         AttractionManagerComponent;                              // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWaveManagerComponent*                               WaveManagerComponent;                                    // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBaseManagerComponent*                               BaseManagerComponent;                                    // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBuildingManagerComponent*                           BuildingManagerComponent;                                // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPowerNetworkManagerComponent*                       PowerNetworkManagerComponent;                            // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UConversationNavigatorComponent*                     ConversationNavigatorComponent;                          // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCutsceneComponent*                                  CutsceneComponent;                                       // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInterestManagerComponent*                           InterestManagerComponent;                                // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USurvivalModeManagerComponent*                       SurvivalModeManagerComponent;                            // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UZoneManagerComponent*                               ZoneManagerComponent;                                    // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UColonyManagerComponent*                             ColonyManagerComponent;                                  // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBurgleQuestManagerComponent*                        BurgleQuestManagerComponent;                             // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPopulationMonitorComponent*                         PopulationMonitorComponent;                              // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWorldTraceManagerComponent*                         WorldTraceManagerComponent;                              // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWaterManagerComponent*                              WaterManagerComponent;                                   // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPropManagerComponent*                               PropManagerComponent;                                    // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URenderTargetManagerComponent*                       RenderTargetManagerComponent;                            // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UResourceSurveyComponent*                            ResourceSurveyComponent;                                 // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerStatsComponent*                               TotalPartyPlayerStatsComponent;                          // 0x0378(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBestiaryComponent*                                  BestiaryComponent;                                       // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x0388(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObsidianIDComponent*                                ObsidianIDComponent;                                     // 0x0390(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAmbienceManager*                                    AmbienceManager;                                         // 0x0398(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_39AX[0x10];                                  // 0x03A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLobbyGameStarted;                                      // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EPCL[0x18];                                  // 0x03C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               PlaythroughGuid;                                         // 0x03D8(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S2TO[0x98];                                  // 0x03E8(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasResetCreatureLocations;                              // 0x0480(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasRecoveredPlayerBackpacks;                            // 0x0481(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NF65[0x6];                                   // 0x0482(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemSpawnManagerTemplate;                                // 0x0488(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O74C[0x6D];                                  // 0x0490(0x006D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLobbyGameStarted;                                       // 0x04FD(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bBigHeads;                                               // 0x04FE(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BPUH[0x21];                                  // 0x04FF(0x0021) MISSED OFFSET (PADDING)

	public:
		void UnRegisterGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, const class FScriptDelegate& Event);
		void TriggerGameStartViaLobby();
		void SetInCutscene(bool InCutscene);
		void ServerSetBigHeads(bool bState);
		void RegisterGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, const class FScriptDelegate& Event);
		void OnRep_LobbyGameStarted();
		void MulticastPlayVFXLocation(class UVisualEffect* Effect, const struct FVector& Location);
		void MulticastPlayItemConsumeAudioAtLocation(const struct FDataTableRowHandle& ItemRowHandle, const struct FVector& Location);
		void MulticastPlayAudioAtLocation(class USoundCue* Cue, const struct FVector& Location);
		void MulticastNotifyPlayerLeave(class APlayerState* PlayerState, EPlayerDisconnectReason Reason);
		void MulticastNotifyPlayerJoin(class APlayerState* PlayerState);
		void MulticastNotifyPlayerDown(class APlayerState* PlayerState, const struct FDeathInfo& DeathInfo);
		void MulticastNotifyPetDeparted(class ASurvivalPlayerCharacter* ToPlayer, const class FString& PetName);
		void MulticastNotifyEndOfEarlyAccessContent();
		void HandlePatchSaveGameRepair(const struct FGameVersion& LoadedVersion, EGamePackageType GamePackageType);
		void HandleEndEarlyAccessConent();
		class AItemSpawnManager* GetItemSpawnManager();
		bool GetInCutscene();
		class UHUDMarkerManagerComponent* GetHUDMarkerManagerComponent();
		class UFoliageManagerComponent* GetFoliageManagerComponent();
		bool GetBigHeadsState();
		class UAmbienceManager* GetAmbienceManager();
		void ClientSendFileContents(const class FString& Filename, TArray<unsigned char> Buffer);
		void ClientEndStreamFile(const class FString& Filename, const class FString& Hash);
		void ClientBeginStreamFile(const class FString& SaveName, const class FString& Filename, int64_t FileSize);
		void BigHeads();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalMemoryReport
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USurvivalMemoryReport : public UObject
	{
	public:
		void SetLevelVisibility(const class FString& LevelName, int32_t Visibility);
		void GenerateUnusedCollisionReport();
		void GenerateStreamingTextureReport();
		void GenerateNonStreamingTextureReport();
		void GenerateMemoryReport(int32_t FullReport);
		void GenerateIncompressibleTexturesReport();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalMemoryReportSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USurvivalMemoryReportSettings : public UDeveloperSettings
	{
	public:
		TArray<class FString>                                      LightingLevels;                                          // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalModeManagerComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class USurvivalModeManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_O55I[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EGameMode                                                  CurrentGameMode;                                         // 0x00C0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCustomGameModeSettings                             CustomSettings;                                          // 0x00C1(0x0004) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KX5Q[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USurvivalGameModeSettings*                           GameModeSettings;                                        // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetGameMode(EGameMode SelectedGameMode);
		void OnRep_CurrentGameMode();
		class USurvivalGameModeSettings* GetGameModeSettings();
		EGameMode GetGameMode();
		bool DoRecipesRequireIngredients();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalPlayerCharacter
	 * Size -> 0x0380 (FullSize[0x15C0] - InheritedSize[0x1240])
	 */
	class ASurvivalPlayerCharacter : public ASurvivalCharacter
	{
	public:
		unsigned char                                              UnknownData_0DFG[0x8];                                   // 0x1240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSpyGlassStateChanged;                                  // 0x1248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       IsInSpyGlassMode;                                        // 0x1258(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideSpyGlassDOFRadius;                              // 0x1259(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideSpyGlassDOFAmount;                              // 0x125A(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZBC7[0x1];                                   // 0x125B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpyGlassDOFBlurRadius;                                   // 0x125C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpyGlassDOFBlurAmount;                                   // 0x1260(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpyGlassFOV;                                             // 0x1264(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UKT0[0x8];                                   // 0x1268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnActivePetChanged;                                      // 0x1270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPetTamed;                                              // 0x1280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8T88[0x20];                                  // 0x1290(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRest;                                                  // 0x12B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableChanged;                                   // 0x12C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyChanged;                                          // 0x12D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteract;                                              // 0x12E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              InteractableInRange[0x10];                               // 0x12F0(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		struct FFoliageKey                                         InteractableFoliageKeyInRange;                           // 0x1300(0x0020) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBuildingGridBuildingId                             InteractableBuildingKeyInRange;                          // 0x1320(0x0010) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C05Z[0x8];                                   // 0x1330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackTargetChanged;                                   // 0x1338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              AttackTargetInRange[0x10];                               // 0x1348(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		class FScriptMulticastDelegate                             OnPlayerColorChangedDelegate;                            // 0x1358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChat;                                                  // 0x1368(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseItem;                                               // 0x1378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_38GO[0x18];                                  // 0x1388(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackResolutionChanged;                               // 0x13A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerBusyInMenuChanged;                               // 0x13B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UMainePhotoModeComponent*                            PhotoModeComponent;                                      // 0x13C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFPCOverlayComponent*                                FPCOverlayComponent;                                     // 0x13C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHeatHazardComponent*                                HeatHazardComponent;                                     // 0x13D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCustomizeInteractionComponent*                      CustomizeInteractionComponent;                           // 0x13D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           PlaceWaypointCue;                                        // 0x13E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           RemoveWaypointCue;                                       // 0x13E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        SpyGlassMontage;                                         // 0x13F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerTakesDamageUnpossessed;                           // 0x13F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayerBusyInMenu;                                       // 0x13F9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UU2A[0x6];                                   // 0x13FA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        DropItemMontage;                                         // 0x1400(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPersistenceComponent*                               PersistenceComponent;                                    // 0x1408(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x1410(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEquipmentComponent*                                 EquipmentComponent;                                      // 0x1418(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USurvivalComponent*                                  SurvivalComponent;                                       // 0x1420(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHaulingComponent*                                   HaulingComponent;                                        // 0x1428(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaminaComponent*                                   StaminaComponent;                                        // 0x1430(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBuildingPlacementComponent*                         BuildingPlacementComponent;                              // 0x1438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWirePlacementComponent*                             WirePlacementComponent;                                  // 0x1440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              HeadArmorMeshComponent;                                  // 0x1448(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              ChestArmorMeshComponent;                                 // 0x1450(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              ArmsArmorMeshComponent;                                  // 0x1458(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              LegsArmorMeshComponent;                                  // 0x1460(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              HairMeshComponent;                                       // 0x1468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScreenEffectComponent*                              ScreenEffectComponent;                                   // 0x1470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCozinessEvaluatorComponent*                         CozinessEvaluatorComponent;                              // 0x1478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProximityInventoryComponent*                        ProximityInventoryComponent;                             // 0x1480(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTransmissionReceiverComponent*                      TransmissionReceiverComponent;                           // 0x1488(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlayerCharacterIdentity                                   CharacterIdentity;                                       // 0x1490(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T8VV[0x17];                                  // 0x1491(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InteractTraceLength;                                     // 0x14A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TQ6A[0x4];                                   // 0x14AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIsInteracting : 1;                                      // 0x14B0(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsInteractHoldAnim : 1;                                 // 0x14B0(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AF7Y[0x3];                                   // 0x14B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InteractTimerMax;                                        // 0x14B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9F9M[0x8];                                   // 0x14B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CancelInteractTimerMax;                                  // 0x14C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_05NL[0x4];                                   // 0x14C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentInteractable;                                     // 0x14C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInteractionChannel                                        CurrentInteractionChannel;                               // 0x14D0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IMFX[0x3];                                   // 0x14D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ThirdPersonZeroDistance;                                 // 0x14D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThirdPersonBufferDistance;                               // 0x14D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XCYT[0xC];                                   // 0x14DC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RunFOVAdjustment;                                        // 0x14E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunFOVAdjustmentSpeed;                                   // 0x14EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              PlayerColor;                                             // 0x14F0(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGuid                                               PlayerGuid;                                              // 0x14F4(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequestingRest;                                          // 0x1504(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GJBG[0x13];                                  // 0x1505(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              Backpack;                                                // 0x1518(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInterior;                                               // 0x1520(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y8XH[0x7];                                   // 0x1521(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FireLightAnim;                                           // 0x1528(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBaseAppearanceData*                                 HairAppearance;                                          // 0x1530(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundSubmix*                                        GasMaskSubMix;                                           // 0x1538(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TVP1[0x8];                                   // 0x1540(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPlayerCombatTracker>                        CombatTrackers;                                          // 0x1548(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OWFK[0x10];                                  // 0x1558(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASurvivalCreature*                                   CurrentPetFull;                                          // 0x1568(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  SpyGlassBlurMaterial;                                    // 0x1570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O5VW[0x40];                                  // 0x1578(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTelemetryComponent*                                 TelemetryComponent;                                      // 0x15B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateAppearance();
		bool TryPickupItemRow(const struct FDataTableRowHandle& ItemRow, bool bEquip);
		bool TryPickupItem(class UItem* Item, bool bEquip);
		EAttackResolutionType TestCurrentAttack();
		bool ShouldShowTargetInteractionInterface(EInteractionChannel Channel);
		void SetSpyGlassOverlay(bool bEnabled);
		void ServerThrowItem();
		void ServerTeleportPartyNear();
		void ServerStoreOrSwapPet(class APetHomeBuilding* WithBuilding);
		void ServerStopRequestInventories(class AActor* Actor);
		void ServerStartThrow();
		void ServerStartRequestInventories(class AActor* Actor);
		void ServerStandup();
		void ServerShowPlayerIsBusyInMenu(bool PlayerBusyInMenu);
		void ServerSetRespawn(class AActor* RestActor);
		void ServerSelectAmmoType(class UItem* AmmoItem);
		void ServerRevive();
		void ServerRequestTechTreeRecipePurchase(const struct FDataTableRowHandle& TechTreeRowHandle);
		void ServerRequestRest(class AActor* aRestActor);
		void ServerRequestProcessItem(class AItemProcessingBuilding* ProcessingBuilding, class UItem* ItemToProcess);
		void ServerRequestHUDMarkerUpdate(class ABuilding* Building, int32_t IconVariant, int32_t ColorVariant);
		void ServerRequestCancelProcessItem(class AItemProcessingBuilding* ProcessingBuilding, class UItem* ItemToCancel);
		void ServerRepairItem(class UItem* Item);
		void ServerRenamePet(class ASurvivalCreature* Creature, const class FText& NewName);
		void ServerRemoveWaypoint();
		void ServerRemoveResourceWaypoint();
		void ServerReleaseThrow();
		void ServerReleaseAttack();
		void ServerPowerSwitchPressed();
		void ServerPlaceResourceWaypoint(const struct FVector& WorldLocation);
		void ServerKill();
		void ServerInteractWirePlacement();
		void ServerInteractRelocate();
		void ServerInputPlaceMapMarkerPressed();
		void ServerHotDrop(class UItem* Item);
		void ServerHoldAttack();
		void ServerHandleInteractCancel();
		void ServerHandleInteract();
		void ServerHandleHoldInteractFoliage(class UObject* InteractableObject, const struct FFoliageKey& MatchingFoliageKey);
		void ServerHandleHoldInteractCancelFoliage(class UObject* InteractableObject, const struct FFoliageKey& MatchingFoliageKey);
		void ServerHandleHoldInteractCancelBuilding(class UObject* InteractableObject, const struct FBuildingGridBuildingId& MatchingBuildingKey);
		void ServerHandleHoldInteractCancelActor(class UObject* InteractableObject);
		void ServerHandleHoldInteractBuilding(class UObject* InteractableObject, const struct FBuildingGridBuildingId& MatchingBuildingKey);
		void ServerHandleHoldInteractActor(class UObject* InteractableObject);
		void ServerHandleFireInteract();
		void ServerHandleDrop(class UObject* InteractableObject);
		void ServerFullRestore();
		void ServerExitSpyGlassMode();
		void ServerExitSplineClimbing();
		void ServerExitMotionEater();
		void ServerEnterSpyGlassMode();
		void ServerEndHoldInteractFoliage(class UObject* InteractableObject, const struct FFoliageKey& MatchingFoliageKey, EInteractHoldHandleType HoldInteractType);
		void ServerEndHoldInteractBuilding(class UObject* InteractableObject, const struct FBuildingGridBuildingId& MatchingBuildingKey, EInteractHoldHandleType HoldInteractType);
		void ServerEndHoldInteractActor(class UObject* InteractableObject, EInteractHoldHandleType HoldInteractType);
		void ServerBeginHoldInteract(class UObject* InteractableObject);
		void ServerAddWaypoint(const struct FVector& Location);
		bool RequestedRest();
		void OnWidgetStackChanged();
		void OnViewControlBlendCompleteEvent();
		void OnRep_PlayerGuid();
		void OnRep_PlayerColor();
		void OnRep_PlayerBusyInMenu();
		void OnRep_Interior();
		void OnRep_CurrentPetFull();
		void OnGliderMovementModeChanged(bool IsGliding);
		void OnControllerDisconnected();
		void NotifyInteractError(class UObject* Interactable, const class FText& WarningText);
		void MulticastStopWeaponMontage(class UAnimMontage* AnimMontage);
		void MulticastSetWeaponMontageNextSection(class UAnimMontage* AnimMontage, const class FName& SectionToSet, const class FName& NextSection, bool JumpIfNotInSection);
		void MulticastPlayWeaponMontage(class UAnimMontage* AnimMontage);
		void MulticastFixupPoseableClone(class APawn* OriginalPawn);
		void KillMe();
		bool IsThrowing();
		bool IsTargetInteractionEnabled(EInteractionChannel Channel);
		bool IsRequestedInventory(class UInventoryComponent* Inventory);
		bool IsInCinematicMode();
		bool IsChargingThrow();
		bool IsChargingAttack();
		bool HasWeapon(bool bCheckVisible);
		bool HasOffhand(bool bCheckVisible);
		bool HasLitFire();
		void HandleSizzleStateChanged(ESizzleState PreviousState, ESizzleState CurrentState);
		void HandleEquipmentChanged();
		void HandleCurrentPetLODActorConvertedToProxyActor(class UBaseLODActor* LODActor);
		void HandleCurrentPetLODActorConvertedToFullActor(class UBaseLODActor* LODActor);
		void HandleCozinessLevelChanged(class UCozinessEvaluatorComponent* Sender, int32_t OldLevel);
		class ABuilding* GetPendingBuilding();
		bool GetIsPlacingBuilding();
		bool GetIsInteracting();
		bool GetIsCancellingInteract();
		float GetInteractTimerMax();
		float GetInteractTimer();
		class USkeletalMeshComponent* GetHeadMesh();
		struct FTransform GetDropItemTransform(class UItem* Item, const struct FVector& Offset);
		struct FVector GetDropItemDirection();
		class ASurvivalCreature* GetCurrentPetFull();
		class UCreatureLODActor* GetCurrentPet();
		EPlayerCharacterIdentity GetCharacterIdentity();
		float GetCancelInteractTimerMax();
		float GetCancelInteractTimer();
		float GetAimPitch();
		void ExitSpyGlassMode();
		void ExitPlaceBuildingMode(bool bSuccess);
		void EnterSpyGlassMode();
		void EnterPlaceBuildingMode(const struct FDataTableRowHandle& BuildingData, bool bAutoAddIngredients, bool bDeployable);
		void DamagedServerOnlyCallback(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void ClientSetEnemy(class ASurvivalCharacter* Enemy);
		void ClientNotifyStorageFull();
		void ClientNotifyInventoryFull();
		void ClientNotifyHaulingFull();
		void ClientNotifyDropStorageFull();
		void ClientExitSpyGlassMode();
		void ClientEnterSpyGlassMode();
		void ClientEndHoldInteraction(EInteractHoldHandleType HoldInteractType);
		void ClientBeginHoldInteract(class UObject* InteractableObject);
		bool CanThrowItem();
		bool CanLightFire();
		bool CanInteractWith(class UObject* Interactable, EInteractionChannel InteractionChannel);
		bool CanInteract();
		bool CanDropItem(class UItem* Item);
		void AdjustCameraForInteraction(class UObject* InteractableActor, bool IsEnteringInteraction, float BlendTime, float BlendExp);
		void AchievementDebug(bool bShow);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalPlayerController
	 * Size -> 0x0238 (FullSize[0x07D0] - InheritedSize[0x0598])
	 */
	class ASurvivalPlayerController : public APlayerController
	{
	public:
		class FScriptMulticastDelegate                             OnRespawn;                                               // 0x0598(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIneffectiveAttack;                                     // 0x05A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractionWarning;                                    // 0x05B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUseCooldownBegin;                                  // 0x05C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUseCooldownEnd;                                    // 0x05D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UPlayerSFXComponent*                                 PlayerSFXComponent;                                      // 0x05E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LookStickBaseTurnRate;                                   // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickBasePitchRate;                                  // 0x05F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickExponent;                                       // 0x05F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickTurnRampDelay;                                  // 0x05FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickTurnRampTime;                                   // 0x0600(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickTurnRampMultiplier;                             // 0x0604(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickMinTurnRateScalar;                              // 0x0608(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookStickMaxTurnRateScalar;                              // 0x060C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  LookStickInputYawCurve;                                  // 0x0610(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  LookStickInputPitchCurve;                                // 0x0698(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9XJG[0x8];                                   // 0x0720(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     InteractInputComponent;                                  // 0x0728(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     BuildingPlacementInputComponent;                         // 0x0730(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     WirePlacementInputComponent;                             // 0x0738(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     MotionEaterInputComponent;                               // 0x0740(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     SplineClimbingInputComponent;                            // 0x0748(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     PauseInputComponent;                                     // 0x0750(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     SpyGlassInputComponent;                                  // 0x0758(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P6YO[0x8];                                   // 0x0760(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForcedLookStrength;                                      // 0x0768(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoLevelSpeed;                                          // 0x076C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K3UP[0x30];                                  // 0x0770(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PhotoModeWidgetClass;                                    // 0x07A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0YP6[0x28];                                  // 0x07A8(0x0028) MISSED OFFSET (PADDING)

	public:
		bool TryUseItem(class UObject* From, class UItem* Item);
		void ToggleSpectatorMode();
		void TogglePhotoPawnType();
		void TogglePhotoModeUI();
		void TogglePhotoModeSettings();
		void ShowPhotoModeUI();
		void SetYAxisInverted(bool bIsInverted);
		void SetXAxisInverted(bool bIsInverted);
		void SetupPhotoPawnInputs(class APhotoPawn* PhotoPawn, class UInputComponent* PhotoPawnInputComponent);
		void SetRumbleEnabled(bool bIsEnabled);
		void SetRightStickOuterDeadZone(float Value);
		void SetRightStickInnerDeadZone(float Value);
		void SetMouseSensitivityY(float Value);
		void SetMouseSensitivityX(float Value);
		void SetMouseSensitivity(const struct FVector2D& Value);
		void SetLeftStickOuterDeadZone(float Value);
		void SetLeftStickInnerDeadZone(float Value);
		void SetGamepadSensitivityY(float Value);
		void SetGamepadSensitivityX(float Value);
		void SetGamepadSensitivity(const struct FVector2D& Value);
		void SetFOV(float InFOV);
		void SetControllerMoveYInverted(bool bIsInverted);
		void SetControllerMoveXInverted(bool bIsInverted);
		void SetControllerLookYInverted(bool bIsInverted);
		void SetControllerLookXInverted(bool bIsInverted);
		void ServerUseItem(class UObject* From, class UItem* Item);
		void ServerUnequipDisplayBuilding(class AEquipmentDisplayBuilding* Building, class UItem* Item);
		void ServerUnequipCreature(class ASurvivalCreature* Creature, class UItem* Item);
		void ServerTryGetProductionItem(class AProductionBuilding* Building, class UItem* Item);
		void ServerSwapDisplayBuilding(class AEquipmentDisplayBuilding* Building);
		void ServerSetPheromoneBroadcasterGatherEnabled(class APheromoneBroadcasterBuilding* Building, bool bEnable);
		void ServerSetPheromoneBroadcasterBuildEnabled(class APheromoneBroadcasterBuilding* Building, bool bEnable);
		void ServerSelectSign(class ASignBuilding* SignBuilding, const struct FDataTableRowHandle& SignDataHandle);
		void ServerSelectPlayerDrivenConversationResponse(int32_t ResponseIndex);
		void ServerRespawn();
		void ServerRequestUnlockItemStackUpgradeTier(const struct FGameplayTag& ItemStackTag);
		void ServerRequestTechTreeRecipePointSpend(const struct FDataTableRowHandle& TechTreeRowHandle, int32_t PointsToSpend);
		void ServerRequestSetPlayerIdentity(EPlayerCharacterIdentity PlayerIdentity);
		void ServerRemoveItemFromGarden(class AGardenBuilding* Building, class UItem* Item);
		void ServerRemoveItem(class UObject* From, class UItem* Item, int32_t Count);
		void ServerRejectBurgleQuest(class UBurgleQuestInstance* QuestInstance);
		void ServerRefillBurgleQuests();
		void ServerProgressPlayerDrivenConversation();
		void ServerEquipDisplayBuilding(class AEquipmentDisplayBuilding* Building, class UItem* Item);
		void ServerEquipCreature(class ASurvivalCreature* Creature, class UItem* Item);
		void ServerEnhanceItemBonus(class UItem* Item, const struct FGameplayTag& BonusEnhancementType);
		void ServerEnhanceItem(class UItem* Item);
		void ServerEndPlayerDrivenConversation();
		void ServerDumpItem(class UItem* Item);
		void ServerDropItem(class UObject* From, class UItem* Item, int32_t Count);
		void ServerDepositToPheromoneBroadcaster(class APheromoneBroadcasterBuilding* Building, class UItem* Item);
		void ServerCraftRecipeDataAtBuilding(class AProductionBuilding* Building, const struct FDataTableRowHandle& RecipeRowHandle, const struct FDataTableRowHandle& RecipeModRowHandle);
		void ServerCraftRecipeAtBuilding(class AProductionBuilding* Building, const struct FDataTableRowHandle& RecipeModRowHandle);
		void ServerCommitGardenItems(class AGardenBuilding* Building);
		void ServerCloseInteractionWidget(class AActor* Interactable);
		void ServerCancelProductionItem(class AProductionBuilding* Building, class UItem* Item);
		void ServerCancelGardenProduction(class AGardenBuilding* Building);
		void ServerAddItemToGarden(class AGardenBuilding* Building, class UItem* Item);
		void ServerAcceptBurgleQuest(class UBurgleQuestInstance* QuestInstance);
		void ServerAbandonBurgleQuest(class UBurgleQuestInstance* QuestInstance);
		void RestoreDefaultPhotoSettings();
		void RespawnCharacter();
		void RequestTechTreeRecipePointSpend(const struct FDataTableRowHandle& TechTreeRowHandle, int32_t PointsToSpend);
		void PhotoCamSpeedAdjust(float Value);
		void PhotoCamFlightSpeedUp();
		void PhotoCamFlightSpeedDown();
		void OnVoiceChatActivationSettingChanged(int32_t IntSetting);
		void OnPhotoModeEntryUnallowed(EPhotoModeEntryAllowedResult PhotoModeEntryAllowedResult);
		void OnPhotoModeEntered(class APhotoPawn* PhotoPawn);
		void OnKeyBindsReset();
		void OnExitPhotoMode();
		void OnAxisMappingRemoved(const struct FInputAxisKeyMapping& Value);
		void OnAxisMappingAdded(const struct FInputAxisKeyMapping& Value);
		void OnActionMappingRemoved(const struct FInputActionKeyMapping& Value);
		void OnActionMappingAdded(const struct FInputActionKeyMapping& Value);
		void NotifyWasKicked(const class FText& Reason);
		void NotifyInteractError(class UObject* Interactable, const class FText& WarningText);
		bool IsMounted();
		bool IsItemUseOnCooldown();
		bool IsInteractInputAvailable();
		void HidePhotoModeUI();
		void HandlePhotoModeUnallowedInMP();
		class ASurvivalPlayerState* GetSurvivalPlayerState();
		bool GetRumbleEnabled();
		class APawn* GetPreviousPawn();
		struct FVector2D GetMouseSensitivity();
		float GetItemUseCoooldownRemaining();
		struct FVector2D GetGamepadSensitivity();
		void EndForceLookAt(class AActor* Target);
		void DestroyPhotoModeUI();
		void CloseInteractionWidget(class AActor* Interactable);
		void ClientOnRespawn();
		void ClientNotifyInteractError(class UObject* Interactable, const class FText& WarningText);
		void ClientNotifyAttackError(class AActor* Target, ECannotDamageReason CannotDamageReason, uint32_t FailedDamageTypeFlags);
		void ClientCreateInteractionWidget(class AActor* Interactable);
		void BeginForceLookAt(class AActor* Target);
		bool AllowIdentitySelection();
		void AdjustPhotoCamFlightSpeed(float Multiplier);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalPlayerState
	 * Size -> 0x0298 (FullSize[0x05C8] - InheritedSize[0x0330])
	 */
	class ASurvivalPlayerState : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_KECG[0x10];                                  // 0x0330(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnKeyItemAdded;                                          // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResearchRequest;                                       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerColorChangedDelegate;                            // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerNameChangedDelegate;                             // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHotBarQuickSlotChanged;                                // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialShownDelegate;                                 // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialCompleteDelegate;                              // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UHotBarQuickSlot*>                            HotBarQuickSlots;                                        // 0x03B0(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic
		int32_t                                                    CharacterSelection;                                      // 0x03C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCharactersRealName;                                  // 0x03C4(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZUCV[0x33];                                  // 0x03C5(0x0033) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStickiedQuestChanged;                                  // 0x03F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPointOfInterestDiscovered;                             // 0x0408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHUDMarkerStateChanged;                                 // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceSurveyVisibleChanged;                          // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRespawnPointChangedDelegate;                           // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UAchievementsComponent*                              AchievementsComponent;                                   // 0x0448(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerStatsComponent*                               PlayerStatsComponent;                                    // 0x0450(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M7AV[0x4];                                   // 0x0458(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ColorSelection;                                          // 0x045C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItem*>                                       PersonalKeyItems;                                        // 0x0460(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         InspectedItems;                                          // 0x0470(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         InspectedCraftingRecipes;                                // 0x0480(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         InspectedBuildingRecipes;                                // 0x0490(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle_NetCrc>                  ViewedTutorials;                                         // 0x04A0(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UQuest*>                                      ClientQuests;                                            // 0x04B0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FActiveQuestStickiedData>                    ActiveQuestStickiedStates;                               // 0x04C0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       bBurgleQuestsStickied;                                   // 0x04D0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0548[0x7];                                   // 0x04D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPointOfInterestDataAsset*>                   DiscoveredPointsOfInterest;                              // 0x04D8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9L55[0x10];                                  // 0x04E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               RespawnPoint;                                            // 0x04F8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RespawnPointLocation;                                    // 0x0500(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECameraDisplayMode                                         DesiredCameraMode;                                       // 0x050C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SYTZ[0x3];                                   // 0x050D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDeathInfo                                          LastDeathNotification;                                   // 0x0510(0x0030) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGuid                                               PlayerGuid;                                              // 0x0540(0x0010) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPerkComponent*                                      PerkComponent;                                           // 0x0550(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerUpgradeComponent*                             PlayerUpgradeComponent;                                  // 0x0558(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItem*>                                       LastEquippedItemsBeforeDeath;                            // 0x0560(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UItem*>                                       LastInventoryItemsBeforeDeath;                           // 0x0570(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         LastBuildingRadialVariants;                              // 0x0580(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       ToggledHUDMarkers;                                       // 0x0590(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              bResourceSurveyVisible : 1;                              // 0x05A0(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TKJF[0x7];                                   // 0x05A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastWaypointLocation;                                    // 0x05A8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JK4E[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 LastWaypointItemHandle;                                  // 0x05B8(0x0010) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void ViewTutorial(const struct FDataTableRowHandle& TutorialRowHandle);
		void ToggleResourceSurveyVisible();
		void SetTutorialComplete(const struct FDataTableRowHandle& TutorialRowHandle);
		void SetResourceSurveyVisible(bool bState);
		void SetPlayerTextMute(class APlayerState* Target, bool bState);
		void SetPlayerColorSelection(int32_t Selection);
		void SetItemInspected(const struct FDataTableRowHandle& ItemRowHandle);
		void SetCraftingRecipeInspected(const struct FDataTableRowHandle& CraftingRecipeRowHandle);
		void SetBuildingRecipeInspected(const struct FDataTableRowHandle& BuildingRecipeRowHandle);
		void ServerViewTutorial(const struct FDataTableRowHandle& TutorialRowHandle);
		void ServerUseTechTreeKeyItem(class UItem* Item);
		void ServerUpdateRelevanceConsensus(class ASurvivalCharacter* Character, class ASurvivalPlayerState* Player, ERelevanceType ClientRelevance);
		void ServerUnassignQuickSlotItem(int32_t Index);
		void ServerToggleHUDMarker(const struct FGuid& HUDMarkerObject, bool IsVisible);
		void ServerSetTutorialComplete(const struct FDataTableRowHandle& TutorialRowHandle);
		void ServerSetSurveyedResource(const struct FDataTableRowHandle& Resource);
		void ServerSetResourceSurveyVisible(bool bIsVisible);
		void ServerSetQuickSlotAssignment(int32_t Index, EHotBarQuickSlotType SlotType, const struct FHotBarQuickSlotItemTypeKey& ItemKey);
		void ServerSetQuestStickiedState(const struct FDataTableRowHandle& QuestRowHandle, bool IsStickied);
		void ServerSetItemInspected(const struct FDataTableRowHandle& ItemRowHandle);
		void ServerSetDesiredCameraMode(ECameraDisplayMode CameraMode);
		void ServerSetCraftingRecipeInspected(const struct FDataTableRowHandle& CraftingRecipeRowHandle);
		void ServerSetBurgleQuestsStickied(bool IsStickied);
		void ServerSetBuildingRecipeInspected(const struct FDataTableRowHandle& BuildingRecipeRowHandle);
		void ServerSendChatMessage(const class FString& Message);
		void ServerRequestResearch(const struct FDataTableRowHandle& ItemRowHandle, class AResourceAnalyzer* ResourceAnalyzer);
		void ServerRemoveQuestStickiedState(const struct FDataTableRowHandle& QuestRowHandle);
		void ServerGameModeChanged(EGameMode GameMode);
		void ServerEndViewResourceSurvey();
		void ServerBeginViewResourceSurvey();
		void ServerAddKeyItem(class UItem* Item);
		void RemoveAchievement(const class FName& AchievementName);
		void OnRep_ToggledHUDMarkers();
		void OnRep_RespawnPoint();
		void OnRep_ResourceSurveyVisible();
		void OnRep_PlayerGuid();
		void OnRep_PlayerColorSelectionChanged();
		void OnRep_HotBarQuickSlots();
		void OnRep_DesiredCameraMode();
		void OnRep_ClientQuests();
		void OnRep_ActiveQuestStickiedStates();
		void OnPlayerInventoryChanged();
		void NavigateNextMetaBuildingVariant(const struct FDataTableRowHandle& MetaBuilding);
		void MulticastSendChatMessage(class ASurvivalPlayerState* PlayerState, const class FString& Message);
		void MulticastGameModeChanged(EGameMode GameMode);
		void LocallyHandlePawnUnpossess(class APawn* Pawn);
		void LocallyHandlePawnPossess(class APawn* Pawn);
		bool IsResourceSurveyVisible();
		bool IsBurgleQuestsStickied();
		bool IsActiveQuestStickied(const struct FDataTableRowHandle& QuestRowHandle);
		bool HasViewedTutorial(const struct FDataTableRowHandle& TutorialRowHandle);
		bool HasKeyItem(const struct FDataTableRowHandle& ItemHandle);
		bool HasInspectedItem(const struct FDataTableRowHandle& ItemRowHandle);
		bool HasInspectedCraftingRecipe(const struct FDataTableRowHandle& CraftingRecipeRowHandle);
		bool HasInspectedBuildingRecipe(const struct FDataTableRowHandle& BuildingRecipeRowHandle);
		TArray<struct FDataTableRowHandle_NetCrc> GetViewedTutorials();
		class UItem* GetTechTreeKeyItem();
		class AActor* GetRespawnPoint();
		bool GetPlayerTextMute(class APlayerState* Target);
		int32_t GetPlayerColorSelection();
		struct FColor GetPlayerColor();
		TArray<class UItem*> GetPersonalKeyItems();
		struct FDeathInfo GetLastDeathNotification();
		TArray<struct FActiveQuestStickiedData> GetActiveQuestStickiedStates();
		void ClientViewTutorial(const struct FDataTableRowHandle& TutorialRowHandle);
		void ClientSetTutorialComplete(const struct FDataTableRowHandle& TutorialRowHandle);
		void ClientSendResourceSurveyBlock(int32_t StartIndex, TArray<unsigned char> Buffer);
		void ClientSendFrankenlineImageBlock(const struct FGuid& ObsidianId, TArray<unsigned char> Buffer);
		void ClientOnRequestResearch(const struct FDataTableRowHandle& ItemRowHandle, bool bSuccess);
		void ClientOnKeyItemAdded(const struct FDataTableRowHandle& ItemRowHandle, bool IsNewItem);
		void ClientEndStreamFrankenlineImage(const struct FGuid& ObsidianId);
		void ClientBeginStreamFrankenlineImage(const struct FGuid& ObsidianId, int64_t BufferSize);
		void AwardAchievement(const class FName& AchievementName);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.OverTimeEffect
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UOverTimeEffect : public UObject
	{
	public:
		unsigned char                                              UnknownData_5HBR[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsEnabled;                                              // 0x0038(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHWN[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumValue;                                            // 0x003C(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaximumValue;                                            // 0x0040(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V5J2[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DamageType;                                              // 0x0048(0x0008) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Rate;                                                    // 0x0050(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TickInterval;                                            // 0x0054(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Duration;                                                // 0x0058(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ElapsedTime;                                             // 0x005C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TickTimer;                                               // 0x0060(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DBGD[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		float GetTimeRemaining();
		bool GetIsExpired();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SurvivalWorldSettings
	 * Size -> 0x0048 (FullSize[0x03F8] - InheritedSize[0x03B0])
	 */
	class ASurvivalWorldSettings : public AWorldSettings
	{
	public:
		class UMusicSettings*                                      MusicSettings;                                           // 0x03B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ElevationResolution;                                     // 0x03B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M856[0x3C];                                  // 0x03BC(0x003C) MISSED OFFSET (PADDING)

	public:
		float PerformSurfaceTrace(const struct FVector& WorldLocation);
		float GetSurfaceElevation(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SwappableFoliageInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USwappableFoliageInterface : public UInterface
	{
	public:
		void NotifySwapped(bool bFromDamage);
		ECanRevertToFoliageState CanRevertToFoliage();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SwimmingSurvivalCharacter
	 * Size -> 0x0170 (FullSize[0x24B0] - InheritedSize[0x2340])
	 */
	class ASwimmingSurvivalCharacter : public AFlySwimSurvivalCharacter
	{
	public:
		unsigned char                                              UnknownData_TKB5[0x30];                                  // 0x2340(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UArrowComponent*                                     ForwardArrow;                                            // 0x2370(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArrowComponent*                                     UpArrow;                                                 // 0x2378(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArrowComponent*                                     DownArrow;                                               // 0x2380(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArrowComponent*                                     LeftArrow;                                               // 0x2388(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArrowComponent*                                     RightArrow;                                              // 0x2390(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C2N8[0x10];                                  // 0x2398(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanUseSteeringBehavior;                                 // 0x23A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IKDI[0x3];                                   // 0x23A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SurfaceBuffer;                                           // 0x23AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9R5I[0x14];                                  // 0x23B0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSwimmingCharacterMovementSettings                  DefaultMovementSettings;                                 // 0x23C4(0x0010) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8QBB[0x4];                                   // 0x23D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESwimmingMovementType, struct FSwimmingCharacterMovementSettings> CharacterMovementSettings;                               // 0x23D8(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		float                                                      AvoidanceLength_Forward;                                 // 0x2428(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceLength_Side;                                    // 0x242C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceStrength_Forward;                               // 0x2430(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceStrength_Side;                                  // 0x2434(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceStrengthMultiplier;                             // 0x2438(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceSideLengthExtension;                            // 0x243C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxVerticalAngleDot;                                     // 0x2440(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CreaturePushMultiplier;                                  // 0x2444(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MultiHitStrengthMultiplier;                              // 0x2448(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SphereCastRadius;                                        // 0x244C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClampFactor;                                             // 0x2450(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LevelOutFactor;                                          // 0x2454(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidanceInterpSpeed;                                    // 0x2458(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanSprintDuringWander;                                  // 0x245C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_37WF[0x3];                                   // 0x245D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WanderAngle;                                             // 0x2460(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5CZN[0x4];                                   // 0x2464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ActorsToIgnore;                                          // 0x2468(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ETraceTypeQuery                                            TraceType;                                               // 0x2478(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LU3M[0x3];                                   // 0x2479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxAllowableFleeTime;                                    // 0x247C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTimeBeforeSprint;                                     // 0x2480(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBeforeSprint;                                     // 0x2484(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintDuration;                                          // 0x2488(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQ4U[0xC];                                   // 0x248C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowArrowTrace;                                         // 0x2498(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDirection;                                          // 0x2499(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8RHF[0x6];                                   // 0x249A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASurvivalAIController*                               AIController;                                            // 0x24A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AE4F[0x8];                                   // 0x24A8(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetMinWanderHeight();
		float GetMaxWanderHeight();
		bool GetCanUseSteeringBehaviors();
		void EnableSteeringBehavior(bool bSteeringEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TamedCreatureData
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UTamedCreatureData : public UObject
	{
	public:
		unsigned char                                              UnknownData_FX8W[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APetHomeBuilding>                     PetHome;                                                 // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJPP[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PetName;                                                 // 0x0048(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HourTamed;                                               // 0x0058(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TimesPetted;                                             // 0x005C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RawHappinessValue;                                       // 0x0060(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NRWN[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 Personality;                                             // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTameStateChanged;                                      // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASurvivalPlayerCharacter>             PetMaster;                                               // 0x0088(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETamedState                                                TameState;                                               // 0x0090(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3IDM[0x37];                                  // 0x0091(0x0037) MISSED OFFSET (PADDING)

	public:
		void SetTameState(ETamedState State);
		void OnRep_TameState();
		void OnRep_PetMaster();
		void HandleMasterKilled(const struct FDamageInfo& DamageInfo);
		ETamedState GetTameState();
		int32_t GetDaysAsPet();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TeamComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UTeamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_E0MB[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 TeamDataTable;                                           // 0x00B8(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bOverrideReputationOnDeath;                              // 0x00C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FNE0[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ReputationOnDeath;                                       // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4PQ[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (PADDING)

	public:
		void RestoreTeam();
		void OnDeath(const struct FDamageInfo& DamageInfo);
		bool HasTeam();
		ETeamAttitude GetRelationshipToLODActor(class UBaseLODActor* Other);
		ETeamAttitude GetRelationship(class AActor* Other);
		struct FDataTableRowHandle GetDefaultTeamRowHandle();
		struct FDataTableRowHandle GetCurrentTeamRowHandle();
		void ChangeTeam(const struct FDataTableRowHandle& NewTeamDataTable);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyTeamComponent
	 * Size -> 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
	 */
	class UProxyTeamComponent : public UProxyComponent
	{
	public:
		unsigned char                                              UnknownData_29PO[0x18];                                  // 0x0068(0x0018) MISSED OFFSET (PADDING)

	public:
		ETeamAttitude GetRelationshipToLODActor(class UBaseLODActor* Other);
		ETeamAttitude GetRelationshipToActor(class AActor* Other);
		struct FDataTableRowHandle GetCurrentTeamRowHandle();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TeamLODComponent
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UTeamLODComponent : public UBaseLODComponent
	{
	public:
		unsigned char                                              UnknownData_BD4F[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		ETeamAttitude GetRelationshipToObject(class UObject* Other);
		ETeamAttitude GetRelationshipToLODActor(class UBaseLODActor* Other);
		ETeamAttitude GetRelationshipToActor(class AActor* Other);
		struct FDataTableRowHandle GetCurrentTeamRowHandle();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TechDepositComponent
	 * Size -> 0x0000 (FullSize[0x00D8] - InheritedSize[0x00D8])
	 */
	class UTechDepositComponent : public UAnimationInteractComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TelemetryComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UTelemetryComponent : public UActorComponent
	{
	public:
		float                                                      MinMoveTelemetry;                                        // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableTelemetryTick;                                    // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I41W[0x23];                                  // 0x00B5(0x0023) MISSED OFFSET (PADDING)

	public:
		void OnPlayerMove(const struct FVector& Location, const class FString& MapName);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TerminalSwitch
	 * Size -> 0x0068 (FullSize[0x02F0] - InheritedSize[0x0288])
	 */
	class ATerminalSwitch : public ASwitch
	{
	public:
		unsigned char                                              PersistentListeners[0x10];                               // 0x0288(0x0010) UNKNOWN PROPERTY: ArrayProperty
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x0298(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetComponent*                                    Widget;                                                  // 0x02A0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              WidgetClass;                                             // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     Audio;                                                   // 0x02B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       PlayerBlocker;                                           // 0x02B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  ScreenMaterial;                                          // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTerminalConditional>                        Conditionals;                                            // 0x02C8(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		int32_t                                                    CurrentStateIndex;                                       // 0x02D8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETerminalWidgetState                                       CurrentWidgetState;                                      // 0x02DC(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4DH7[0x3];                                   // 0x02DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerminalWidget*                                     ActiveWidget;                                            // 0x02E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            ScreenMID;                                               // 0x02E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_CurrentWidgetState();
		void OnRep_CurrentStateIndex();
		void OnConditionalStateChanged(class UConditionalToggleComponent* Component, bool bEnabled);
		void OnConditionalChanged(const class FName& ConditionalStateName, bool bEnabled);
		bool CanSetGlobalVariables(const class FName& ConditionalStateName, const struct FGlobalVariableReference& GlobalVariable, int32_t DesiredValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TerminalSwitchListener
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UTerminalSwitchListener : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTerminalStateChange;                                   // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnTerminalStateChanged(class ATerminalSwitch* Terminal, const struct FTerminalConditional& ConditionalState);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TerminalWidget
	 * Size -> 0x0080 (FullSize[0x02F8] - InheritedSize[0x0278])
	 */
	class UTerminalWidget : public UGameUserWidget
	{
	public:
		class UCanvasPanel*                                        Waiting;                                                 // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        Start;                                                   // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        Locked;                                                  // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        LockedFlash;                                             // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        Unlocked;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    LoopingCursor;                                           // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    LockedFlashAnim;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    DoorTextLoopAnim;                                        // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    StartupUnlockAnim;                                       // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    LockedAppearAnim;                                        // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    FinishUnlockAnim;                                        // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATerminalSwitch*                                     OwningTerminal;                                          // 0x02D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       InteractionBlocked;                                      // 0x02D8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_37OH[0x7];                                   // 0x02D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        CurrentWidget;                                           // 0x02E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWidgetAnimation*                                    CurrentAnimation;                                        // 0x02E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ETerminalWidgetState                                       CurrentState;                                            // 0x02F0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CPX4[0x7];                                   // 0x02F1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnStateEntered(ETerminalWidgetState State);
		void OnInteractionBlockingAnimationEnded();
		void ExitCurrentState();
		void EnterState(ETerminalWidgetState State);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TexturePacker
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ATexturePacker : public AActor
	{
	public:
		TArray<struct FSourceTexture>                              SourceTextures;                                          // 0x0230(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              DestinationTexture;                                      // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  TexturePackMaterial;                                     // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic*                            TexturePackMID;                                          // 0x0250(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCanvas*                                             Canvas;                                                  // 0x0258(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ThirstReadoutWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UThirstReadoutWidget : public UGameUserWidget
	{
	public:
		float                                                      LastPlayerThirst;                                        // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDisplayedThirst;                                  // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GCHY[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ThirstRatio;                                             // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BOZM[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateThirstAnim();
		void CheckWaterChange(class USurvivalComponent* Sender, float OldValue, float NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TimeOfDayLightingManager
	 * Size -> 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
	 */
	class ATimeOfDayLightingManager : public AActor
	{
	public:
		float                                                      PhotoModeTime;                                           // 0x0230(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PhotoModeAzimuthOffset;                                  // 0x0234(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentFrameNormalizedTime;                              // 0x0238(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XLBO[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FStencilRequiredGlobalPostProcessMaterial>   ManagedPostProcessMaterials;                             // 0x0240(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FWeightedBlendables                                 ActiveBlendables;                                        // 0x0250(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UPhotoModeHelperComponent*                           PhotoModeHelperComponent;                                // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnregisterStencilMaskRenderer(int32_t ObjectID, int32_t StencilValue);
		void SetCutsceneDOF(float DOFBlurRadius);
		void RegisterStencilMaskRenderer(int32_t ObjectID, int32_t StencilValue);
		void OnActiveBlendablesChanged();
		float NativeGetNormalizedTime();
		class UDirectionalLightComponent* GetSunLight();
		class UPostProcessComponent* GetPostProcessMain();
		int32_t GetPhotoModeHour();
		float GetNormalizedPhotoModeTime();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TorchIndicatorWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UTorchIndicatorWidget : public UGameUserWidget
	{
	public:
		unsigned char                                              UnknownData_16YX[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnTorchPercentChanged(float TorchPercent);
		void OnItemPowerStateChangedImpl(bool bIsPowerOn);
		void OnItemPowerStateChanged(bool bIsPowerOn);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TrackedItemSpawnGroup
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UTrackedItemSpawnGroup : public UObject
	{
	public:
		unsigned char                                              UnknownData_V760[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Owner;                                                   // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemSpawnGroupData*                                 ItemSpawnGroupData;                                      // 0x0040(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FItemSpawnGroup                                     SpawnPoints;                                             // 0x0048(0x0030) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RYAS[0xB8];                                  // 0x0078(0x00B8) MISSED OFFSET (PADDING)

	public:
		void OnRest(float RestDuration);
		void OnGlobalVariableChangedEvent(const struct FGuid& GlobalVariableID, int32_t VariableValue, class AActor* Instigator);
		TArray<struct FItemSpawnPointData> GetSpawnPointsToAffect(const struct FItemSpawnGroupEvent& Event);
		TArray<struct FItemSpawnPointData> GetAllSpawnPoints();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TrackingComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UTrackingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_CQPJ[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTrackingPart                                       HeadTracking;                                            // 0x00B8(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTrackingPart                                       BodyTracking;                                            // 0x00D8(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PTT1[0x20];                                  // 0x00F8(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TransmissionReceiverComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UTransmissionReceiverComponent : public UActorComponent
	{
	public:
		class UTransmitterComponent*                               ClosestInRangeTransmittor;                               // 0x00B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VYQB[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGameplayTag, float>                           ReceiverDistanceNoSignals;                               // 0x00C0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      ReceiverDistanceFullSignal;                              // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7Z51[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClosestValidTransmitterChanged;                        // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		float GetClosestTransmitterStrength();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TransmitterComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UTransmitterComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_O1W2[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        TransmittorTypeTag;                                      // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          SignalAudioCue;                                          // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalAudioRange;                                        // 0x00D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalVolumeMax;                                         // 0x00D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalVolumeMin;                                         // 0x00D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalPitchMax;                                          // 0x00DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalPitchMin;                                          // 0x00E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGFM[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     SignalAudioComponent;                                    // 0x00E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTransmissionEnabled;                                    // 0x00F0(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSaveTransmissionState;                                  // 0x00F1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_THEJ[0x6];                                   // 0x00F2(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetTransmissionEnabled(bool bEnable);
		bool IsTransmissionEnabled();
		struct FGameplayTag GetTransmittorType();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Trap
	 * Size -> 0x01B8 (FullSize[0x07D8] - InheritedSize[0x0620])
	 */
	class ATrap : public ABuilding
	{
	public:
		unsigned char                                              UnknownData_SMF6[0x8];                                   // 0x0620(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterEnter;                                        // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterExit;                                         // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemAdded;                                             // 0x0648(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTrapArmed;                                             // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTrapTriggerStateChange;                                // 0x0668(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ETrapArmedSetting                                          TrapArmedSetting;                                        // 0x0678(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETrapApplyType                                             TrapApplyType;                                           // 0x0679(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KQDX[0x2];                                   // 0x067A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerDelay;                                            // 0x067C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K56Z[0x4];                                   // 0x0680(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerRearmTime;                                        // 0x0684(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLJC[0x4];                                   // 0x0688(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDestroyOnTrigger;                                       // 0x068C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZZCS[0x3];                                   // 0x068D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SelfDamageOnTrigger;                                     // 0x0690(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFriendlyFire;                                           // 0x0694(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFriendlyTrigger;                                        // 0x0695(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAlwaysTick;                                             // 0x0696(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAcceptAnyPlayerDamage;                                  // 0x0697(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDamageData                                         DamageData;                                              // 0x0698(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 TrapAttackData;                                          // 0x06C8(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         StatusEffects;                                           // 0x06D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FRecipeRequirements                                 TrapRequirements;                                        // 0x06E8(0x0018) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTrapHitParams                                      TrapHitParams;                                           // 0x0700(0x0030) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              HazardClass;                                             // 0x0730(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              HazardClassPtr[0x28];                                    // 0x0738(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class ATargetPoint*                                        TrapAttackTargetPoint;                                   // 0x0760(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLastActorOnHitHazardOwner;                              // 0x0768(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V0B6[0x7];                                   // 0x0769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastActorOnHit;                                          // 0x0770(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttack*                                             TrapAttack;                                              // 0x0778(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ItemsAdded;                                              // 0x0780(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DRG1[0x4];                                   // 0x0784(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ASurvivalCharacter>>           TargetsInside;                                           // 0x0788(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              bTrapArmed : 1;                                          // 0x0798(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETrapTriggerState                                          TrapTriggerState;                                        // 0x0799(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AJLP[0x6];                                   // 0x079A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         TriggerComponents;                                       // 0x07A0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UAttackHandlerComponent*                             AttackHandlerComponent;                                  // 0x07B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T0TY[0x20];                                  // 0x07B8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SpawnHazard();
		void SetTrapArmed(bool bActive, bool bForce);
		void OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnSpawnHazard(class AHazard* SpawnedHazard);
		void OnRep_TrapTriggerState();
		void OnRep_TrapArmed();
		void OnRep_ItemsAdded();
		void OnHit(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		bool IsTrapArmed();
		bool IsFull();
		float GetTriggerDelay();
		float GetRemainingTriggerDelay();
		int32_t GetNumItems();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.TypeRestrictedStorageBuilding
	 * Size -> 0x00A8 (FullSize[0x06C8] - InheritedSize[0x0620])
	 */
	class ATypeRestrictedStorageBuilding : public ABuilding
	{
	public:
		TArray<struct FDataTableRowHandle>                         AllowedItems;                                            // 0x0620(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UStaticMesh*                                         StoredMesh;                                              // 0x0630(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Capacity;                                                // 0x0638(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLocString                                          PutString;                                               // 0x063C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KSOF[0x4];                                   // 0x064C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           OnItemAddedSFX;                                          // 0x0650(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle_NetCrc>                  StoredItems;                                             // 0x0658(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        SpawnedVisuals;                                          // 0x0668(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FInstancedStorageData>            InstSpawnedVisuals;                                      // 0x0678(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_StoredItems();
		void MulticastPlaceItem();
		bool HasPlaceableItem(class AActor* InstigatedBy);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.UINotificationBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class UUINotificationBase : public UGameUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.UpgradeCollectible
	 * Size -> 0x0010 (FullSize[0x0280] - InheritedSize[0x0270])
	 */
	class AUpgradeCollectible : public ACollectible
	{
	public:
		bool                                                       bPartyUpgrade;                                           // 0x0270(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VKF3[0x3];                                   // 0x0271(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    UpgradePoints;                                           // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    SphereComponent;                                         // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ProxyUpgradeCollectibleActor
	 * Size -> 0x0008 (FullSize[0x0100] - InheritedSize[0x00F8])
	 */
	class UProxyUpgradeCollectibleActor : public UProxyActor
	{
	public:
		unsigned char                                              UnknownData_9ZJI[0x8];                                   // 0x00F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.UpgradeCollectibleLODActor
	 * Size -> 0x0000 (FullSize[0x0110] - InheritedSize[0x0110])
	 */
	class UUpgradeCollectibleLODActor : public UBaseLODActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.UserInterfaceStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUserInterfaceStatics : public UBlueprintFunctionLibrary
	{
	public:
		void ScrollInViewForFocus(class UScrollBox* ScrollBox, class UWidget* Widget, bool AnimateScroll, float Padding);
		void RemoveItemsForCraftingRecipe(const struct FDataTableRowHandle& RecipeRowHandle, TArray<class UItem*>* HaveItems);
		class FText MakeTextDirectional(const class FText& Text);
		struct FHotBarQuickSlotItemTypeKey MakeHotBarQuickSlotItemTypeKeyFromItem(class UItem* Item);
		void LogUIMessage(const class FString& Message);
		bool IsValidLocalizedString(const struct FLocString& LocString);
		bool IsKeyItem(const struct FDataTableRowHandle& ItemRowHandle);
		bool HasRequirements(class UObject* WorldContextObject, TArray<struct FRecipeRequirements> Requirements, TArray<class UItem*> HaveItems);
		class UWidgetPlayerProxy* GetWidgetManagerOwnerProxy(class UObject* WorldContextObject);
		class UWidgetManager* GetWidgetManager(class UObject* WorldContextObject);
		class UScrollBox* GetParentScrollBox(class UWidget* Widget);
		int32_t GetMaxCraftable(class UObject* WorldContextObject, const struct FDataTableRowHandle& RecipeRowHandle, TArray<class UItem*> HaveItems);
		class FString GetLocalizedString(const struct FLocString& LocString);
		int32_t GetItemCountForHotBarKey(const struct FHotBarQuickSlotItemTypeKey& ItemKey, TArray<class UItem*> HaveItems, bool IncludeBrokenItems);
		int32_t GetItemCount(const struct FDataTableRowHandle& ItemRowHandle, TArray<class UItem*> HaveItems, bool IncludeBrokenItems);
		struct FLinearColor GetHeatMapColor(class UObject* WorldContextObject, float Alpha);
		struct FLinearColor GetGlobalColorLinear(class UObject* WorldContextObject, const class FName& EnumName);
		class AGameUI* GetGameUI(class UObject* WorldContextObject);
		bool GetFilterMatches(const class FString& FilterText, TArray<class FString> Keywords);
		bool GetCultureFlowIsRTL();
		class FString GetAttackSpeedText(const struct FGameplayTag& AttackSpeedTag);
		void FindScreenEdgeLocationForWorldLocation(class UObject* WorldContextObject, const struct FVector& InLocation, float EdgePercent, struct FVector2D* OutScreenPosition, float* OutRotationAngleDegrees, bool* bIsOnScreen, bool* bFacingBackward);
		bool DoesKeyMatchActionMapping(const struct FKey& Key, const class FName& ActionMappingName);
		bool DoesChordMatchActionMapping(const struct FInputChord& Chord, const class FName& ActionMappingName);
		bool CanCraftRecipeData(class UObject* WorldContextObject, struct FRecipeData* RecipeData, TArray<class UItem*> HaveItems);
		bool CanCraftRecipe(class UObject* WorldContextObject, const struct FDataTableRowHandle& RecipeRowHandle, TArray<class UItem*> HaveItems);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VFXActor
	 * Size -> 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
	 */
	class AVFXActor : public AActor
	{
	public:
		class AActor*                                              TargetActor;                                             // 0x0230(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ViewControl
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UViewControl : public UInterface
	{
	public:
		void UpdateCamera(float DeltaTime);
		void SetCameraView(class UObject* ViewProvider, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, bool bUsePawnLook);
		void SetCamera(class UCameraComponent* InCamera);
		bool IsViewControlledBySelf();
		bool IsBlendInProgress();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VisualEffect
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UVisualEffect : public UDataAsset
	{
	public:
		class UParticleSystem*                                     ParticleSystem;                                          // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              VFXBlueprint;                                            // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAttachedToActor;                                        // 0x0040(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVisualEffectMeshType                                      SocketMeshType;                                          // 0x0041(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1NHM[0x2];                                   // 0x0042(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0044(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MeshTagName;                                             // 0x004C(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShadowCastingEnabled;                                    // 0x0054(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInheritScale;                                           // 0x0055(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SPSL[0x2];                                   // 0x0056(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VisualStateComponent
	 * Size -> 0x0158 (FullSize[0x0208] - InheritedSize[0x00B0])
	 */
	class UVisualStateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_C68Q[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHealthStateChange;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                PrimaryMeshComponentName;                                // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bStartActive;                                            // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDamageStateEffects;                                     // 0x00D9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5049[0x6];                                   // 0x00DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DamageStateCurve;                                        // 0x00E0(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int8_t                                                     DamageMaxLODLevel;                                       // 0x0168(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3SYP[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     HitLocations;                                            // 0x0170(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		EHealthVisualState                                         HealthState;                                             // 0x0180(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KBF9[0x7];                                   // 0x0181(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHealthStateMesh>                            HealthStateMeshes;                                       // 0x0188(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FHealthStateMeshList>     AdditionalHealthStateMeshes;                             // 0x0198(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3RTU[0x10];                                  // 0x01E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponent*                                    HealthComponent;                                         // 0x01F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                MeshComponent;                                           // 0x0200(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetActiveMeshTag(const struct FGameplayTag& NewActiveTag);
		void ResetActiveMeshTag();
		void OnRep_HitLocations();
		void OnRep_HealthState(EHealthVisualState OldHealthState);
		void OnHit(float Damage, const struct FDamageInfo& DamageInfo, class AController* InstigatedBy, class UBaseLODActor* DamageCauser, bool IsKillingBlow);
		void OnHealthChange(class UHealthComponent* SourceHealthComponent, float CurrentHealth, float OldHealth);
		bool HasMeshTag(const struct FGameplayTag& Tag);
		class UStaticMesh* GetMesh(EHealthVisualState HealthState, const struct FGameplayTag& MeshTag);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStat
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UVitalStat : public UDataAsset
	{
	public:
		struct FGameplayTagContainer                               Sematics;                                                // 0x0030(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FFloatRange                                         StartingRange;                                           // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ValueCurve;                                              // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              StartingRangeEnabled;                                    // 0x0068(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TS13[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		float GetDecayRate(class UInterestCore* Core, float DeltaHours);
		float GetDamageResponse(float Damage, const struct FDamageInfo& DamageInfo);
		float GenerateStartingValue(class UInterestCore* Core);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatConstant
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class UVitalStatConstant : public UVitalStat
	{
	public:
		float                                                      Rate;                                                    // 0x0070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bChangeTameRate : 1;                                     // 0x0074(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_73Q4[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TameRate;                                                // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WKZS[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatDamageDriven
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UVitalStatDamageDriven : public UVitalStat
	{
	public:
		float                                                      DamageResponseScale;                                     // 0x0070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O7LB[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatFlyingTiredness
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class UVitalStatFlyingTiredness : public UVitalStatConstant
	{
	public:
		float                                                      WhileGroundedRate;                                       // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4D00[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatHourDriven
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UVitalStatHourDriven : public UVitalStat
	{
	public:
		class UCurveFloat*                                         DecayRateByHourCurve;                                    // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatPetHappiness
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class UVitalStatPetHappiness : public UVitalStatConstant
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatSleepiness
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UVitalStatSleepiness : public UVitalStatHourDriven
	{
	public:
		float                                                      WhileSleepingRate;                                       // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JAC6[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         DecayRateWhileSleepingCurve;                             // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatSwimmingTiredness
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class UVitalStatSwimmingTiredness : public UVitalStatConstant
	{
	public:
		float                                                      WhileRestingRate;                                        // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5I24[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalStatTotalHoursDriven
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UVitalStatTotalHoursDriven : public UVitalStat
	{
	public:
		class UCurveFloat*                                         DecayRateByHourCurve;                                    // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VitalVisualsComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UVitalVisualsComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnVitalValueChanged;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VitalTag;                                                // 0x00C0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VitalValue;                                              // 0x00C8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DGT1[0xC];                                   // 0x00CC(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_VitalValue();
		bool HasVitalTag(const struct FGameplayTag& Tag);
		float GetVitalValue();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VolumetricAudioController
	 * Size -> 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
	 */
	class AVolumetricAudioController : public AActor
	{
	public:
		class AVolumetricAudioEmitter*                             AudioEmitter;                                            // 0x0230(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.VolumetricAudioEmitter
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class AVolumetricAudioEmitter : public AVolume
	{
	public:
		class UAudioComponent*                                     AudioComponent;                                          // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UAudioComponent* GetAudioComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WalkableBoxComponent
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class UWalkableBoxComponent : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WaterBody
	 * Size -> 0x00C0 (FullSize[0x02F0] - InheritedSize[0x0230])
	 */
	class AWaterBody : public AActor
	{
	public:
		unsigned char                                              UnknownData_GMXH[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                DepthImpostorMeshComponent;                              // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ImpostorOffset;                                          // 0x0240(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImpostorRelativeScale;                                   // 0x024C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         StaticMeshToTile;                                        // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMaterialInterface*>                          MaterialLODs;                                            // 0x0258(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		struct FIntVector                                          NumTiles;                                                // 0x0268(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N7XH[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       PostProcessVolume;                                       // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PostProcessVolumeHeight;                                 // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PostProcessVolumeOffset;                                 // 0x0284(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPostProcessComponent*                               UnderwaterPostProcess;                                   // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  UnderwaterPostProcessMaterial;                           // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       BaseCollider;                                            // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BaseCollisionVolumeHeight;                               // 0x02A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BaseCollisionOffset;                                     // 0x02AC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       CameraCollider;                                          // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CameraCollisionOffset;                                   // 0x02C0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CameraCollisionVolumeHeight;                             // 0x02CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UStaticMeshComponent*>                        MeshComponents;                                          // 0x02D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    WaterMIDs;                                               // 0x02E0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void UpdateMeshVisibility();
		void SetMaterialParameters(int32_t MaterialIndex, class UMaterialInstanceDynamic* Mid);
		bool IsPlayerAboveWater();
		float GetWaterSurfaceWorldHeight();
		float GetLocalPlayerDistanceToWater();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WaterManagerComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UWaterManagerComponent : public UActorComponent
	{
	public:
		TArray<class ABuoyantProp*>                                BuoyantPropList;                                         // 0x00B0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AY4F[0x20];                                  // 0x00C0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WaveCreatureComponent
	 * Size -> 0x0130 (FullSize[0x01E0] - InheritedSize[0x00B0])
	 */
	class UWaveCreatureComponent : public UActorComponent
	{
	public:
		bool                                                       bCanDeinstanceBuildings;                                 // 0x00B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2QNC[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeinstanceRadius;                                        // 0x00B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActorCustomTickFunction                            TargetContactTick;                                       // 0x00B8(0x0038) NativeAccessSpecifierPublic
		float                                                      MaxTimeWithoutContact;                                   // 0x00F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeWithoutContact;                                      // 0x00F4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActorCustomTickFunction                            CreatureStuckTick;                                       // 0x00F8(0x0038) NativeAccessSpecifierPublic
		float                                                      MinDistanceToTravelForNotStuck;                          // 0x0130(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LastLocationForStuckTick;                                // 0x0134(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActorCustomTickFunction                            DistanceToBaseTick;                                      // 0x0140(0x0038) NativeAccessSpecifierPublic
		float                                                      MinTravelDistanceForProgress;                            // 0x0178(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastDistToBase;                                          // 0x017C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActorCustomTickFunction                            ProjectedDistanceTick;                                   // 0x0180(0x0038) NativeAccessSpecifierPublic
		float                                                      MinProjectedProgressDistance;                            // 0x01B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastProjectedDistance;                                   // 0x01BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RHME[0x18];                                  // 0x01C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AWaveSpawnTarget*                                    SpawnTarget;                                             // 0x01D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.SpawnedWave
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USpawnedWave : public UObject
	{
	public:
		unsigned char                                              UnknownData_ZY05[0x48];                                  // 0x0028(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WaveManagerComponent
	 * Size -> 0x0158 (FullSize[0x0208] - InheritedSize[0x00B0])
	 */
	class UWaveManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnWaveSpawned;                                           // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveCompleted;                                         // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveAttackStateChanged;                                // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FActorCustomTickFunction                            RetrySpawnsTick;                                         // 0x00E0(0x0038) Protected, NativeAccessSpecifierProtected
		TArray<struct FWaveSpawnFaction>                           SpawnData;                                               // 0x0118(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FHeatBracket>                                HeatBrackets;                                            // 0x0128(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            AdditionalMultiplayerHeat;                               // 0x0138(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    WaveSpawnReputationThreshold;                            // 0x0148(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseBufferDistance;                                      // 0x014C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WaveTargetStartCount;                                    // 0x0150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C5QK[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEQSRequest*                                         SpawnEQSRequest;                                         // 0x0158(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEQSRequest*                                         WaveStartEQSRequest;                                     // 0x0160(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEQSRequest*                                         WaveBaseEQSRequest;                                      // 0x0168(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMusicTrackData*                                     WaveMusicTrack;                                          // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7KGV[0x18];                                  // 0x0178(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USpawnedWave*                                        ActiveWave;                                              // 0x0190(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EWaveAttackState                                           AttackState;                                             // 0x0198(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2CL5[0x3];                                   // 0x0199(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ActiveWaveInitialSpawnCount;                             // 0x019C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ActiveWaveRemainingSpawnCount;                           // 0x01A0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HR4M[0xC];                                   // 0x01A4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bWaveActive : 1;                                         // 0x01B0(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FT9I[0x57];                                  // 0x01B1(0x0057) MISSED OFFSET (PADDING)

	public:
		void OnSpawnKilled(const struct FDamageInfo& DamageInfo);
		void OnRep_WaveActive();
		void OnRep_AttackState();
		bool IsWaveActive();
		float GetWaveProgress();
		int32_t GetNumWaveCreatures();
		int32_t GetInitialWaveCreatureCount();
		void GenerateWaveSpawns(int32_t Heat, TArray<struct FWaveSpawn>* WaveSpawnData);
		void GenerateFactionWaveSpawns(const struct FGameplayTag& FactionTag, int32_t Heat);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WaveSpawnTarget
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class AWaveSpawnTarget : public ATargetPoint
	{
	public:
		unsigned char                                              UnknownData_06FJ[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.Waypoint
	 * Size -> 0x0018 (FullSize[0x0248] - InheritedSize[0x0230])
	 */
	class AWaypoint : public ATargetPoint
	{
	public:
		EWaypointType                                              WaypointType;                                            // 0x0230(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F63V[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AWaypoint*                                           NextWaypoint;                                            // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Duration;                                                // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EmergeVariation;                                         // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetNextWaypoint(class AWaypoint* InWaypoint);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WeaponAnimInstance
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class UWeaponAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_XT9N[0x7];                                   // 0x02B8(0x0007) Fix Super Size
		bool                                                       IsAttacking;                                             // 0x02BF(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBlocking;                                              // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsThrowing;                                              // 0x02C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInCombat;                                              // 0x02C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTurning;                                               // 0x02C3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsEquipping;                                             // 0x02C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RA0E[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnDelta;                                               // 0x02C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimPitch;                                                // 0x02CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasAmmo;                                                // 0x02D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6K24[0xF];                                   // 0x02D1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WebLoginWidget
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class UWebLoginWidget : public UGameUserWidget
	{
	public:
		class FName                                                SubsystemIdentifer;                                      // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWebBrowser*                                         BrowserWidget;                                           // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B2HP[0x28];                                  // 0x0288(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnLoginUrlChanged(const class FText& Text);
		void OnLoginShow();
		void OnLoginHide();
		void CancelWebLogin();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WidgetPlayerProxy
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UWidgetPlayerProxy : public UObject
	{
	public:
		TArray<class UItem*>                                       InventoryItems;                                          // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		class UItem*                                               EquippedMainHandItem;                                    // 0x0038(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedOffHandItem;                                     // 0x0040(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedHeadItem;                                        // 0x0048(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedChestItem;                                       // 0x0050(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedArmsItem;                                        // 0x0058(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedLegsItem;                                        // 0x0060(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItem*                                               EquippedGliderItem;                                      // 0x0068(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UItem*>                                       HauledItems;                                             // 0x0070(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UItem*>                                       EquippedItems;                                           // 0x0080(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UItem*>                                       NearbyItems;                                             // 0x0090(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		TArray<class UItem*> GetInventoryAndEquippedItems();
		TArray<class UItem*> GetInventoryAndEquippedAndHauledItems();
		TArray<class UItem*> GetAllItemsAndNearbyItems();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WidgetManager
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UWidgetManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnWidgetStackChanged;                                    // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_12O0[0x20];                                  // 0x0038(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UWindowWidget*>                               WindowStack;                                             // 0x0058(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UWindowWidget*>                               WindowCache;                                             // 0x0068(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UWidgetPlayerProxy*                                  OwningPlayerProxy;                                       // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASurvivalPlayerController*                           OwningPlayerController;                                  // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASurvivalPlayerCharacter*                            OwningPlayerCharacter;                                   // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YDAB[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void TryCloseInteractableWidget(class AActor* InteractableActor);
		void TogglePauseMenu();
		void SwapItemSlots(class UItem* Item1, int32_t Index1, class UItem* Item2, int32_t Index2);
		void ShowPauseMenu();
		void SetPauseMenuActive(bool bState);
		void RemoveProxyItemsForRecipe(const struct FDataTableRowHandle& RecipeRowHandle);
		void RemoveProxyItem(class UItem* Item, int32_t Count);
		void ProxyUnequipItem(class UItem* Item);
		void ProxyEquipItem(class UItem* Item);
		void OnUsingGamepadChanged(bool IsUsingGamepad);
		void OnPlayerProximityInvetoriesChanged();
		void OnPlayerInventoryChanged();
		void OnPlayerHaulingChanged(class UHaulingComponent* Sender);
		void OnPlayerEquipmentChanged();
		void OnGameStateReset();
		void HidePauseMenu();
		class UWindowWidget* GetTopWindow();
		class UWidgetPlayerProxy* GetOwningPlayerProxy();
		int32_t GetNumWindowsOpen();
		bool GetHideHUD();
		class UWindowWidget* GetActiveWindowOfType();
		void DefragProxyInventory(bool SingleItem);
		class UWindowWidget* CreateWindowWidget();
		void CloseWindowOfType();
		void CloseWindow(class UWindowWidget* Window);
		void CloseAllWindowWidgets();
		void CloseActiveWindowWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WirePlacementComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UWirePlacementComponent : public UActorComponent
	{
	public:
		class AActor*                                              ConnectionStartActor;                                    // 0x00B0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              PossibleConnectionEndActor;                              // 0x00B8(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USplineMeshComponent*                                WireVisualsInstance;                                     // 0x00C0(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              ConnectionVisualsActor;                                  // 0x00C8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsPlacingWire;                                           // 0x00D0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8Z5H[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ConnectionVisuals;                                       // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ServerTryEnterWirePlacementMode(class AActor* Target);
		void ServerExitWirePlacementMode();
		void ServerDisconnectWire(class AActor* InConnection);
		void ServerConnectWire();
		void MulticastUpdateWireLocation(const struct FVector& Start, const struct FVector& End);
		bool GetIsPlacingWire();
		void ClientOnEnterWirePlacementMode();
		void ClientExitWirePlacementMode();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WorldOffsetComponent
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class UWorldOffsetComponent : public USceneComponent
	{
	public:
		struct FVector                                             Offset;                                                  // 0x0228(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y3VR[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.WorldTraceManagerComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UWorldTraceManagerComponent : public UActorComponent
	{
	public:
		TArray<class ULookTriggerComponent*>                       LookTriggerList;                                         // 0x00B0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7QBR[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASurvivalCharacter*>                          RelevanceList;                                           // 0x00C8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0CSG[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ZiplineAnchor
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class UZiplineAnchor : public USceneComponent
	{
	public:
		class FScriptMulticastDelegate                             OnZiplineAttached;                                       // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              SelectModePawn;                                          // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AbsMinAllowedAngleDot;                                   // 0x0240(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRange;                                                // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQN4[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetMaxRange();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ZiplineAnchorBuilding
	 * Size -> 0x0010 (FullSize[0x0630] - InheritedSize[0x0620])
	 */
	class AZiplineAnchorBuilding : public ABuilding
	{
	public:
		class UZiplineAnchor*                                      ZiplineAnchor;                                           // 0x0620(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bPlayerCanInteract : 1;                                  // 0x0628(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7Z62[0x7];                                   // 0x0629(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ZiplineLine
	 * Size -> 0x0098 (FullSize[0x06B8] - InheritedSize[0x0620])
	 */
	class AZiplineLine : public ABuilding
	{
	public:
		class FScriptMulticastDelegate                             OnActorStartZiplining;                                   // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActorStopZiplining;                                    // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USplineMeshComponent*                                SplineMesh;                                              // 0x0640(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                SplineCollision;                                         // 0x0648(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AZiplineAnchorBuilding*                              InitialAnchorA;                                          // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AZiplineAnchorBuilding*                              InitialAnchorB;                                          // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UZiplineAnchor*                                      Anchor1;                                                 // 0x0660(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UZiplineAnchor*                                      Anchor2;                                                 // 0x0668(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector_NetQuantize                                 AnchorLocation1;                                         // 0x0670(0x000C) Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector_NetQuantize                                 AnchorLocation2;                                         // 0x067C(0x000C) Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YXRJ[0x20];                                  // 0x0688(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IngredientLengthUnit;                                    // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YGG[0x4];                                   // 0x06AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ItemAttachmentAudio;                                     // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_AnchorLocation();
		void OnRep_Anchor2();
		void OnRep_Anchor1();
		bool HasAnchor(class UZiplineAnchor* Anchor);
		float GetTerminalSpeed(float VerticalTerminalSpeed);
		float GetSlope();
		struct FVector GetRightDirection();
		class UZiplineAnchor* GetOtherAnchor(class UZiplineAnchor* Anchor);
		float GetLength();
		struct FVector GetDirection();
		struct FRotator GetAttachedRotation();
		struct FVector GetAnchorLocation2();
		struct FVector GetAnchorLocation1();
		class UZiplineAnchor* GetAnchor2();
		class UZiplineAnchor* GetAnchor1();
		void BlueprintUpdateZipline();
		void BlueprintInitializeZipline();
		bool AreAnchors(class UZiplineAnchor* AnchorA, class UZiplineAnchor* AnchorB);
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ZiplineSelectorPawn
	 * Size -> 0x0068 (FullSize[0x02F8] - InheritedSize[0x0290])
	 */
	class AZiplineSelectorPawn : public APawn
	{
	public:
		class FScriptMulticastDelegate                             OnTargetZiplineAnchorChanged;                            // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnZiplineAttachedToOrigin;                               // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UZiplineAnchor*                                      CurrentAnchor;                                           // 0x02B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UZiplineAnchor*                                      OriginAnchor;                                            // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    CameraComponent;                                         // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LineClass;                                               // 0x02C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RKW6[0x20];                                  // 0x02D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LerpTime;                                                // 0x02F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HJZW[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void ServerSetCurrentAnchor(class UZiplineAnchor* ToOther);
		void ServerCreateZipline(class UZiplineAnchor* ToOther);
		void ServerCancel();
		void OnRep_OriginAnchor();
		bool IsValidAnchor(class UZiplineAnchor* Anchor);
		bool IsSelectableAnchor(class UZiplineAnchor* Anchor);
		bool IsConnectionBlocked(class UZiplineAnchor* Anchor);
		bool IsAlreadyConnected(class UZiplineAnchor* Anchor);
		void HandleZiplineAttachedToOriginAnchor(class UZiplineAnchor* Sender, class AZiplineLine* Line);
		class FString GetErrorString(class UZiplineAnchor* Anchor);
		TArray<struct FRecipeRequirements> GetCurrentAnchorRequirements();
		static UClass* StaticClass();
	};

	/**
	 * Class Maine.ZoneManagerComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UZoneManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateZoneDelegate;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FOverlappedVolumes>                          PlayerOverlapVolumes;                                    // 0x00C0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0DVP[0x1C];                                  // 0x00D0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InteriorFadeInTime;                                      // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InteriorFadeOutTime;                                     // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SubmergedFadeInTime;                                     // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SubmergedFadeOutTime;                                    // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1Q35[0x1C];                                  // 0x00FC(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnRep_PlayerOverlapVolumes();
		void OnDayNightChange(bool bIsDayTime);
		struct FDataTableRowHandle GetLocalZoneRowHandle();
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
